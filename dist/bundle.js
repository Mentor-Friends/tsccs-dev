(()=>{"use strict";var e={1:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,c){function i(e){try{a(o.next(e))}catch(e){c(e)}}function s(e){try{a(o.throw(e))}catch(e){c(e)}}function a(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}a((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.CreateTheCharacter=void 0;const r=n(79);t.CreateTheCharacter=function(e){return o(this,void 0,void 0,(function*(){try{console.log(e);const t=yield fetch(r.CreateTheCharacterDataUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok)throw new Error(`Error! status: ${t.status}`);return yield t.json()}catch(e){return e instanceof Error?(console.log("error message: ",e.message),e.message):(console.log("unexpected error: ",e),"An unexpected error occurred")}}))}},310:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,c){function i(e){try{a(o.next(e))}catch(e){c(e)}}function s(e){try{a(o.throw(e))}catch(e){c(e)}}function a(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}a((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.CreateTheConceptApi=void 0;const r=n(79);t.CreateTheConceptApi=function(e){return o(this,void 0,void 0,(function*(){try{const t=yield fetch(r.CreateTheConceptUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok)throw new Error(`Error! status: ${t.status}`);return yield t.json()}catch(e){return e instanceof Error?(console.log("error message: ",e.message),e.message):(console.log("unexpected error: ",e),"An unexpected error occurred")}}))}},969:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,c){function i(e){try{a(o.next(e))}catch(e){c(e)}}function s(e){try{a(o.throw(e))}catch(e){c(e)}}function a(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}a((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.CreateTheConnectionApi=void 0;const r=n(79);t.CreateTheConnectionApi=function(e){return o(this,void 0,void 0,(function*(){try{var t=JSON.stringify(e);console.log("this is the json data"),console.log(t);const n=yield fetch(r.CreateTheConnectionUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:t});if(!n.ok)throw new Error(`Error! status: ${n.status}`);return yield n.json()}catch(e){return e instanceof Error?(console.log("error message: ",e.message),e.message):(console.log("unexpected error: ",e),"An unexpected error occurred")}}))}},773:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,c){function i(e){try{a(o.next(e))}catch(e){c(e)}}function s(e){try{a(o.throw(e))}catch(e){c(e)}}function a(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}a((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.CreateTextData=void 0;const r=n(79);t.CreateTextData=function(e){return o(this,void 0,void 0,(function*(){try{const t=yield fetch(r.CreateTheTextDataUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok)throw new Error(`Error! status: ${t.status}`);return yield t.json()}catch(e){return e instanceof Error?(console.log("error message: ",e.message),e.message):(console.log("unexpected error: ",e),"An unexpected error occurred")}}))}},403:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,c){function i(e){try{a(o.next(e))}catch(e){c(e)}}function s(e){try{a(o.throw(e))}catch(e){c(e)}}function a(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}a((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.GetAllConceptsByType=void 0;const r=n(155),c=n(79);t.GetAllConceptsByType=function(e,t){return o(this,void 0,void 0,(function*(){try{var t=new URLSearchParams;t.append("type",e),t.append("user_id","10267");const o=yield fetch(c.GetAllConceptsByTypeUrl,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:t});if(!o.ok)throw new Error(`Error! status: ${o.status}`);const i=yield o.json();for(var n=0;n<i.length;n++)r.ConceptsData.AddConcept(i[n])}catch(e){return e instanceof Error?(console.log("error message: ",e.message),e.message):(console.log("unexpected error: ",e),"An unexpected error occurred")}}))}},979:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,c){function i(e){try{a(o.next(e))}catch(e){c(e)}}function s(e){try{a(o.throw(e))}catch(e){c(e)}}function a(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}a((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.GetAllConnectionsOfComposition=void 0;const r=n(193),c=n(79);t.GetAllConnectionsOfComposition=function(e){return o(this,void 0,void 0,(function*(){try{const n=yield fetch(c.GetAllConnectionsOfCompositionUrl,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:`composition_id=${e}`});if(!n.ok)throw new Error(`Error! status: ${n.status}`);const o=yield n.json();console.log(o);for(var t=0;t<o.length;t++)r.ConnectionData.AddConnection(o[t]),r.ConnectionData.AddToDictionary(o[t])}catch(e){return e instanceof Error?(console.log("error message: ",e.message),e.message):(console.log("unexpected error: ",e),"An unexpected error occurred")}}))}},176:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,c){function i(e){try{a(o.next(e))}catch(e){c(e)}}function s(e){try{a(o.throw(e))}catch(e){c(e)}}function a(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}a((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.GetConcept=void 0;const r=n(155),c=n(79);t.GetConcept=function(e){return o(this,void 0,void 0,(function*(){try{var t=r.ConceptsData.GetConcept(e);if(null!=t)return t;{const t=yield fetch(c.GetConceptUrl,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:`id=${e}`});if(!t.ok)throw new Error(`Error! status: ${t.status}`);const n=yield t.json();return r.ConceptsData.AddConcept(n),n}}catch(e){return e instanceof Error?(console.log("error message: ",e.message),e.message):(console.log("unexpected error: ",e),"An unexpected error occurred")}}))}},12:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,c){function i(e){try{a(o.next(e))}catch(e){c(e)}}function s(e){try{a(o.throw(e))}catch(e){c(e)}}function a(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}a((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.GetConceptByCharacterAndType=void 0;const r=n(155),c=n(79);t.GetConceptByCharacterAndType=function(e,t){return o(this,void 0,void 0,(function*(){try{var n={character_value:e,type_id:t},o=JSON.stringify(n);const i=yield fetch(c.GetConceptByCharacterAndTypeUrl,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:o});if(!i.ok)throw new Error(`Error! status: ${i.status}`);const s=yield i.json();return r.ConceptsData.AddConcept(s),s}catch(e){return e instanceof Error?(console.log("error message: ",e.message),e.message):(console.log("unexpected error: ",e),"An unexpected error occurred")}}))}},493:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,c){function i(e){try{a(o.next(e))}catch(e){c(e)}}function s(e){try{a(o.throw(e))}catch(e){c(e)}}function a(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}a((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.GetConceptByCharacterValue=void 0;const r=n(155),c=n(79);t.GetConceptByCharacterValue=function(e){return o(this,void 0,void 0,(function*(){try{const t=yield fetch(c.GetConceptByCharacterValueUrl,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:`character_value=${e}`});if(!t.ok)throw new Error(`Error! status: ${t.status}`);const n=yield t.json();return r.ConceptsData.AddConcept(n),n}catch(e){return e instanceof Error?(console.log("error message: ",e.message),e.message):(console.log("unexpected error: ",e),"An unexpected error occurred")}}))}},621:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,c){function i(e){try{a(o.next(e))}catch(e){c(e)}}function s(e){try{a(o.throw(e))}catch(e){c(e)}}function a(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}a((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.GetReservedIds=void 0;const r=n(79),c=n(49);t.GetReservedIds=function(){return o(this,void 0,void 0,(function*(){try{const t=yield fetch(r.GetReservedIdUrl,{method:"GET",headers:{"Content-Type":"application/x-www-form-urlencoded"}});if(!t.ok)throw new Error(`Error! status: ${t.status}`);const n=yield t.json();for(var e=0;e<n.length;e++)c.ReservedIds.AddId(n[e])}catch(e){return e instanceof Error?(console.log("error message: ",e.message),e.message):(console.log("unexpected error: ",e),"An unexpected error occurred")}}))}},79:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CreateTheConnectionUrl=t.CreateTheConceptUrl=t.CreateTheCharacterDataUrl=t.CreateTheTextDataUrl=t.GetReservedIdUrl=t.GetAllConceptsByTypeUrl=t.GetCharacterByCharacterUrl=t.GetConceptByCharacterAndTypeUrl=t.GetConceptByCharacterValueUrl=t.GetAllConnectionsOfCompositionUrl=t.GetAllConnectionsOfUserUrl=t.GetAllConceptsOfUserUrl=t.GetConceptUrl=t.BASE_URL=void 0,t.BASE_URL="https://localhost:7053",t.GetConceptUrl=t.BASE_URL+"/api/getConcept",t.GetAllConceptsOfUserUrl=t.BASE_URL+"/api/get_all_concepts_of_user",t.GetAllConnectionsOfUserUrl=t.BASE_URL+"/api/get_all_connections_of_user",t.GetAllConnectionsOfCompositionUrl=t.BASE_URL+"/api/get_all_connections_of_composition",t.GetConceptByCharacterValueUrl=t.BASE_URL+"/api/get_concept_by_character_value",t.GetConceptByCharacterAndTypeUrl=t.BASE_URL+"/api/get_concept_by_character_and_type",t.GetCharacterByCharacterUrl=t.BASE_URL+"/api/get_character_by_character",t.GetAllConceptsByTypeUrl=t.BASE_URL+"/api/get_all_concepts_by_type",t.GetReservedIdUrl=t.BASE_URL+"/api/get_reserved_ids",t.CreateTheTextDataUrl=t.BASE_URL+"/api/create_text_data",t.CreateTheCharacterDataUrl=t.BASE_URL+"/api/create_character_data",t.CreateTheConceptUrl=t.BASE_URL+"/api/create_the_concept",t.CreateTheConnectionUrl=t.BASE_URL+"/api/create_the_connection"},204:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Concept=void 0;const o=n(155);t.Concept=class{constructor(e,t,n,r,c,i,s,a,u,l,d,h,f,p,y,v=!1){this.id=e,this.userId=t,this.typeId=n,this.typeUserId=r,this.categoryId=c,this.categoryUserId=i,this.referentId=s,this.referent=s,this.referentUserId=a,this.characterValue=u,this.securityId=l,this.securityUserId=d,this.accessId=h,this.accessUserId=f,this.sessionId=p,this.sessionUserId=y,this.x=0,this.y=0,this.type=null,this.isNew=v,o.ConceptsData.AddConcept(this)}getType(){console.log(this.typeId)}}},155:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ConceptsData=void 0;class n{constructor(){this.name="conceptsArray"}static CheckContains(e){for(var t=!1,n=0;n<this.conceptsArray.length;n++)this.conceptsArray[n].id==e.id&&(t=!0);return t}static AddConcept(e){var t=this.CheckContains(e);this.conceptDictionary[e.id]=e,t&&this.RemoveConcept(e),this.conceptsArray.push(e)}static RemoveConcept(e){for(var t=0;t<this.conceptsArray.length;t++)this.conceptsArray[t].id==e.id&&this.conceptsArray.splice(t,1)}static GetConcept(e){var t;t=null;for(var n=0;n<this.conceptsArray.length;n++)this.conceptsArray[n].id==e&&(t=this.conceptsArray[n]);return t}static GetConceptByCharacter(e){var t;t=null;for(var n=0;n<this.conceptsArray.length;n++)this.conceptsArray[n].characterValue==e&&(t=this.conceptsArray[n]);return t}static GetConceptsByTypeId(e){for(var t=[],n=0;n<this.conceptsArray.length;n++)this.conceptsArray[n].typeId==e&&t.push(this.conceptsArray[n]);return t}getName(){return this.name}}t.ConceptsData=n,n.conceptsArray=[],n.conceptDictionary=[]},286:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Connection=void 0,t.Connection=class{constructor(e=0,t,n,o,r,c,i,s,a,u,l,d,h,f,p,y){this.id=e,this.OfTheConceptId=t,this.ToTheConceptId=n,this.ofTheConceptId=t,this.toTheConceptId=n,this.OfTheConceptUserId=o,this.ToTheConceptUserId=r,this.userId=c,this.typeId=i,this.typeUserId=s,this.orderId=a,this.orderUserId=u,this.securityId=l,this.securityUserId=d,this.accessId=h,this.accessUserId=f,this.sessionInformationId=p,this.sessionInformationUserId=y}}},193:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ConnectionData=void 0;class n{constructor(){this.name="Connection Array"}static CheckContains(e){for(var t=!1,n=0;n<this.connectionArray.length;n++)this.connectionArray[n].id==e.id&&(t=!0);return t}static AddConnection(e){this.CheckContains(e)||this.connectionArray.push(e)}static AddToDictionary(e){this.connectionDictionary[e.id]=e}static RemoveConnection(e){for(var t=0;t<this.connectionArray.length;t++)this.connectionArray[t].id==e.id&&this.connectionArray.splice(t,1)}static GetConnection(e){var t;t=null;for(var n=0;n<this.connectionArray.length;n++)this.connectionArray[n].id==e&&(t=this.connectionArray[n]);return t}static GetConnectionsOfComposition(e){for(var t=[],n=0;n<this.connectionArray.length;n++)this.connectionArray[n].typeId==e&&t.push(this.connectionArray[n]);return t}getName(){return this.name}}t.ConnectionData=n,n.connectionArray=[],n.connectionDictionary=[]},49:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,c){function i(e){try{a(o.next(e))}catch(e){c(e)}}function s(e){try{a(o.throw(e))}catch(e){c(e)}}function a(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}a((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.ReservedIds=void 0;const r=n(621);class c{static getId(){return o(this,void 0,void 0,(function*(){console.log(this.ids.length),this.ids.length<5&&(yield(0,r.GetReservedIds)());var e=this.ids[0];return this.ids.shift(),e}))}static AddId(e){this.ids.includes(e)||this.ids.push(e)}}t.ReservedIds=c,c.ids=[]},132:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SyncData=void 0;const o=n(310),r=n(969),c=n(155);class i{static CheckContains(e){for(var t=!1,n=0;n<this.conceptsSyncArray.length;n++)this.conceptsSyncArray[n].id==e.id&&(t=!0);return t}static CheckContainsConnection(e){for(var t=!1,n=0;n<this.connectionSyncArray.length;n++)this.connectionSyncArray[n].id==e.id&&(t=!0);return t}static AddConcept(e){c.ConceptsData.AddConcept(e),this.conceptsSyncArray.push(e)}static RemoveConcept(e){for(var t=0;t<this.conceptsSyncArray.length;t++)this.conceptsSyncArray[t].id==e.id&&this.conceptsSyncArray.splice(t,1)}static AddConnection(e){console.log(this.connectionSyncArray),this.connectionSyncArray.push(e)}static RemoveConnection(e){for(var t=0;t<this.connectionSyncArray.length;t++)this.connectionSyncArray[t].id==e.id&&this.connectionSyncArray.splice(t,1)}static SyncDataOnline(){return this.conceptsSyncArray.length>0&&((0,o.CreateTheConceptApi)(this.conceptsSyncArray),this.conceptsSyncArray=[]),this.connectionSyncArray.length>0&&((0,r.CreateTheConnectionApi)(this.connectionSyncArray),this.connectionSyncArray=[]),"done"}}t.SyncData=i,i.conceptsSyncArray=[],i.connectionSyncArray=[]},446:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TheCharacter=void 0,t.TheCharacter=class{constructor(e,t,n,o,r,c,i,s,a,u){this.id=0,this.isNew=!1,this.userId=e,this.data=t,this.securityId=n,this.securityUserId=o,this.accessId=r,this.accessUserId=c,this.sessionId=i,this.sessionUserId=s,this.isNew=u}}},819:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TheTexts=void 0,t.TheTexts=class{constructor(e,t,n,o,r,c,i,s,a,u){this.id=0,this.userId=e,this.data=t,this.securityId=n,this.securityUserId=o,this.accessId=r,this.accessUserId=c,this.sessionId=i,this.sessionUserId=s,this.entryTimestamp=a,this.isNew=u}}},749:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.selectConceptObject=void 0;const o=n(155);t.selectConceptObject=function(e,t){var n=o.ConceptsData.conceptsArray;console.log(n.length);for(var r=0;r<n.length;r++){var c=n[r].x-50,i=n[r].x+50,s=n[r].y-0,a=n[r].y+100;if(e>c&&e<i&&t>s&&t<a)return n[r]}return null}},795:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,c){function i(e){try{a(o.next(e))}catch(e){c(e)}}function s(e){try{a(o.throw(e))}catch(e){c(e)}}function a(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}a((o=o.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const c=r(n(169)),i=r(n(843));t.default=function e(t,n=null,r=null,s=null,a=null,u=null,l=null){return o(this,void 0,void 0,(function*(){var o,d=null!=a?a:10267,h=null!=u?u:10267,f=null!=l?l:10267,p=null!=s?s:0;for(const s in t)if("string"!=typeof t[s])if(null==n&&null==r){var y=p;o=_=yield(0,i.default)(s,"",!0,d,h,f),y=_.id,p=_.id,e(t[s],_.id,_.userId,y,a,u,l)}else{var v=null!=n?n:999,C=null!=r?r:10267,_=(y=p,yield(0,i.default)(s,"",!0,d,h,f));console.log("of the concept"),console.log(_.id),(0,c.default)(v,C,_.id,_.userId,y,f,_.userId),e(t[s],_.id,_.userId,y,a,u,l)}else v=null!=n?n:999,C=null!=r?r:10267,y=p,_=yield(0,i.default)(s,t[s],!1,d,h,f),(0,c.default)(v,C,_.id,_.userId,y,f,_.userId);return o}))}},602:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,c){function i(e){try{a(o.next(e))}catch(e){c(e)}}function s(e){try{a(o.throw(e))}catch(e){c(e)}}function a(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}a((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const r=n(204),c=n(49),i=n(132);t.default=function(e,t,n,s,a,u,l,d,h,f,p,y,v,C){return o(this,void 0,void 0,(function*(){var o=yield c.ReservedIds.getId(),_=new r.Concept(o,t,a,u,n,s,l,d,e,h,f,p,y,v,C,!0);return i.SyncData.AddConcept(_),_}))}},169:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const o=n(286),r=n(132);t.default=function(e,t,n,c,i,s,a){var u=t,l=t,d=t,h=t,f=t,p=new o.Connection(0,e,n,t,c,d,i,l,1,u,0,h,4,f,s,a);r.SyncData.AddConnection(p)}},133:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,c){function i(e){try{a(o.next(e))}catch(e){c(e)}}function s(e){try{a(o.throw(e))}catch(e){c(e)}}function a(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}a((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.GetComposition=void 0;const r=n(176),c=n(979),i=n(155),s=n(193);function a(e,t,n){var c,s,u;return o(this,void 0,void 0,(function*(){var o={},l=[],d=i.ConceptsData.GetConcept(e);if(null==d&&null!=e&&null!=e&&(d=yield(0,r.GetConcept)(e)),d&&null==d.type){var h=d.typeId,f=i.ConceptsData.GetConcept(h);console.log("this is the to concept type"),console.log(f),d.type=f,null==f&&null!=h&&null!=h&&(f=yield(0,r.GetConcept)(h),d.type=f)}if(null===(c=null==d?void 0:d.type)||void 0===c||c.characterValue,!n.includes(e))return null==d?void 0:d.characterValue;for(var p=0;p<t.length;p++)if(t[p].ofTheConceptId==e){var y=t[p].toTheConceptId,v=i.ConceptsData.GetConcept(y);null==v&&null!=y&&null!=y&&(v=yield(0,r.GetConcept)(y)),v&&null==(null==v?void 0:v.type)&&(h=v.typeId,f=i.ConceptsData.GetConcept(h),console.log("this is the to concept type"),console.log(f),v.type=f,null==f&&null!=h&&null!=h&&(f=yield(0,r.GetConcept)(h),v.type=f));var C=null!==(u=null===(s=null==v?void 0:v.type)||void 0===s?void 0:s.characterValue)&&void 0!==u?u:"top";console.log("after to concept"),console.log(v);var _=C.replace("the_","");if(isNaN(Number(_))){if(_){const e=yield a(y,t,n);o[_]=e}}else{const e=yield a(y,t,n);l[_]=e,o=l}}return o}))}t.GetComposition=function(e){var t,n;return o(this,void 0,void 0,(function*(){var o,u={};yield(0,c.GetAllConnectionsOfComposition)(e),o=s.ConnectionData.GetConnectionsOfComposition(e);for(var l=[],d=0;d<o.length;d++)l.includes(o[d].ofTheConceptId)||l.push(o[d].ofTheConceptId);var h=i.ConceptsData.GetConcept(e);null==h&&null!=e&&null!=e&&(h=yield(0,r.GetConcept)(e));var f=yield a(e,o,l);return u[null!==(n=null===(t=null==h?void 0:h.type)||void 0===t?void 0:t.characterValue)&&void 0!==n?n:"top"]=f,u}))}},505:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,c){function i(e){try{a(o.next(e))}catch(e){c(e)}}function s(e){try{a(o.throw(e))}catch(e){c(e)}}function a(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}a((o=o.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.GetCompositionList=void 0;const c=n(403),i=n(155),s=n(133),a=r(n(537));t.GetCompositionList=function(e){return o(this,void 0,void 0,(function*(){var t=yield(0,a.default)(e),n=[];if(t){yield(0,c.GetAllConceptsByType)(e,10267);for(var o=i.ConceptsData.GetConceptsByTypeId(t.id),r=0;r<o.length;r++){var u=yield(0,s.GetComposition)(o[r].id),l=JSON.stringify(u);n.push(l)}}return n}))}},537:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,c){function i(e){try{a(o.next(e))}catch(e){c(e)}}function s(e){try{a(o.throw(e))}catch(e){c(e)}}function a(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}a((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const r=n(493),c=n(155);t.default=function(e){return o(this,void 0,void 0,(function*(){var t=c.ConceptsData.GetConceptByCharacter(e);return null==t&&e&&(t=yield(0,r.GetConceptByCharacterValue)(e)),t}))}},235:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,c){function i(e){try{a(o.next(e))}catch(e){c(e)}}function s(e){try{a(o.throw(e))}catch(e){c(e)}}function a(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}a((o=o.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const c=n(12),i=r(n(389)),s=r(n(335));t.default=function(e,t,n,r,a,u){return o(this,void 0,void 0,(function*(){var o=t,l=t;a=t;var d,h=t,f=t;if(1==e.length)yield(0,i.default)(e,t,n,r,u);else{var p=yield(0,i.default)(e,t,n,r,u);d=p.isNew?yield(0,s.default)(e,t,4,o,51,h,p.id,p.userId,n,l,r,a,u,f):yield(0,c.GetConceptByCharacterAndType)(e,51)}return d}))}},389:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,c){function i(e){try{a(o.next(e))}catch(e){c(e)}}function s(e){try{a(o.throw(e))}catch(e){c(e)}}function a(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}a((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const r=n(1),c=n(446);t.default=function(e,t,n,i,s){return o(this,void 0,void 0,(function*(){var o=t,a=t,u=t,l=new c.TheCharacter(t,e,n,a,i,o,s,u,"",!1);return console.log("character testing"),yield(0,r.CreateTheCharacter)(l)}))}},335:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,c){function i(e){try{a(o.next(e))}catch(e){c(e)}}function s(e){try{a(o.throw(e))}catch(e){c(e)}}function a(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}a((o=o.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const c=n(12),i=r(n(602));t.default=function(e,t,n,r,s,a,u,l,d,h,f,p,y,v){return o(this,void 0,void 0,(function*(){var o=yield(0,c.GetConceptByCharacterAndType)(e,s),C=o;return 0==C.id&&(C=o=yield(0,i.default)(e,t,n,r,s,a,u,l,d,h,f,p,y,v)),C}))}},843:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,c){function i(e){try{a(o.next(e))}catch(e){c(e)}}function s(e){try{a(o.throw(e))}catch(e){c(e)}}function a(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}a((o=o.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const c=n(773),i=n(12),s=n(819),a=r(n(602)),u=r(n(315));t.default=function(e,t,n=!1,r,l,d=999){return o(this,void 0,void 0,(function*(){d=999;var o,l,h,f=999,p=r,y=r,v=r,C=t.length;if(h=e.startsWith("the_")?e:"the_"+e,n)o=yield(0,u.default)(e,d,r,r),l=yield(0,a.default)(t,r,4,r,o.id,o.userId,0,999,f,p,4,v,d,y);else if(C>255){o=yield(0,u.default)(h,d,y,r),l=yield(0,a.default)(t,r,4,r,o.id,o.userId,0,999,f,p,4,v,d,y);var _=new s.TheTexts(r,t,f,p,4,v,d,y,Date.now().toString(),!0);yield(0,c.CreateTextData)(_)}else{o=yield(0,u.default)(h,d,y,r);var m=yield(0,i.GetConceptByCharacterAndType)(t,o.id);l=m,0==m.id&&0==m.userId&&(l=yield(0,a.default)(t,r,4,r,o.id,o.userId,0,999,f,p,4,v,d,y))}return l}))}},315:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,c){function i(e){try{a(o.next(e))}catch(e){c(e)}}function s(e){try{a(o.throw(e))}catch(e){c(e)}}function a(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}a((o=o.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const c=r(n(602)),i=r(n(537)),s=r(n(235)),a=r(n(665));t.default=function e(t,n,r,u){return o(this,void 0,void 0,(function*(){var o=u,l=yield(0,i.default)(t);if(l&&(0==l.id||0==l.userId)){var d=(0,a.default)(t);if(d[0]==t)l=yield(0,s.default)(t,u,999,999,o,n);else{e(d[0],n,r,u);var h=yield e(d[1],n,r,u);h&&(l=yield(0,c.default)(t,u,1,u,h.id,u,999,u,999,u,999,u,n,u))}}return l}))}},665:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e.split("_")}},752:function(e,t,n){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=n(749),c=n(133),i=n(505),s=o(n(795)),a=n(132),u=n(155),l=document.querySelector("#myForm"),d=document.querySelector("#compositionForm"),h=document.querySelector("#jsonForm"),f=document.querySelector("#nameform"),p=document.querySelector("#getname");setInterval((function(){a.SyncData.SyncDataOnline(),console.log(u.ConceptsData.conceptsArray)}),5e3),l.addEventListener("submit",(e=>{e.preventDefault();const t=document.querySelector("#conceptid").value;(0,c.GetComposition)(Number(t)).then((e=>{const t=document.querySelector("#jsonoutput");var n=JSON.stringify(e);console.log(n),t.innerHTML=n}))})),p.addEventListener("submit",(e=>{e.preventDefault();const t=document.querySelector("#nameconceptid").value;(0,c.GetComposition)(Number(t)).then((e=>{const t=document.querySelector("#firstname"),n=document.querySelector("#lastname");console.log(e),t.value=e.namedata.firstname,n.value=e.namedata.lastname}))})),f.addEventListener("submit",(e=>{e.preventDefault();var t={namedata:{firstname:document.querySelector("#firstname").value,lastname:document.querySelector("#lastname").value}};console.log(t),(0,s.default)(t).then((e=>{var t=e;document.querySelector("#outputid").innerHTML=t.id.toString(),console.log("this is the test for final"),console.log(e)}))})),h.addEventListener("submit",(e=>{e.preventDefault();const t=document.querySelector("#jsondata").value;console.log("this is the composition name"),console.log(t);var n=JSON.parse(t);(0,s.default)(n).then((e=>{var t=e;document.querySelector("#outputid").innerHTML=t.id.toString(),console.log("this is the test for final"),console.log(e)}))})),d.addEventListener("submit",(e=>{e.preventDefault();const t=document.querySelector("#composition_name").value;(0,i.GetCompositionList)(t).then((e=>{const t=document.querySelector("#jsonoutput");var n=JSON.stringify(e);console.log(n),t.innerHTML=JSON.stringify(n)}))})),window.onmousedown=e=>{var t=!0,n=document.querySelector("#myCanvas"),o=(n.getContext("2d"),n.getBoundingClientRect()),c=e.x-o.left+window.scrollX,i=e.y-o.top+window.scrollY,s=(0,r.selectConceptObject)(c,i);window.onmousemove=e=>{var n=e.x-o.left+window.scrollX,r=e.y-o.top+window.scrollY;s&&t&&(s.x=n,s.y=r)},window.onmouseup=e=>{t=!1,s=null}}}},t={};!function n(o){var r=t[o];if(void 0!==r)return r.exports;var c=t[o]={exports:{}};return e[o].call(c.exports,c,c.exports,n),c.exports}(752)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,