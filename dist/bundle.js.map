{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://mftsccs-browser/webpack/bootstrap","webpack://mftsccs-browser/webpack/runtime/define property getters","webpack://mftsccs-browser/webpack/runtime/hasOwnProperty shorthand","webpack://mftsccs-browser/webpack/runtime/make namespace object","webpack://mftsccs-browser/./src/DataStructures/SettingData.ts","webpack://mftsccs-browser/./src/DataStructures/BaseUrl.ts","webpack://mftsccs-browser/./src/Database/indexeddb.ts","webpack://mftsccs-browser/./src/DataStructures/IdentifierFlags.ts","webpack://mftsccs-browser/./src/DataStructures/Node.ts","webpack://mftsccs-browser/./src/DataStructures/BinaryCharacterTree.ts","webpack://mftsccs-browser/./src/DataStructures/BinaryTree.ts","webpack://mftsccs-browser/./src/DataStructures/Concept.ts","webpack://mftsccs-browser/./src/Services/CreateDefaultConcept.ts","webpack://mftsccs-browser/./src/DataStructures/TypeNode.ts","webpack://mftsccs-browser/./src/DataStructures/BinaryTypeTree.ts","webpack://mftsccs-browser/./src/DataStructures/ConceptData.ts","webpack://mftsccs-browser/./src/Services/CreateBinaryTreeFromData.ts","webpack://mftsccs-browser/./src/DataStructures/Responses/ErrorResponse.ts","webpack://mftsccs-browser/./src/Services/Common/ErrorPosting.ts","webpack://mftsccs-browser/./src/DataStructures/Security/TokenStorage.ts","webpack://mftsccs-browser/./src/Services/Security/GetRequestHeader.ts","webpack://mftsccs-browser/./src/Api/Search/SearchLinkMultipleApi.ts","webpack://mftsccs-browser/./src/Services/SplitStrings.ts","webpack://mftsccs-browser/./src/Api/GetAllConceptsByType.ts","webpack://mftsccs-browser/./src/DataStructures/Connection.ts","webpack://mftsccs-browser/./src/DataStructures/ConnectionBinaryTree/ConnectionNode.ts","webpack://mftsccs-browser/./src/DataStructures/ConnectionBinaryTree/ConnectionBinaryTree.ts","webpack://mftsccs-browser/./src/DataStructures/ConnectionBinaryTree/NodePrimitive.ts","webpack://mftsccs-browser/./src/DataStructures/ConnectionBinaryTree/ConnectionOfNode.ts","webpack://mftsccs-browser/./src/DataStructures/ConnectionBinaryTree/ConnectionOfTheTree.ts","webpack://mftsccs-browser/./src/DataStructures/ConnectionBinaryTree/ConnectionTypeNode.ts","webpack://mftsccs-browser/./src/DataStructures/ConnectionBinaryTree/ConnectionTypeTree.ts","webpack://mftsccs-browser/./src/DataStructures/ConnectionData.ts","webpack://mftsccs-browser/./src/Api/GetConceptBulk.ts","webpack://mftsccs-browser/./src/Services/FindConeceptsFromConnection.ts","webpack://mftsccs-browser/./src/Services/FindConnectionsOfCompositionBulkInMemory.ts","webpack://mftsccs-browser/./src/Api/GetAllConnectionsOfCompositionBulk.ts","webpack://mftsccs-browser/./src/Database/indexdblocal.ts","webpack://mftsccs-browser/./src/DataStructures/Local/LNode.ts","webpack://mftsccs-browser/./src/DataStructures/Local/LocalBinaryTree.ts","webpack://mftsccs-browser/./src/DataStructures/Local/LocalBinaryCharacterTree.ts","webpack://mftsccs-browser/./src/DataStructures/Local/LocalBinaryTypeTree.ts","webpack://mftsccs-browser/./src/Services/Local/CreateDefaultLConcept.ts","webpack://mftsccs-browser/./src/DataStructures/Local/LocalGhostIdTree.ts","webpack://mftsccs-browser/./src/Api/Create/CreateTheGhostConceptApi.ts","webpack://mftsccs-browser/./src/DataStructures/Local/LocalSyncData.ts","webpack://mftsccs-browser/./src/DataStructures/Local/LocalConnectionData.ts","webpack://mftsccs-browser/./src/Services/Local/ConvertFromLConnectionToConnection.ts","webpack://mftsccs-browser/./src/DataStructures/Local/LocalConceptData.ts","webpack://mftsccs-browser/./src/Api/GetConcept.ts","webpack://mftsccs-browser/./src/Api/GetAllConnectionsOfComposition.ts","webpack://mftsccs-browser/./src/Services/GetComposition.ts","webpack://mftsccs-browser/./src/Api/GetConceptByCharacterValue.ts","webpack://mftsccs-browser/./src/Services/GetConceptByCharacter.ts","webpack://mftsccs-browser/./src/Services/Local/GetConceptByCharacterLocal.ts","webpack://mftsccs-browser/./src/Services/GetCompositionList.ts","webpack://mftsccs-browser/./src/Api/Translate/TranslateLocalToReal.ts","webpack://mftsccs-browser/./src/Services/Local/GetCompositionLocal.ts","webpack://mftsccs-browser/./src/Services/Local/GetCompositionListLocal.ts","webpack://mftsccs-browser/./src/Api/Create/CreateTheConceptApi.ts","webpack://mftsccs-browser/./src/Api/Create/CreateTheConnectionApi.ts","webpack://mftsccs-browser/./src/DataStructures/SyncData.ts","webpack://mftsccs-browser/./src/Services/CreateTheConnection.ts","webpack://mftsccs-browser/./src/Api/Create/CreateTheTextData.ts","webpack://mftsccs-browser/./src/Api/GetConceptByCharacterAndType.ts","webpack://mftsccs-browser/./src/Api/MakeTheNameInBackend.ts","webpack://mftsccs-browser/./src/DataStructures/TheTexts.ts","webpack://mftsccs-browser/./src/Api/GetReservedConnectionIds.ts","webpack://mftsccs-browser/./src/DataStructures/ReservedIds.ts","webpack://mftsccs-browser/./src/Api/GetReservedIds.ts","webpack://mftsccs-browser/./src/Services/CreateTheConcept.ts","webpack://mftsccs-browser/./src/Services/MakeTheInstanceConcept.ts","webpack://mftsccs-browser/./src/Services/CreateTheComposition.ts","webpack://mftsccs-browser/./src/Services/Local/CreateLocalBinaryTreeFromData.ts","webpack://mftsccs-browser/./src/DataStructures/Local/LocalId.ts","webpack://mftsccs-browser/./src/Services/Local/CreateTheConnectionLocal.ts","webpack://mftsccs-browser/./src/Services/Local/CreateTheConceptLocal.ts","webpack://mftsccs-browser/./src/Services/Local/MakeTheConceptLocal.ts","webpack://mftsccs-browser/./src/Services/Local/MakeTheTypeLocal.ts","webpack://mftsccs-browser/./src/Services/Local/MakeTheInstanceConceptLocal.ts","webpack://mftsccs-browser/./src/Services/Local/CreateTheCompositionLocal.ts","webpack://mftsccs-browser/./src/Api/GetConnectionOfTheConcept.ts","webpack://mftsccs-browser/./src/Services/CreateTheConnectionGeneral.ts","webpack://mftsccs-browser/./src/Api/DeleteTheConnection.ts","webpack://mftsccs-browser/./src/Api/GetConnection.ts","webpack://mftsccs-browser/./src/Services/GetConnections.ts","webpack://mftsccs-browser/./src/Services/DeleteConnection.ts","webpack://mftsccs-browser/./src/Services/GetTheConcept.ts","webpack://mftsccs-browser/./src/Services/CreateConnectionBetweenTwoConcepts.ts","webpack://mftsccs-browser/./src/Database/NoIndexDb.ts","webpack://mftsccs-browser/./src/Services/GetLink.ts","webpack://mftsccs-browser/./src/DataStructures/TheCharacter.ts","webpack://mftsccs-browser/./src/DataStructures/CharacterRepository.ts","webpack://mftsccs-browser/./src/DataStructures/Returner.ts","webpack://mftsccs-browser/./src/Api/Create/CreateTheCharacter.ts","webpack://mftsccs-browser/./src/Services/MakeTheCharacterData.ts","webpack://mftsccs-browser/./src/Services/MakeTheConcept.ts","webpack://mftsccs-browser/./src/Services/MakeTheCharacter.ts","webpack://mftsccs-browser/./src/Services/MakeTheTypeConcept.ts","webpack://mftsccs-browser/./src/Api/SearchConcept/GetConceptByCharacterAndCategoryDirect.ts","webpack://mftsccs-browser/./src/Services/ConceptFinding/GetConceptByCharacterAndCategory.ts","webpack://mftsccs-browser/./src/Api/MakeTheTypeConceptApi.ts","webpack://mftsccs-browser/./src/Api/GetAllLinkerConnectionsFromTheConcept.ts","webpack://mftsccs-browser/./src/Api/GetAllLinkerConnectionsToTheConcept.ts","webpack://mftsccs-browser/./src/Services/GetLinkerConnectionFromConcept.ts","webpack://mftsccs-browser/./src/Api/DeleteTheConcept.ts","webpack://mftsccs-browser/./src/Services/DeleteConcept.ts","webpack://mftsccs-browser/./src/Api/Delete/DeleteConceptInBackend.ts","webpack://mftsccs-browser/./src/Services/MakeTheTimestamp.ts","webpack://mftsccs-browser/./src/DataStructures/SearchQuery.ts","webpack://mftsccs-browser/./src/Api/GetConnectionBulk.ts","webpack://mftsccs-browser/./src/Services/GetCompositionBulk.ts","webpack://mftsccs-browser/./src/Api/RecursiveSearch.ts","webpack://mftsccs-browser/./src/Api/Login.ts","webpack://mftsccs-browser/./src/Api/Signup.ts","webpack://mftsccs-browser/./src/Api/Signin.ts","webpack://mftsccs-browser/./src/Helpers/UniqueInsert.ts","webpack://mftsccs-browser/./src/Helpers/CheckIfExists.ts","webpack://mftsccs-browser/./src/Helpers/RemoveFromArray.ts","webpack://mftsccs-browser/./src/DataStructures/Composition/CompositionNode.ts","webpack://mftsccs-browser/./src/DataStructures/Composition/CompositionBinaryTree.ts","webpack://mftsccs-browser/./src/Services/Composition/BuildComposition.ts","webpack://mftsccs-browser/./src/DataStructures/Composition/Composition.ts","webpack://mftsccs-browser/./src/Services/Mqtt/publishMessage.ts","webpack://mftsccs-browser/./src/Services/Composition/CreateCompositionCache.ts","webpack://mftsccs-browser/./src/Services/UpdateComposition.ts","webpack://mftsccs-browser/./src/Api/Search/Search.ts","webpack://mftsccs-browser/./src/Api/Search/SearchWithLinker.ts","webpack://mftsccs-browser/./src/Services/Composition/CompositionCache.ts","webpack://mftsccs-browser/./src/Api/Session/CreateSession.ts","webpack://mftsccs-browser/./src/Api/Session/CreateSessionVisit.ts","webpack://mftsccs-browser/./src/Services/GetRelation.ts","webpack://mftsccs-browser/./src/DataStructures/User/UserNode.ts","webpack://mftsccs-browser/./src/DataStructures/User/UserBinaryTree.ts","webpack://mftsccs-browser/./src/Services/User/UserTranslation.ts","webpack://mftsccs-browser/./src/Constants/FormatConstants.ts","webpack://mftsccs-browser/./src/Services/Search/FormatData.ts","webpack://mftsccs-browser/./src/Services/Search/SearchWithTypeAndLinker.ts","webpack://mftsccs-browser/./src/Services/Search/SearchLinkMultiple.ts","webpack://mftsccs-browser/./src/Services/Conversion/ConvertConcepts.ts","webpack://mftsccs-browser/./src/Services/Local/GetTheConceptLocal.ts","webpack://mftsccs-browser/./src/Services/Local/UpdateCompositionLocal.ts","webpack://mftsccs-browser/./src/Services/Local/GetConnectionOfTheConceptLocal.ts","webpack://mftsccs-browser/./src/Services/Local/GetRelationLocal.ts","webpack://mftsccs-browser/./src/Api/View/ViewInternalDataApi.ts","webpack://mftsccs-browser/./src/Services/View/ViewInternalData.ts","webpack://mftsccs-browser/./src/Api/Search/SearchInternalApi.ts","webpack://mftsccs-browser/./src/Services/Search/SearchLinkInternal.ts","webpack://mftsccs-browser/./src/Services/Local/CreateConnectionBetweenTwoConceptsLocal.ts","webpack://mftsccs-browser/./src/Services/Local/DeleteConceptLocal.ts","webpack://mftsccs-browser/./src/Api/GetCompositionConnectionsBetweenTwoConcepts.ts","webpack://mftsccs-browser/./src/Services/GetConnectionBetweenTwoConceptsLinker.ts","webpack://mftsccs-browser/./src/Services/Common/DelayFunction.ts","webpack://mftsccs-browser/./src/Constants/AccessConstants.ts","webpack://mftsccs-browser/./src/Api/Search/SearchWithTypeAndLinker.ts","webpack://mftsccs-browser/./src/WrapperFunctions/DepenedencyObserver.ts","webpack://mftsccs-browser/./src/WrapperFunctions/SearchLinkMultipleAllObservable.ts","webpack://mftsccs-browser/./src/WrapperFunctions/GetCompositionObservable.ts","webpack://mftsccs-browser/./src/WrapperFunctions/GetCompositionListObservable.ts","webpack://mftsccs-browser/./src/WrapperFunctions/GetLinkObservable.ts","webpack://mftsccs-browser/./src/WrapperFunctions/RecursiveSearchObservable.ts","webpack://mftsccs-browser/./src/WrapperFunctions/GetLinkListObservable.ts","webpack://mftsccs-browser/./src/DataStructures/Local/LConcept.ts","webpack://mftsccs-browser/./src/DataStructures/Local/LConnection.ts","webpack://mftsccs-browser/./src/DataStructures/PatcherStructure.ts","webpack://mftsccs-browser/./src/DataStructures/Session/SessionData.ts","webpack://mftsccs-browser/./src/DataStructures/FilterSearch.ts","webpack://mftsccs-browser/./src/DataStructures/Search/SearchStructure.ts","webpack://mftsccs-browser/./src/Services/GetDataFromIndexDb.ts","webpack://mftsccs-browser/./src/Api/GetAiData.ts","webpack://mftsccs-browser/./src/DataStructures/Settings.ts","webpack://mftsccs-browser/./src/Services/InitializeSystem.ts","webpack://mftsccs-browser/./src/Widgets/BaseObserver.ts","webpack://mftsccs-browser/./src/Widgets/BaseWidget.ts","webpack://mftsccs-browser/./src/Widgets/StatefulWidget.ts","webpack://mftsccs-browser/./src/Services/DeleteConnectionByType.ts","webpack://mftsccs-browser/./src/DataStructures/Search/FreeschemaQuery.ts","webpack://mftsccs-browser/./src/Api/Search/FreeschemaQueryApi.ts","webpack://mftsccs-browser/./src/WrapperFunctions/SchemaQueryObservable.ts","webpack://mftsccs-browser/./src/app.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export class SettingData {\n    constructor(isOnlineSync) {\n        this.id = 1;\n        this.isOnlineSync = false;\n        this.isOnlineSync = isOnlineSync;\n    }\n}\n","export class BaseUrl {\n    // static GetConceptUrl:string = this.BASE_URL + '/api/getConcept';\n    static GetConceptUrl() {\n        return this.BASE_URL + '/api/getConcept';\n    }\n    static GetConnectionUrl() {\n        return this.BASE_URL + '/api/get-connection-by-id';\n    }\n    static GetConceptBulkUrl() {\n        return this.BASE_URL + '/api/get_concept_bulk';\n    }\n    static GetConnectionBulkUrl() {\n        return this.BASE_URL + '/api/get_connection_bulk';\n    }\n    static GetAllConceptsOfUserUrl() {\n        return this.BASE_URL + '/api/get_all_concepts_of_user';\n    }\n    static GetAllConnectionsOfUserUrl() {\n        return this.BASE_URL + '/api/get_all_connections_of_user';\n    }\n    static GetAllConnectionsOfCompositionUrl() {\n        return this.BASE_URL + '/api/get_all_connections_of_composition';\n    }\n    static GetAllConnectionsOfCompositionBulkUrl() {\n        return this.BASE_URL + '/api/get_all_connections_of_composition_bulk';\n    }\n    static GetConceptByCharacterValueUrl() {\n        return this.BASE_URL + '/api/get_concept_by_character_value';\n    }\n    static GetConceptByCharacterAndTypeUrl() {\n        return this.BASE_URL + '/api/get_concept_by_character_and_type';\n    }\n    static GetConceptByCharacterAndCategoryUrl() {\n        return this.BASE_URL + '/api/get_concept_by_character_and_category';\n    }\n    static GetConceptByCharacterAndCategoryDirectUrl() {\n        return this.BASE_URL + '/api/get_concept_by_character_and_category_direct';\n    }\n    static GetCharacterByCharacterUrl() {\n        return this.BASE_URL + '/api/get_character_by_character';\n    }\n    static GetAllConceptsByTypeUrl() {\n        return this.BASE_URL + '/api/get_all_concepts_by_type';\n    }\n    static GetAllConnectionsOfConceptUrl() {\n        return this.BASE_URL + '/api/get-link-connections';\n    }\n    static GetAllAiData() {\n        return this.BASE_URL + '/api/get-preloaded-concepts';\n        // return this.AI_URL + '/api/get_ranked_type_id?inpage=300' || process.env.AI_URL ||  'https://ai.freeschema.com/api/get_ranked_type_id?inpage=300';\n    }\n    static GetAllPrefetchConnectionsUrl() {\n        return this.BASE_URL + '/api/get_all_connections_of_user?inpage=500';\n    }\n    static GetAllLinkerConnectionOfConceptUrl() {\n        return this.BASE_URL + '/api/get-all-linkers-from-concept';\n    }\n    static GetAllLinkerConnectionToConceptUrl() {\n        return this.BASE_URL + '/api/get-all-linkers-to-concept';\n    }\n    static DeleteConceptUrl() {\n        return this.BASE_URL + '/api/delete_concept';\n    }\n    static RecursiveSearchUrl() {\n        return this.BASE_URL + '/api/recursivesearch-concept-connection';\n    }\n    static SearchLinkMultipleAllApiUrl() {\n        return this.BASE_URL + '/api/Connection/search-link-multiple-all-ccs';\n    }\n    static MakeTheNameInBackendUrl() {\n        return this.BASE_URL + '/api/make-name-from-frontend';\n    }\n    static SearchAllTypeWithLinker(auth = true) {\n        if (auth) {\n            return this.BASE_URL + '/api/search-all-with-linker-ccs';\n        }\n        else {\n            return this.BASE_URL + '/api-search-compositions-internal-clean-ccs';\n        }\n    }\n    static LoginUrl() {\n        return this.BASE_URL + '/api/auth/login';\n    }\n    static SignupUrl() {\n        return this.BASE_URL + '/api/auth/signup';\n    }\n    static GetCompositionConnectionBetweenTwoConceptsUrl() {\n        return this.BASE_URL + '/api/get-composition-connection-between-two-concepts';\n    }\n    static SearchCompositionsUrl() {\n        return this.BASE_URL + '/api/search-compositions';\n    }\n    static SearchLinkMultipleAll() {\n        return this.BASE_URL + '/api/Connection/search-link-multiple-all';\n    }\n    static CreateSessionId() {\n        return this.BASE_URL + '/api/create-session-id-remote';\n    }\n    static CreateSessionVisitUrl() {\n        return this.BASE_URL + '/api/create-remote-session-visit';\n    }\n    //////////////////////////////////////////////////////////////////////////////\n    /////////////////////Api for viewing internal data //////////////////////////\n    static ViewInternalDataUrl() {\n        return this.BASE_URL + '/api/view-api-internal-data-ccs-id-bulk';\n    }\n    static SearchInternalWithAuthenticatedCcsUrl() {\n        return this.BASE_URL + '/api/search-composition-internal-authenticated-ccs';\n    }\n    static SearchInternalWithCcsUrl() {\n        return this.BASE_URL + '/api-search-compositions-internal-clean-ccs';\n    }\n    static CreateGhostConceptApiUrl() {\n        return BaseUrl.NODE_URL + '/api/v1/local-concepts';\n    }\n    static CreateGhostConnectionApiUrl() {\n        return BaseUrl.NODE_URL + '/api/v1/local-connections';\n    }\n    static GetRealConceptById() {\n        return BaseUrl.NODE_URL + '/api/v1/local-concepts-translate';\n    }\n    //////////////////////////////////////////////////////////////////////////////\n    //////////////// API For Reserved Ids ///////////////////////////////////////\n    static GetReservedIdUrl() {\n        return this.BASE_URL + '/api/get_reserved_ids';\n    }\n    static GetReservedConnectionIdUrl() {\n        return this.BASE_URL + '/api/get_reserved_connection_ids';\n    }\n    /////////////////////////////////////////////////////////////////////////////\n    ////////////////API For Creating Data //////////////////////////////////////\n    static CreateTheTextDataUrl() {\n        return this.BASE_URL + '/api/create_text_data';\n    }\n    static CreateTheCharacterDataUrl() {\n        return this.BASE_URL + '/api/create_character_data';\n    }\n    static CreateTheConceptUrl() {\n        return this.BASE_URL + '/api/create_the_concept';\n    }\n    static CreateTheConnectionUrl() {\n        return this.BASE_URL + '/api/create_the_connection';\n    }\n    static CreateTheConnectionNewUrl() {\n        return this.BASE_URL + '/api/create_the_connection_new';\n    }\n    static MakeTheTypeConceptUrl() {\n        return this.BASE_URL + '/api/make_the_type_concept';\n    }\n    ////////////////////////////////////////////////////////////////////////\n    /////////////////////API FOR Deleting Connection //////////////////////\n    static DeleteTheConnectionUrl() {\n        return this.BASE_URL + '/api/delete_connection';\n    }\n    //////////////////////////////////////////////////////////////////////\n    //////////////////////API FOR FREESCHEMA QUERY //////////////////////\n    static FreeschemaQueryUrl() {\n        return this.BASE_URL + '/api/freeschema-query';\n    }\n}\nBaseUrl.BASE_URL = \"https://localhost:7053/\";\nBaseUrl.AI_URL = \"https://ai.freeschema.com\";\nBaseUrl.MQTT_URL = '192.168.1.249';\nBaseUrl.NODE_URL = \"http://localhost:5001\";\nBaseUrl.BASE_APPLICATION = \"\";\nBaseUrl.BASE_RANDOMIZER = 999;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { SettingData } from \"../DataStructures/SettingData\";\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\n/**\n * version of the database. If you want to change the database then you must update this version also.\n */\nvar version = 9;\n/**\n * This class will help us store the indexdb  reference in memory and not go back to index db.\n */\nexport class IndexDb {\n}\n/**\n *\n * @param databaseName not required actually. This is not used you can pass anything.\n * @returns a promise that either resolves or rejects opening the database.\n */\nexport function openDatabase(databaseName) {\n    return new Promise(function (resolve, reject) {\n        // if the indexdb is already initialized then you do not need to again initialize the db so you can get \n        // from memory.\n        if (IndexDb.db) {\n            resolve(IndexDb.db);\n        }\n        // the name of the database is passed here. We are statically passing the dbName with inputs from user\n        // the BASE_URL is the api that the framework calls\n        // the BASE_APPLICATION is a thing that differentiates an application from another so no two application create\n        // and use the same index db.\n        let dbName = BaseUrl.BASE_URL + \"_FreeSchema\" + BaseUrl.BASE_APPLICATION;\n        // open the database.\n        const request = indexedDB.open(dbName, version);\n        // in case that the database is not opened then log the error.\n        // then we delete the database that is already present with the name\n        // then again try to create the database, since this is a temporary database so it might not matter\n        // but this is a point that we might need to be careful about.\n        // we then reject the promise and report this problem.\n        request.onerror = (event) => {\n            console.error(\"Why didn't you allow my web app to use IndexedDB?!\", event);\n            indexedDB.deleteDatabase(dbName);\n            openDatabase(databaseName);\n            reject(event);\n        };\n        // in case that the database is allowed to be opened then we return the database object.\n        request.onsuccess = function (event) {\n            let target = event.target;\n            IndexDb.db = target.result;\n            resolve(IndexDb.db);\n        };\n        // in case that the version is upgraded then we delete all the old databases and then create a new database.\n        // version upgrade is a way which we can clean up old databases and its structures.\n        request.onupgradeneeded = (event) => {\n            let target = event.target;\n            let db = target.result;\n            let conceptDb = \"concept\";\n            let connectionDb = \"connection\";\n            let settings = \"settings\";\n            console.log(\"this is the version update for index\", version);\n            if (db.objectStoreNames.contains(conceptDb)) {\n                db.deleteObjectStore(conceptDb);\n            }\n            if (db.objectStoreNames.contains(connectionDb)) {\n                db.deleteObjectStore(connectionDb);\n            }\n            if (db.objectStoreNames.contains(settings)) {\n                db.deleteObjectStore(settings);\n            }\n            if (!db.objectStoreNames.contains(conceptDb)) { // if there's no database name\n                let objectStore = db.createObjectStore(conceptDb, { keyPath: 'id' }); // create it\n                objectStore.transaction.oncomplete = (event) => {\n                    // you can do something here after the db has been created.\n                };\n            }\n            if (!db.objectStoreNames.contains(connectionDb)) { // if there's no database name\n                let objectStore = db.createObjectStore(connectionDb, { keyPath: 'id' }); // create it\n                objectStore.transaction.oncomplete = (event) => {\n                    // you can do something here after the db has been created.\n                };\n            }\n            if (!db.objectStoreNames.contains(settings)) {\n                let objectStore = db.createObjectStore(settings, { keyPath: 'id' }); // create it\n                objectStore.transaction.oncomplete = (event) => {\n                    // you can do something here after the db has been created.\n                };\n            }\n            resolve(db);\n        };\n    });\n}\n/**\n *\n * @param databaseName name of the database that you want to store data to.\n * @param object any object that can be stored but keep in mind it must follow the convention that we created\n * while creating the datbase.\n * @returns a promise that if a store is successful then the obejct is returned else rejects with the event.\n */\nexport function storeToDatabase(databaseName, object) {\n    return new Promise(function (resolve, reject) {\n        console.log(\"this is storing to the database\", object);\n        openDatabase(databaseName).then((db) => {\n            if (object.id != 0) {\n                let transaction = db.transaction(databaseName, \"readwrite\");\n                let objStore = transaction.objectStore(databaseName);\n                const request = objStore.add(object);\n                request.onsuccess = (event) => {\n                    resolve(object);\n                };\n                request.onerror = (event) => {\n                    let errorObject = {\n                        \"status\": 400,\n                        \"ok\": false,\n                        \"message\": \"Cannot store to the database\" + databaseName,\n                        \"data\": event,\n                        \"body\": object\n                    };\n                    reject(errorObject);\n                };\n            }\n        }).catch((event) => {\n            let errorObject = {\n                \"status\": 400,\n                \"ok\": false,\n                \"message\": \"Cannot store to the database because you cannot open the database\",\n                \"data\": event\n            };\n            reject(errorObject);\n        });\n    });\n}\n/**\n  *\n  * @param databaseName name of the database\n  * @param object this is the object that you want to update\n  * @returns returns the object if it is updated successfully.\n  */\nexport function UpdateToDatabase(databaseName, object) {\n    return new Promise(function (resolve, reject) {\n        console.log(\"this is wriring to the database\", object);\n        openDatabase(databaseName).then((db) => {\n            let transaction = db.transaction(databaseName, \"readwrite\");\n            let objStore = transaction.objectStore(databaseName);\n            const request = objStore.put(object);\n            request.onsuccess = (event) => {\n                resolve(object);\n            };\n            request.onerror = (event) => {\n                let errorObject = {\n                    \"status\": 400,\n                    \"ok\": false,\n                    \"message\": \"Cannot Update to the database\" + databaseName,\n                    \"data\": event,\n                    \"body\": object\n                };\n                reject(errorObject);\n            };\n        }).catch((event) => {\n            let errorObject = {\n                \"status\": 400,\n                \"ok\": false,\n                \"message\": \"Cannot update to database because you cannot open the database\",\n                \"data\": event\n            };\n            reject(errorObject);\n        });\n    });\n}\n/**\n *\n * @returns This returns the last object from the database.\n */\nexport function GetLastSettingsFromDatabase() {\n    return new Promise(function (resolve, reject) {\n        let databaseName = \"settings\";\n        openDatabase(databaseName).then((db) => {\n            let transaction = db.transaction(databaseName, \"readwrite\");\n            let objectStore = transaction.objectStore(databaseName);\n            let allobjects = objectStore.getAll();\n            allobjects.onsuccess = () => {\n                let settingsData = new SettingData(false);\n                let settingsArray = allobjects.result;\n                for (let i = 0; i < settingsArray.length; i++) {\n                    settingsData = settingsArray[i];\n                    settingsData = settingsData;\n                }\n                resolve(settingsData);\n            };\n            allobjects.onerror = (event) => {\n                reject(event);\n            };\n        }).catch((event) => {\n            let errorObject = {\n                \"status\": 400,\n                \"ok\": false,\n                \"message\": \"Cannot get last object from database because you cannot open the database\",\n                \"data\": event\n            };\n            reject(errorObject);\n        });\n    });\n}\n/**\n *\n * @param object SettingData\n * @returns this will update the indexdb with the ai flag so that another time we do not have to pull\n *  ai data from the api.\n */\nexport function AiUpdateFlag(object) {\n    return new Promise(function (resolve, reject) {\n        let databaseName = \"settings\";\n        openDatabase(databaseName).then((db) => {\n            let transaction = db.transaction(databaseName, \"readwrite\");\n            let objStore = transaction.objectStore(databaseName);\n            const request = objStore.put(object);\n            request.onsuccess = (event) => {\n                resolve(object);\n            };\n            request.onerror = (event) => {\n                let errorObject = {\n                    \"status\": 400,\n                    \"ok\": false,\n                    \"message\": \"Cannot update AI flag\",\n                    \"data\": event,\n                    \"body\": object\n                };\n                reject(errorObject);\n            };\n        })\n            .catch((event) => {\n            let errorObject = {\n                \"status\": 400,\n                \"ok\": false,\n                \"message\": \"Cannot update AI flag because you cannot open the database\",\n                \"data\": event\n            };\n            reject(errorObject);\n        });\n    });\n}\n/**\n *  this function will return all the objects that are in the database\n * @param databaseName name of the database\n * @returns all the objects that are in the database\n */\nexport function getObjectsFromIndexDb(databaseName) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise(function (resolve, reject) {\n            openDatabase(databaseName).then((db) => {\n                let ConceptList = [];\n                let transaction = db.transaction(databaseName, \"readwrite\");\n                let objectStore = transaction.objectStore(databaseName);\n                let allobjects = objectStore.getAll();\n                allobjects.onsuccess = () => {\n                    const students = allobjects.result;\n                    for (let i = 0; i < students.length; i++) {\n                        ConceptList.push(students[i]);\n                    }\n                    resolve(ConceptList);\n                };\n            }).catch((event) => {\n                let errorObject = {\n                    \"status\": 400,\n                    \"ok\": false,\n                    \"message\": \"Cannot get objects from the database because you cannot open the database\",\n                    \"data\": event\n                };\n                reject(errorObject);\n            });\n        });\n    });\n}\n/**\n *\n * @param databaseName name of the database\n * @param id the id that we need to remove from the database (this is the index)\n * @returns an id if the deletion is successful and error with even in case it cannot.\n */\nexport function removeFromDatabase(databaseName, id) {\n    return new Promise(function (resolve, reject) {\n        openDatabase(databaseName).then((db) => {\n            let transaction = db.transaction(databaseName, \"readwrite\");\n            let objectStore = transaction.objectStore(databaseName);\n            const request = objectStore.delete(Number(id));\n            request.onsuccess = function (event) {\n                resolve(id);\n            };\n            request.onerror = (event) => {\n                let errorObject = {\n                    \"status\": 400,\n                    \"ok\": false,\n                    \"message\": \"Cannot remove from the database\" + databaseName,\n                    \"data\": event\n                };\n                reject(errorObject);\n            };\n        }).catch((event) => {\n            let errorObject = {\n                \"status\": 400,\n                \"ok\": false,\n                \"message\": \"Cannot remove from the database because you cannot open the database\",\n                \"data\": event,\n                \"body\": id\n            };\n            reject(errorObject);\n        });\n    });\n}\n","export class IdentifierFlags {\n}\nIdentifierFlags.isTypeLoaded = false;\nIdentifierFlags.isCharacterLoaded = false;\nIdentifierFlags.isDataLoaded = false;\nIdentifierFlags.isLocalDataLoaded = false;\nIdentifierFlags.isLocalCharacterLoaded = false;\nIdentifierFlags.isLocalTypeLoaded = false;\nIdentifierFlags.isConnectionLoaded = false;\nIdentifierFlags.isConnectionTypeLoaded = false;\nIdentifierFlags.isLocalConnectionLoaded = false;\n","export class Node {\n    constructor(key, value, leftNode, rightNode) {\n        this.variants = [];\n        this.height = 1;\n        this.key = key;\n        this.value = value;\n        this.leftNode = leftNode;\n        this.rightNode = rightNode;\n        this.currentNode = null;\n    }\n    addCurrentNode(passedNode, node) {\n        if (node == null) {\n            node = passedNode;\n            return node;\n        }\n        if (passedNode.value.typeId != node.value.typeId) {\n            node.currentNode = this.addCurrentNode(passedNode, node.currentNode);\n        }\n        return node;\n    }\n    addCurrentNodeType(passedNode, node) {\n        if (node == null) {\n            node = passedNode;\n            return node;\n        }\n        let contains = false;\n        for (let i = 0; i < node.variants.length; i++) {\n            if (node.variants[i].value.id == passedNode.value.id) {\n                contains = true;\n            }\n        }\n        if (!contains) {\n            node.variants.push(passedNode);\n        }\n        //node.currentNode = this.addCurrentNode(passedNode, node.currentNode);\n        return node;\n    }\n    addNode(passedNode, node, height) {\n        if (node == null) {\n            node = passedNode;\n            return node;\n        }\n        let LeftNode = node.leftNode;\n        let RightNode = node.rightNode;\n        if (node.key > passedNode.key) {\n            node.leftNode = this.addNode(passedNode, LeftNode, height);\n        }\n        else if (node.key < passedNode.key) {\n            node.rightNode = this.addNode(passedNode, RightNode, height);\n        }\n        // else if (node.key == passedNode.key && node.key != \"\"){\n        //     node.currentNode = passedNode;\n        // }\n        else {\n            return node;\n        }\n        node.height = 1 + Math.max(this.getHeight(node.leftNode), this.getHeight(node.rightNode));\n        let balancingFactor = this.getBalanceFactor(node);\n        if (balancingFactor > 1) {\n            if (node.leftNode) {\n                if (passedNode.key < node.leftNode.key) {\n                    return this.rightRotate(node);\n                }\n                else if (passedNode.key > node.leftNode.key) {\n                    node.leftNode = this.leftRotate(node.leftNode);\n                    return this.rightRotate(node);\n                }\n            }\n        }\n        if (balancingFactor < -1) {\n            if (node.rightNode) {\n                if (passedNode.key > node.rightNode.key) {\n                    return this.leftRotate(node);\n                }\n                else if (passedNode.key < node.rightNode.key) {\n                    node.rightNode = this.rightRotate(node.rightNode);\n                    return this.leftRotate(node);\n                }\n            }\n        }\n        return node;\n    }\n    checkIfIdsInNode(node, ids, connectionArray, remainingIds) {\n        if (node) {\n            if (ids.includes(node.key)) {\n                connectionArray.push(node.value);\n                // remainingIds[node.key] = true;\n                let index = ids.indexOf(node.key);\n                ids.splice(index, 1);\n            }\n            if (node.leftNode) {\n                this.checkIfIdsInNode(node.leftNode, ids, connectionArray, remainingIds);\n            }\n            if (node.rightNode) {\n                this.checkIfIdsInNode(node.rightNode, ids, connectionArray, remainingIds);\n            }\n        }\n    }\n    addCharacterNode(passedNode, node, height) {\n        let debugFlag = false;\n        if (passedNode.value.characterValue != \"\") {\n            // if(passedNode.value.characterValue == \"Default\"){\n            //     console.log(\"default here\");\n            //     debugFlag = true;\n            // }\n            if (node == null) {\n                if (debugFlag) {\n                    console.log(\"equal here\", node);\n                }\n                node = passedNode;\n                return node;\n            }\n            // if (node.key == passedNode.key && node.key != \"\" ){\n            //     if(passedNode.value.characterValue == \"Default\"){\n            //         console.log(\"equal\");\n            //     }\n            //     node.currentNode = passedNode;\n            //     return node;\n            // }\n            let LeftNode = node.leftNode;\n            let RightNode = node.rightNode;\n            if (node.key > passedNode.key) {\n                if (debugFlag) {\n                    console.log(\"left  here\", node);\n                }\n                node.leftNode = this.addCharacterNode(passedNode, LeftNode, height);\n            }\n            else if (node.key < passedNode.key) {\n                if (debugFlag) {\n                    console.log(\"right here\", node, RightNode);\n                }\n                node.rightNode = this.addCharacterNode(passedNode, RightNode, height);\n            }\n            // else if (node.key == passedNode.key && node.key != \"\"){\n            //     node.currentNode = passedNode;\n            // }\n            else {\n                if (debugFlag) {\n                    console.log(\"else here\", node, passedNode);\n                }\n                if (node.key == passedNode.key && node.key != \"\" && node.value.id != passedNode.value.id) {\n                    // node.currentNode = this.addCurrentNode(passedNode, node.currentNode);\n                    node.addCurrentNodeType(passedNode, node);\n                }\n                return node;\n            }\n            node.height = 1 + Math.max(this.getHeight(node.leftNode), this.getHeight(node.rightNode));\n            if (debugFlag) {\n                console.log(\"height here\", node.height);\n            }\n            let balancingFactor = this.getBalanceFactor(node);\n            if (debugFlag) {\n                console.log(\"balancingFactor here\", balancingFactor);\n            }\n            if (balancingFactor > 1) {\n                if (node.leftNode) {\n                    if (passedNode.key < node.leftNode.key) {\n                        let returner = this.rightRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here 1 \", returner);\n                        }\n                        return returner;\n                    }\n                    else if (passedNode.key > node.leftNode.key) {\n                        node.leftNode = this.leftRotate(node.leftNode);\n                        let returner = this.rightRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here 2 \", returner);\n                        }\n                        return returner;\n                    }\n                }\n            }\n            if (balancingFactor < -1) {\n                if (node.rightNode) {\n                    if (passedNode.key > node.rightNode.key) {\n                        let returner = this.leftRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here 3 \", returner);\n                        }\n                        return returner;\n                    }\n                    else if (passedNode.key < node.rightNode.key) {\n                        node.rightNode = this.rightRotate(node.rightNode);\n                        let returner = this.leftRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here4 \", returner, node);\n                        }\n                        return returner;\n                    }\n                }\n            }\n        }\n        else {\n            if (debugFlag) {\n                console.log(\"what here\", node);\n            }\n        }\n        if (debugFlag) {\n            console.log(\"returning here 6\", node);\n        }\n        return node;\n    }\n    addTypeNode(passedNode, node, height) {\n        let debugFlag = false;\n        if (passedNode.value.typeId != 0) {\n            // if(passedNode.value.characterValue == \"Default\"){\n            //     console.log(\"default here\");\n            //     debugFlag = true;\n            // }\n            if (node == null) {\n                if (debugFlag) {\n                    console.log(\"equal here\", node);\n                }\n                console.log(\"adding the type node to the tree\", passedNode);\n                node = passedNode;\n                return node;\n            }\n            let LeftNode = node.leftNode;\n            let RightNode = node.rightNode;\n            if (node.key > passedNode.key) {\n                if (debugFlag) {\n                    console.log(\"left  here\", node);\n                }\n                node.leftNode = this.addTypeNode(passedNode, LeftNode, height);\n            }\n            else if (node.key < passedNode.key) {\n                if (debugFlag) {\n                    console.log(\"right here\", node, RightNode);\n                }\n                node.rightNode = this.addTypeNode(passedNode, RightNode, height);\n            }\n            else {\n                if (debugFlag) {\n                    console.log(\"else here\", node, passedNode);\n                }\n                console.log(\"adding the type node to the tree down\", passedNode);\n                if (node.key == passedNode.key && node.key != 0 && node.value.id != passedNode.value.id) {\n                    node.addCurrentNodeType(passedNode, node);\n                }\n                console.log(\"adding the type node to the tree last\", node);\n                return node;\n            }\n            node.height = 1 + Math.max(this.getHeight(node.leftNode), this.getHeight(node.rightNode));\n            if (debugFlag) {\n                console.log(\"height here\", node.height);\n            }\n            let balancingFactor = this.getBalanceFactor(node);\n            if (debugFlag) {\n                console.log(\"balancingFactor here\", balancingFactor);\n            }\n            if (balancingFactor > 1) {\n                if (node.leftNode) {\n                    if (passedNode.key < node.leftNode.key) {\n                        let returner = this.rightRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here 1 \", returner);\n                        }\n                        return returner;\n                    }\n                    else if (passedNode.key > node.leftNode.key) {\n                        node.leftNode = this.leftRotate(node.leftNode);\n                        let returner = this.rightRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here 2 \", returner);\n                        }\n                        return returner;\n                    }\n                }\n            }\n            if (balancingFactor < -1) {\n                if (node.rightNode) {\n                    if (passedNode.key > node.rightNode.key) {\n                        let returner = this.leftRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here 3 \", returner);\n                        }\n                        return returner;\n                    }\n                    else if (passedNode.key < node.rightNode.key) {\n                        node.rightNode = this.rightRotate(node.rightNode);\n                        let returner = this.leftRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here4 \", returner, node);\n                        }\n                        return returner;\n                    }\n                }\n            }\n        }\n        else {\n            if (debugFlag) {\n                console.log(\"what here\", node);\n            }\n        }\n        if (debugFlag) {\n            console.log(\"returning here 6\", node);\n        }\n        return node;\n    }\n    rightRotate(y) {\n        if (y) {\n            let x = y.leftNode;\n            if (x) {\n                let T2 = x.rightNode;\n                y.leftNode = T2;\n                x.rightNode = y;\n                y.height = Math.max(this.getHeight(y.leftNode), this.getHeight(y.rightNode)) + 1;\n                x.height = Math.max(this.getHeight(x.leftNode), this.getHeight(x.rightNode)) + 1;\n                return x;\n            }\n            // return x;\n        }\n        return y;\n    }\n    leftRotate(x) {\n        if (x) {\n            let y = x.rightNode;\n            if (y) {\n                let T2 = y.leftNode;\n                y.leftNode = x;\n                x.rightNode = T2;\n                x.height = Math.max(this.getHeight(x.leftNode), this.getHeight(x.rightNode) + 1);\n                y.height = Math.max(this.getHeight(y.leftNode), this.getHeight(x.rightNode) + 1);\n                return y;\n            }\n            //return y;\n        }\n        return x;\n    }\n    getHeight(node) {\n        if (node) {\n            return node.height;\n        }\n        return 0;\n    }\n    getBalanceFactor(N) {\n        if (N == null) {\n            return 0;\n        }\n        return this.getHeight(N.leftNode) - this.getHeight(N.rightNode);\n    }\n    getFromNode(id, node) {\n        if (node) {\n            if (id == node.key) {\n                // if(node.value.count){\n                //     node.value.count++ ;\n                // }\n                // else{\n                //     node.value.count = 1;\n                // }\n                return node;\n            }\n            else if (id < node.key) {\n                return this.getFromNode(id, node.leftNode);\n            }\n            else if (id > node.key) {\n                return this.getFromNode(id, node.rightNode);\n            }\n            return node;\n        }\n        return node;\n    }\n    getCharacterFromNode(value, node) {\n        if (node) {\n            if (value == node.key) {\n                return node;\n            }\n            else if (value < node.key) {\n                return this.getCharacterFromNode(value, node.leftNode);\n            }\n            else if (value > node.key) {\n                return this.getCharacterFromNode(value, node.rightNode);\n            }\n            return node;\n        }\n        return node;\n    }\n    getCharacterFromNodeUpdated(value, node) {\n        var _a;\n        if (node) {\n            if (value == node.key || ((_a = node.value) === null || _a === void 0 ? void 0 : _a.typeId) == 51) {\n                return node;\n            }\n            else if (value < node.key) {\n                return this.getCharacterFromNode(value, node.leftNode);\n            }\n            else if (value > node.key) {\n                return this.getCharacterFromNode(value, node.rightNode);\n            }\n            return node;\n        }\n        return node;\n    }\n    getFromNodeWithCharacterAndType(value, typeId, node) {\n        value = `${value}`;\n        if (node) {\n            if (value == node.key) {\n                if (value == node.value.characterValue && typeId == node.value.typeId) {\n                    return node;\n                }\n                else {\n                    for (let i = 0; i < node.variants.length; i++) {\n                        if (node.variants[i].value.typeId == typeId) {\n                            return node.variants[i];\n                        }\n                    }\n                    // return this.getFromNodeWithCharacterAndType(value, typeId, node.currentNode);\n                }\n            }\n            else if (value < node.key) {\n                return this.getFromNodeWithCharacterAndType(value, typeId, node.leftNode);\n            }\n            else if (value > node.key) {\n                return this.getFromNodeWithCharacterAndType(value, typeId, node.rightNode);\n            }\n            return null;\n        }\n        return node;\n    }\n    getFromNodeWithCharacterAndCategory(value, categoryId, node) {\n        value = `${value}`;\n        if (node) {\n            if (value == node.key) {\n                if (value == node.value.characterValue && categoryId == node.value.categoryId) {\n                    return node;\n                }\n                else {\n                    for (let i = 0; i < node.variants.length; i++) {\n                        if (node.variants[i].value.categoryId == categoryId) {\n                            return node.variants[i];\n                        }\n                    }\n                    // return this.getFromNodeWithCharacterAndType(value, typeId, node.currentNode);\n                }\n            }\n            else if (value < node.key) {\n                return this.getFromNodeWithCharacterAndCategory(value, categoryId, node.leftNode);\n            }\n            else if (value > node.key) {\n                return this.getFromNodeWithCharacterAndCategory(value, categoryId, node.rightNode);\n            }\n            return null;\n        }\n        return node;\n    }\n    removeNode(passedNode, id) {\n        if (passedNode == null) {\n            return passedNode;\n        }\n        if (passedNode.key > id) {\n            passedNode.leftNode = this.removeNode(passedNode.leftNode, id);\n            return passedNode;\n        }\n        else if (passedNode.key < id) {\n            passedNode.rightNode = this.removeNode(passedNode.rightNode, id);\n            return passedNode;\n        }\n        // if(passedNode.variants.length > 0){\n        //     if(passedNode.value.id == id ){\n        //     }\n        //     var newNode = passedNode.variants[0];\n        //     if(newNode){\n        //         passedNode.value = newNode.value;\n        //         passedNode.key = newNode.key;\n        //         passedNode.currentNode = newNode.currentNode;\n        //         return passedNode;\n        //     }\n        // }\n        if (passedNode.leftNode == null) {\n            let temp = passedNode.rightNode;\n            passedNode = null;\n            return temp;\n        }\n        else if (passedNode.rightNode == null) {\n            let temp = passedNode.leftNode;\n            passedNode = null;\n            return temp;\n        }\n        else {\n            // passing the rightNode to the inOrderSuccessor gives the immediate successor of the node\n            let immediateSuccessor = this.inOrderSuccessor(passedNode.rightNode);\n            passedNode.value = immediateSuccessor.value;\n            passedNode.key = immediateSuccessor.key;\n            passedNode.variants = immediateSuccessor.variants;\n            passedNode.currentNode = immediateSuccessor.currentNode;\n            passedNode.rightNode = this.removeNode(passedNode.rightNode, immediateSuccessor.key);\n            return passedNode;\n        }\n    }\n    removeNodeWithVariants(passedNode, typeIdentifier, conceptId) {\n        if (passedNode == null) {\n            return passedNode;\n        }\n        if (passedNode.key > typeIdentifier) {\n            passedNode.leftNode = this.removeNodeWithVariants(passedNode.leftNode, typeIdentifier, conceptId);\n            return passedNode;\n        }\n        else if (passedNode.key < typeIdentifier) {\n            passedNode.rightNode = this.removeNodeWithVariants(passedNode.rightNode, typeIdentifier, conceptId);\n            return passedNode;\n        }\n        if (passedNode.variants.length > 0) {\n            //condition if the main node is equal to the value\n            if (passedNode.value.id == conceptId) {\n                let newNode = passedNode.variants[0];\n                if (newNode) {\n                    passedNode.value = newNode.value;\n                    passedNode.key = newNode.key;\n                    passedNode.currentNode = newNode.currentNode;\n                    passedNode.variants.splice(0, 1);\n                    return passedNode;\n                }\n            }\n            else {\n                // in the condition that the main node is not equal to the checking value \n                for (let i = 0; i < passedNode.variants.length; i++) {\n                    if (conceptId == passedNode.variants[i].value.id) {\n                        passedNode.variants.splice(i, 1);\n                        return passedNode;\n                    }\n                }\n            }\n        }\n        if (passedNode.leftNode == null) {\n            let temp = passedNode.rightNode;\n            passedNode = null;\n            return temp;\n        }\n        else if (passedNode.rightNode == null) {\n            let temp = passedNode.leftNode;\n            passedNode = null;\n            return temp;\n        }\n        else {\n            // passing the rightNode to the inOrderSuccessor gives the immediate successor of the node\n            let immediateSuccessor = this.inOrderSuccessor(passedNode.rightNode);\n            passedNode.value = immediateSuccessor.value;\n            passedNode.key = immediateSuccessor.key;\n            passedNode.variants = immediateSuccessor.variants;\n            passedNode.currentNode = immediateSuccessor.currentNode;\n            passedNode.rightNode = this.removeNodeWithVariants(passedNode.rightNode, immediateSuccessor.key, conceptId);\n            return passedNode;\n        }\n    }\n    countNodeBelow(root) {\n        if (root == null) {\n            return 0;\n        }\n        //recursive call to left child and right child and\n        // add the result of these with 1 ( 1 for counting the root)\n        return 1 + this.countNodeBelow(root.leftNode) + this.countNodeBelow(root.rightNode);\n    }\n    inOrderSuccessor(root) {\n        while (root.leftNode != null) {\n            root = root.leftNode;\n        }\n        return root;\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { IdentifierFlags } from \"./IdentifierFlags\";\nimport { Node } from \"./Node\";\nexport class BinaryCharacterTree {\n    static waitForDataToLoad() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                this.checkFlag(resolve);\n                setTimeout(() => {\n                    reject(\"not\");\n                }, 25000);\n            });\n        });\n    }\n    static checkFlag(resolve) {\n        if (IdentifierFlags.isCharacterLoaded) {\n            return resolve(\"done\");\n        }\n        else {\n            setTimeout(BinaryCharacterTree.checkFlag, 1000, resolve);\n        }\n    }\n    ;\n    static addNodeToTree(node) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.characterRoot == null) {\n                this.characterRoot = node;\n                return this.characterRoot;\n            }\n            else {\n                this.characterRoot = this.characterRoot.addCharacterNode(node, this.characterRoot, this.characterRoot.height);\n            }\n            return this.characterRoot;\n        });\n    }\n    static removeNodeByCharacter(character, id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.characterRoot) {\n                this.characterRoot.removeNodeWithVariants(this.characterRoot, character, id);\n            }\n        });\n    }\n    static countNumberOfNodes() {\n        if (this.characterRoot) {\n            return this.characterRoot.countNodeBelow(this.characterRoot);\n        }\n        return 0;\n    }\n    static addConceptToTree(concept) {\n        if (concept.characterValue != \"\") {\n            var node = new Node(concept.characterValue, concept, null, null);\n            this.addNodeToTree(node);\n        }\n    }\n    static getNodeFromTree(value) {\n        if (this.characterRoot) {\n            var Node = this.characterRoot.getCharacterFromNode(value, this.characterRoot);\n            return Node;\n        }\n        return this.characterRoot;\n    }\n    static getNodeFromTreeUpdated(value) {\n        if (this.characterRoot) {\n            var Node = this.characterRoot.getCharacterFromNode(value, this.characterRoot);\n            return Node;\n        }\n        return this.characterRoot;\n    }\n    static getCharacterAndTypeFromTree(value, typeId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // try{\n            //     var data = await this.waitForDataToLoad();\n            // }\n            // catch(exception){\n            //     return null;\n            // }\n            if (this.characterRoot) {\n                var Node = this.characterRoot.getFromNodeWithCharacterAndType(value, typeId, this.characterRoot);\n                return Node;\n            }\n            return this.characterRoot;\n        });\n    }\n    static getCharacterAndCategoryFromTree(value, categoryId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // try{\n            //     var data = await this.waitForDataToLoad();\n            // }\n            // catch(exception){\n            //     return null;\n            // }\n            if (this.characterRoot) {\n                var Node = this.characterRoot.getFromNodeWithCharacterAndCategory(value, categoryId, this.characterRoot);\n                return Node;\n            }\n            return this.characterRoot;\n        });\n    }\n    static removeConceptCharacter(id) {\n        if (this.characterRoot) {\n            this.characterRoot = this.characterRoot.removeNode(this.characterRoot, id);\n        }\n    }\n}\nBinaryCharacterTree.characterRoot = null;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BinaryCharacterTree } from \"./BinaryCharacterTree\";\nimport { Node } from \"./Node\";\nimport { IdentifierFlags } from \"./IdentifierFlags\";\nexport class BinaryTree {\n    static addNodeToTree(node) {\n        if (this.root == null) {\n            this.root = node;\n            return this.root;\n        }\n        else {\n            this.root = this.root.addNode(node, this.root, this.root.height);\n        }\n    }\n    static waitForDataToLoad() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                this.checkFlag(resolve);\n                setTimeout(() => {\n                    reject(\"not\");\n                }, 25000);\n            });\n        });\n    }\n    static checkFlag(resolve) {\n        if (IdentifierFlags.isDataLoaded) {\n            return resolve(\"done\");\n        }\n        else {\n            setTimeout(BinaryTree.checkFlag, 1000, resolve);\n        }\n    }\n    ;\n    static addConceptToTree(concept) {\n        let node = new Node(concept.id, concept, null, null);\n        let characterNode = new Node(concept.characterValue, concept, null, null);\n        BinaryCharacterTree.addNodeToTree(characterNode);\n        this.addNodeToTree(node);\n    }\n    static getNodeFromTree(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.root) {\n                let Node = this.root.getFromNode(id, this.root);\n                return Node;\n            }\n            return null;\n        });\n    }\n    static removeNodeFromTree(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.root) {\n                let event = new Event(`${id}`);\n                console.log(\"this is the fired event after delete\", event);\n                dispatchEvent(event);\n                this.root = this.root.removeNode(this.root, id);\n            }\n        });\n    }\n    static getConceptListFromIds(ids, connectionArray, remainingIds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.root) {\n                this.root.checkIfIdsInNode(this.root, ids, connectionArray, remainingIds);\n            }\n        });\n    }\n    static countNumberOfNodes() {\n        if (this.root) {\n            return this.root.countNodeBelow(this.root);\n        }\n        return 0;\n    }\n}\nBinaryTree.root = null;\n","import { BaseUrl } from \"../app\";\nexport class Concept {\n    constructor(id, userId, typeId, categoryId, referentId, characterValue, accessId, isNew = false, entryTimeStamp, updatedTimeStamp, typeCharacter) {\n        this.count = 0;\n        this.typeCharacter = \"\";\n        this.isComposition = false;\n        this.isTemp = false;\n        this.isSynced = false;\n        this.applicationId = BaseUrl.BASE_RANDOMIZER;\n        this.x = 0;\n        this.y = 0;\n        this.id = id;\n        this.userId = userId;\n        this.typeId = typeId;\n        this.ghostId = id;\n        this.categoryId = categoryId;\n        this.referentId = referentId;\n        this.characterValue = `${characterValue}`;\n        this.accessId = accessId;\n        this.typeCharacter = typeCharacter;\n        this.type = null;\n        this.isNew = isNew;\n        this.entryTimeStamp = entryTimeStamp;\n        this.updatedTimeStamp = updatedTimeStamp;\n        // ConceptsData.AddConcept(this);\n    }\n    getType() {\n        console.log(this.typeId);\n    }\n}\n","import { Concept } from \"../DataStructures/Concept\";\nexport function CreateDefaultConcept() {\n    let created_on = new Date();\n    let updated_on = new Date();\n    let concept = new Concept(0, 0, 0, 0, 0, \"0\", 0, false, created_on, updated_on, \"0\");\n    return concept;\n}\n","export class TypeNode {\n    constructor(key, value) {\n        this.value = [];\n        this.height = 1;\n        this.key = key;\n        this.value.push(value);\n        this.leftNode = null;\n        this.rightNode = null;\n        this.currentNode = null;\n    }\n    addType(node, key, value) {\n        var _a, _b, _c, _d;\n        if (node == null) {\n            return new TypeNode(key, value);\n        }\n        if (key < node.key) {\n            node.leftNode = this.addType(node.leftNode, key, value);\n        }\n        else if (key > node.key) {\n            node.rightNode = this.addType(node.rightNode, key, value);\n        }\n        else {\n            // If key already exists, insert unique value into the set\n            node.value.push(value);\n            return node;\n        }\n        // Step 2: Update height of this ancestor node\n        node.height = Math.max(this.getHeight(node.leftNode), this.getHeight(node.rightNode)) + 1;\n        // Step 3: Get the balance factor to check if this node became unbalanced\n        const balance = this.getBalanceFactor(node);\n        // Step 4: If the node is unbalanced, perform rotations\n        // Left Left Case (Right Rotation)\n        if (balance > 1 && key < ((_a = node.leftNode) === null || _a === void 0 ? void 0 : _a.key)) {\n            return this.rightRotate(node);\n        }\n        // Right Right Case (Left Rotation)\n        if (balance < -1 && key > ((_b = node.rightNode) === null || _b === void 0 ? void 0 : _b.key)) {\n            return this.leftRotate(node);\n        }\n        // Left Right Case (Left rotation, then right rotation)\n        if (balance > 1 && key > ((_c = node.leftNode) === null || _c === void 0 ? void 0 : _c.key)) {\n            node.leftNode = this.leftRotate(node.leftNode);\n            return this.rightRotate(node);\n        }\n        // Right Left Case (Right rotation, then left rotation)\n        if (balance < -1 && key < ((_d = node.rightNode) === null || _d === void 0 ? void 0 : _d.key)) {\n            node.rightNode = this.rightRotate(node.rightNode);\n            return this.leftRotate(node);\n        }\n        return node;\n    }\n    rightRotate(y) {\n        if (y) {\n            let x = y.leftNode;\n            if (x) {\n                let T2 = x.rightNode;\n                y.leftNode = T2;\n                x.rightNode = y;\n                y.height = Math.max(this.getHeight(y.leftNode), this.getHeight(y.rightNode)) + 1;\n                x.height = Math.max(this.getHeight(x.leftNode), this.getHeight(x.rightNode)) + 1;\n                return x;\n            }\n            // return x;\n        }\n        return y;\n    }\n    leftRotate(x) {\n        if (x) {\n            let y = x.rightNode;\n            if (y) {\n                let T2 = y.leftNode;\n                y.leftNode = x;\n                x.rightNode = T2;\n                x.height = Math.max(this.getHeight(x.leftNode), this.getHeight(x.rightNode) + 1);\n                y.height = Math.max(this.getHeight(y.leftNode), this.getHeight(x.rightNode) + 1);\n                return y;\n            }\n            //return y;\n        }\n        return x;\n    }\n    getHeight(node) {\n        if (node) {\n            return node.height;\n        }\n        return 0;\n    }\n    getBalanceFactor(N) {\n        if (N == null) {\n            return 0;\n        }\n        return this.getHeight(N.leftNode) - this.getHeight(N.rightNode);\n    }\n    getFromNode(id, node) {\n        if (node) {\n            if (id == node.key) {\n                // if(node.value.count){\n                //     node.value.count++ ;\n                // }\n                // else{\n                //     node.value.count = 1;\n                // }\n                return node;\n            }\n            else if (id < node.key) {\n                return this.getFromNode(id, node.leftNode);\n            }\n            else if (id > node.key) {\n                return this.getFromNode(id, node.rightNode);\n            }\n            return node;\n        }\n        return node;\n    }\n    removeNodeWithVariants(passedNode, key, conceptId) {\n        if (passedNode == null) {\n            return passedNode;\n        }\n        if (passedNode.key > key) {\n            passedNode.leftNode = this.removeNodeWithVariants(passedNode.leftNode, key, conceptId);\n            return passedNode;\n        }\n        else if (passedNode.key < key) {\n            passedNode.rightNode = this.removeNodeWithVariants(passedNode.rightNode, key, conceptId);\n            return passedNode;\n        }\n        if (passedNode.value.length > 0) {\n            // in the condition that the main node is not equal to the checking value \n            for (let i = 0; i < passedNode.value.length; i++) {\n                if (conceptId == passedNode.value[i]) {\n                    passedNode.value.splice(i, 1);\n                    return passedNode;\n                }\n            }\n        }\n        if (passedNode.leftNode == null) {\n            let temp = passedNode.rightNode;\n            passedNode = null;\n            return temp;\n        }\n        else if (passedNode.rightNode == null) {\n            let temp = passedNode.leftNode;\n            passedNode = null;\n            return temp;\n        }\n        else {\n            // passing the rightNode to the inOrderSuccessor gives the immediate successor of the node\n            let immediateSuccessor = this.inOrderSuccessor(passedNode.rightNode);\n            passedNode.value = immediateSuccessor.value;\n            passedNode.key = immediateSuccessor.key;\n            passedNode.currentNode = immediateSuccessor.currentNode;\n            passedNode.rightNode = this.removeNodeWithVariants(passedNode.rightNode, immediateSuccessor.key, conceptId);\n            return passedNode;\n        }\n    }\n    countNodeBelow(root) {\n        if (root == null) {\n            return 0;\n        }\n        //recursive call to left child and right child and\n        // add the result of these with 1 ( 1 for counting the root)\n        return 1 + this.countNodeBelow(root.leftNode) + this.countNodeBelow(root.rightNode);\n    }\n    inOrderSuccessor(root) {\n        while (root.leftNode != null) {\n            root = root.leftNode;\n        }\n        return root;\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetTheConcept } from \"../app\";\nimport { CreateDefaultConcept } from \"../Services/CreateDefaultConcept\";\nimport { IdentifierFlags } from \"./IdentifierFlags\";\nimport { TypeNode } from \"./TypeNode\";\nexport class BinaryTypeTree {\n    // old method having concept as the value.\n    // static async addNodeToTree(node:Node){\n    //     if(this.typeRoot == null){\n    //         this.typeRoot = node;\n    //         return this.typeRoot;\n    //     }\n    //     else{\n    //          let event = new CustomEvent(`${node.value.typeId}`, {detail: node.value.id});\n    //         // console.log(\"this is the fired event\", event);\n    //          dispatchEvent(event);\n    //         this.typeRoot = this.typeRoot.addTypeNode(node,this.typeRoot,this.typeRoot.height);\n    //     }\n    //     return this.typeRoot;\n    // }\n    // new method with just ids \n    static addType(node) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.root == null) {\n                this.root = node;\n                return this.root;\n            }\n            else {\n                let event = new CustomEvent(`${node.key}`, { detail: node.value[0] });\n                // console.log(\"this is the fired event\", event);\n                dispatchEvent(event);\n                // console.log(\"this is the fired event\", event);\n                this.root = this.root.addType(this.root, node.key, node.value[0]);\n            }\n            return this.root;\n        });\n    }\n    static addConceptToTree(concept) {\n        if (concept.typeId != 0) {\n            /// old type \n            // var node: Node = new Node(concept.typeId, concept, null, null);\n            // this.addNodeToTree(node);\n            // new functionality\n            let typeNode = new TypeNode(concept.typeId, concept.id);\n            this.addType(typeNode);\n        }\n    }\n    static removeTypeConcept(typeId, id) {\n        // old mehtod\n        // if(this.typeRoot){\n        //     this.typeRoot = this.typeRoot.removeNodeWithVariants(this.typeRoot,typeId,id);\n        // }\n        // new method\n        if (this.root) {\n            this.root = this.root.removeNodeWithVariants(this.root, typeId, id);\n        }\n    }\n    // static getNodeFromTree(id:number){\n    //     // old method\n    //     if(this.typeRoot){\n    //         var Node = this.typeRoot.getFromNode(id, this.typeRoot);\n    //         return Node;\n    //     }\n    //     return this.typeRoot;\n    // }\n    static getNodeFromTreeNew(id) {\n        // new method\n        if (this.root) {\n            let node = this.root.getFromNode(id, this.root);\n            return node;\n        }\n        return this.root;\n    }\n    /// old method\n    // static getTypeVariantsFromTree(typeId:number){\n    //         let Node = this.getNodeFromTree(typeId);\n    //         var concepts : Concept[] = [];\n    //         if(Node){\n    //             concepts.push(Node?.value);\n    //             for(let i=0; i< Node.variants.length; i++){\n    //                 concepts.push(Node.variants[i].value);\n    //             }\n    //         return concepts;\n    //     }\n    // }\n    //new method\n    static getTypeVariantsFromTreeNew(typeId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let node = this.getNodeFromTreeNew(typeId);\n            let conceptIds = [];\n            let concepts = [];\n            if (node) {\n                conceptIds = node.value;\n                for (let i = 0; i < conceptIds.length; i++) {\n                    let alreadyExist = false;\n                    for (let j = 0; j < concepts.length; j++) {\n                        if (concepts[j].id == conceptIds[i]) {\n                            alreadyExist = true;\n                        }\n                    }\n                    if (!alreadyExist) {\n                        concepts.push(yield GetTheConcept(conceptIds[i]));\n                    }\n                }\n            }\n            return concepts;\n        });\n    }\n    static waitForDataToLoad() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                this.checkFlag(resolve);\n                setTimeout(() => {\n                    reject(\"not\");\n                }, 25000);\n            });\n        });\n    }\n    static checkFlag(resolve) {\n        if (IdentifierFlags.isTypeLoaded) {\n            return resolve(\"done\");\n        }\n        else {\n            setTimeout(BinaryTypeTree.checkFlag, 1000, resolve);\n        }\n    }\n    ;\n    // static async getTypeVariantsFromTreeWithUserId(typeId:number, userId:number){\n    //     var concepts : Concept[] = [];\n    //         var Node = this.getNodeFromTree(typeId);\n    //         if(Node){\n    //             console.log(\"this is the tree to find\", Node.value);\n    //             if(Node.value.userId == userId ){\n    //                 concepts.push(Node?.value);\n    //             }\n    //             for(let i=0; i< Node.variants.length; i++){\n    //                 if(Node.variants[i].value.userId == userId ){\n    //                     var isPresent = false;\n    //                     for(let j=0; j<concepts.length;j++){\n    //                         if(concepts[j].id == Node.variants[i].value.id){\n    //                             isPresent = true;\n    //                         }\n    //                     }\n    //                     if(!isPresent){\n    //                         concepts.push(Node.variants[i].value);\n    //                     }\n    //                 }\n    //             }\n    //         }\n    //     return concepts;\n    // }\n    // new method\n    static getTypeVariantsFromTreeWithUserIdNew(typeId, userId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let concepts = [];\n            let allConcepts = yield this.getTypeVariantsFromTreeNew(typeId);\n            console.log(\"these are all the concepts\", allConcepts);\n            for (let i = 0; i < allConcepts.length; i++) {\n                if (allConcepts[i].userId == userId) {\n                    concepts.push(allConcepts[i]);\n                }\n            }\n            return concepts;\n        });\n    }\n    // static async getTypeVariantsWithCharacterValue( characterValue:string,typeId:number,){\n    //     let concept = CreateDefaultConcept();\n    //         var Node = this.getNodeFromTree(typeId);\n    //         if(Node){\n    //             if(Node.value.characterValue == characterValue ){\n    //                 concept = Node.value;\n    //             }\n    //             for(let i=0; i< Node.variants.length; i++){\n    //                 if(Node.variants[i].value.characterValue == characterValue ){\n    //                     concept = Node.variants[i].value;\n    //                 }\n    //             }\n    //         }\n    //     return concept;\n    // }\n    //new method\n    static getTypeVariantsWithCharacterValueNew(characterValue, typeId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let allConcepts = yield this.getTypeVariantsFromTreeNew(typeId);\n            console.log(\"this is all the concepts for character\", allConcepts);\n            let concept = CreateDefaultConcept();\n            for (let i = 0; i < allConcepts.length; i++) {\n                if (allConcepts[i].characterValue == characterValue) {\n                    concept = allConcepts[i];\n                }\n            }\n            return concept;\n        });\n    }\n    static countNumberOfNodes() {\n        if (this.typeRoot) {\n            return this.typeRoot.countNodeBelow(this.typeRoot);\n        }\n        return 0;\n    }\n}\nBinaryTypeTree.typeRoot = null;\nBinaryTypeTree.root = null;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { removeFromDatabase, UpdateToDatabase } from \"../Database/indexeddb\";\nimport { BinaryTree } from \"./BinaryTree\";\nimport { BinaryCharacterTree } from \"./BinaryCharacterTree\";\nimport { BinaryTypeTree } from \"./BinaryTypeTree\";\nimport { CreateDefaultConcept } from \"../Services/CreateDefaultConcept\";\nexport class ConceptsData {\n    constructor() {\n        this.name = \"conceptsArray\";\n    }\n    static CheckContains(concept) {\n        var contains = false;\n        for (var i = 0; i < this.conceptsArray.length; i++) {\n            if (this.conceptsArray[i].id == concept.id) {\n                contains = true;\n            }\n        }\n        return contains;\n    }\n    static AddNpc(id) {\n        if (!this.NPC.includes(id)) {\n            if (this.NPC.length > 10) {\n                this.NPC = [];\n            }\n            this.NPC.push(id);\n        }\n    }\n    static GetNpc(id) {\n        if (this.NPC.includes(id)) {\n            return true;\n        }\n        return false;\n    }\n    static AddConceptToStorage(concept) {\n        if (concept.id > 0) {\n            UpdateToDatabase(\"concept\", concept);\n        }\n    }\n    static GetConceptBulkData(ids, connectionArray, remainingIds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield BinaryTree.getConceptListFromIds(ids, connectionArray, remainingIds);\n        });\n    }\n    static AddConcept(concept) {\n        if (concept.id > 0) {\n            // console.log(\"added the concept to the tree\", concept);\n            //var contains = this.CheckContains(concept);\n            // this.conceptDictionary[concept.id] = concept;\n            //    if(contains){\n            //   this.RemoveConcept(concept);\n            //  }\n            //UpdateToDatabase(\"concept\",concept);\n            //IndexDbUpdate.UpdateConceptIndexDb(concept);\n            BinaryTree.addConceptToTree(concept);\n            BinaryTypeTree.addConceptToTree(concept);\n            //BinaryCharacterTree.addConceptToTree(concept);\n        }\n    }\n    static AddConceptToMemory(concept) {\n        if (concept.id > 0) {\n            //var contains = this.CheckContains(concept);\n            // this.conceptDictionary[concept.id] = concept;\n            //    if(contains){\n            //   this.RemoveConcept(concept);\n            //  }\n            BinaryTree.addConceptToTree(concept);\n            BinaryTypeTree.addConceptToTree(concept);\n            // BinaryCharacterTree.addConceptToTree(concept);\n        }\n    }\n    static AddConceptTemporary(concept) {\n        var contains = this.CheckContains(concept);\n        this.conceptDictionary[concept.id] = concept;\n        if (contains) {\n            this.RemoveConcept(concept);\n        }\n        this.conceptsArray.push(concept);\n    }\n    static RemoveConcept(concept) {\n        for (var i = 0; i < this.conceptsArray.length; i++) {\n            if (this.conceptsArray[i].id == concept.id) {\n                this.conceptsArray.splice(i, 1);\n            }\n        }\n        removeFromDatabase(\"concept\", concept.id);\n    }\n    static GetConcept(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var myConcept = CreateDefaultConcept();\n            var node = yield BinaryTree.getNodeFromTree(id);\n            if (node === null || node === void 0 ? void 0 : node.value) {\n                var returnedConcept = node.value;\n                if (returnedConcept) {\n                    myConcept = returnedConcept;\n                    // if(myConcept.count > IndexDbUpdate.MIN_USE_FOR_INDEX_DB){\n                    //     IndexDbUpdate.UpdateConceptIndexDb(myConcept);\n                    // }\n                }\n            }\n            return myConcept;\n        });\n    }\n    static GetConceptByCharacter(characterValue) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var concept = CreateDefaultConcept();\n            var Node = BinaryCharacterTree.getNodeFromTree(characterValue);\n            if (Node) {\n                concept = Node.value;\n            }\n            return concept;\n        });\n    }\n    static GetConceptByCharacterUpdated(characterValue) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var concept = CreateDefaultConcept();\n            var Node = BinaryCharacterTree.getNodeFromTree(characterValue);\n            if (Node) {\n                concept = Node.value;\n            }\n            return concept;\n        });\n    }\n    static GetConceptByCharacterAndTypeLocal(character_value, typeId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var concept = CreateDefaultConcept();\n            //var Node = await BinaryCharacterTree.getCharacterAndTypeFromTree(character_value,typeId);\n            concept = yield BinaryTypeTree.getTypeVariantsWithCharacterValueNew(character_value, typeId);\n            // if(Node){\n            //     concept =  Node.value;\n            //     console.log(\"found the output\");\n            //     console.log(concept);\n            // }\n            return concept;\n        });\n    }\n    static GetConceptByCharacterAndCategoryLocal(character_value, categoryId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var concept = CreateDefaultConcept();\n            var Node = yield BinaryCharacterTree.getCharacterAndCategoryFromTree(character_value, categoryId);\n            if (Node) {\n                concept = Node.value;\n            }\n            return concept;\n        });\n    }\n    static GetConceptsByTypeId(typeId) {\n        var myConcept;\n        let ConceptList = [];\n        myConcept = null;\n        for (var i = 0; i < this.conceptsArray.length; i++) {\n            if (this.conceptsArray[i].typeId == typeId) {\n                ConceptList.push(this.conceptsArray[i]);\n            }\n        }\n        return ConceptList;\n    }\n    static GetConceptsByTypeIdAndUser(typeId, userId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let ConceptList = [];\n            ConceptList = yield BinaryTypeTree.getTypeVariantsFromTreeWithUserIdNew(typeId, userId);\n            return ConceptList;\n        });\n    }\n    static GetBinaryCharacterTree() {\n        return BinaryCharacterTree.characterRoot;\n    }\n    getName() {\n        return this.name;\n    }\n}\nConceptsData.conceptsArray = [];\nConceptsData.NPC = [];\nConceptsData.conceptDictionary = [];\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { DelayFunctionExecution } from \"../app\";\nimport { getObjectsFromIndexDb } from \"../Database/indexeddb\";\nimport { ConceptsData } from \"../DataStructures/ConceptData\";\nimport { IdentifierFlags } from \"../DataStructures/IdentifierFlags\";\n/**\n * This function builds up the binary tree on startup from the indexdb\n */\nexport default function CreateConceptBinaryTreeFromIndexDb() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let conceptList = yield getObjectsFromIndexDb(\"concept\");\n            if (Array.isArray(conceptList)) {\n                for (let i = 0; i < conceptList.length; i++) {\n                    let concept = conceptList[i];\n                    ConceptsData.AddConceptToMemory(concept);\n                }\n            }\n            IdentifierFlags.isDataLoaded = true;\n            IdentifierFlags.isCharacterLoaded = true;\n            IdentifierFlags.isTypeLoaded = true;\n        }\n        catch (error) {\n            yield DelayFunctionExecution(2000, CreateConceptBinaryTreeFromIndexDb());\n            let errorObject = {\n                \"message\": \"Cannot create Binary Tree Concept\",\n                \"ok\": false,\n                \"status\": 400,\n                \"data\": error\n            };\n            throw errorObject;\n        }\n    });\n}\n","import { BaseUrl } from \"../BaseUrl\";\n/**\n * This is a class that is used to standardize the Response that is sent by FreeSchema.\n * This is done so that we do not have to send a HttpResponse codes.\n */\nexport class FreeSchemaResponse {\n    /**\n     *\n     * @param message this is the message for the response\n     * @param ok  this is the status can be true or false boolean in case that request succeds or fails\n     * @param status this is the standard http codes 200 for ok, 500 for internal error etc.\n     * @param data  this is the standard data that can be anything.\n     */\n    constructor(message, ok, status, data) {\n        this.url = BaseUrl.BASE_URL;\n        this.message = message;\n        this.ok = ok;\n        this.status = status;\n        this.data = data;\n    }\n    /**\n     * This function gets the message of the error\n     * @returns\n     */\n    getMessage() {\n        return this.message;\n    }\n    /**\n     *\n     * @param message This allows you to set a message variable in the FreeSchemaResponse\n     * @returns\n     */\n    setMessage(message) {\n        this.message = message;\n        return this;\n    }\n    /**\n     *\n     * @returns status code of the FreeSchemaResponse\n     */\n    getStatus() {\n        return this.status;\n    }\n    /**\n     *\n     * @param status standard http error codes (200 ok , 401 unauthorized, 500 internal server error etc.)\n     * @returns\n     */\n    setStatus(status) {\n        this.status = status;\n        return this;\n    }\n    /**\n     *\n     * @returns returns the data for the request\n     */\n    getData() {\n        return this.data;\n    }\n    /**\n     *\n     * @param data any type of data can be given here\n     * @returns FreeSchemaReponse\n     */\n    setData(data) {\n        this.data = data;\n        return this;\n    }\n    /**\n     *\n     * @returns the status of the FreeSchemaReponse (either true or false)\n     */\n    getOk() {\n        return this.ok;\n    }\n    /**\n     *\n     * @param status if the status is true then the response was successful else the success was not achieved.\n     * @returns returns the FreeSchemaResponse\n     */\n    setOk(ok) {\n        this.ok = ok;\n        return this;\n    }\n    /**\n     *\n     * @returns the url that caused the error\n     */\n    getUrl() {\n        return this.url;\n    }\n    /**\n     *\n     * @param url the url from which the error or response originates\n     * @returns FreeSchemaResponse\n     */\n    setUrl(url) {\n        this.url = url;\n        return this;\n    }\n}\n","import { FreeSchemaResponse } from \"../../DataStructures/Responses/ErrorResponse\";\nexport function HandleHttpError(response) {\n    if (response.status == 401 || response.status == 406) {\n        let errorResponse = new FreeSchemaResponse(response.statusText, false, response.status, \"\");\n        errorResponse.setUrl(response.url);\n        throw errorResponse;\n    }\n    else if (response.status == 500) {\n        let errorResponse = new FreeSchemaResponse(response.statusText, false, response.status, \"\");\n        errorResponse.setUrl(response.url);\n        throw errorResponse;\n    }\n}\nexport function HandleInternalError(error, url = \"\") {\n    if (error.status) {\n        let errorResponse = new FreeSchemaResponse(error.message, false, error.status, error.stack);\n        errorResponse.setUrl(url);\n        throw errorResponse;\n    }\n    else {\n        let errorResponse = new FreeSchemaResponse(error.message, false, 500, error.stack);\n        errorResponse.setUrl(url);\n        throw errorResponse;\n    }\n    throw error;\n}\n","export class TokenStorage {\n}\nTokenStorage.BearerAccessToken = \"\";\n","import { TokenStorage } from \"../../DataStructures/Security/TokenStorage\";\nexport function GetRequestHeader(contentType = 'application/json', Accept = 'application/json') {\n    var headers = {\n        'Content-Type': contentType,\n        'Authorization': \"Bearer \" + TokenStorage.BearerAccessToken,\n        'Accept': Accept,\n    };\n    return headers;\n}\nexport function GetRequestHeaderWithAuthorization(contentType = 'application/json', token = \"\", Accept = 'application/json') {\n    if (token == \"\") {\n        token = TokenStorage.BearerAccessToken;\n    }\n    var headers = {\n        'Content-Type': contentType,\n        'Authorization': \"Bearer \" + token,\n        'Accept': Accept\n    };\n    return headers;\n}\nexport function GetOnlyTokenHeader() {\n    let token = TokenStorage.BearerAccessToken;\n    const myHeaders = new Headers();\n    myHeaders.append('Authorization', 'Bearer ' + token);\n    return myHeaders;\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../../DataStructures/BaseUrl\";\nimport { HandleHttpError, HandleInternalError } from \"../../Services/Common/ErrorPosting\";\nimport { GetRequestHeaderWithAuthorization } from \"../../Services/Security/GetRequestHeader\";\nexport function SearchLinkMultipleApi(searchQuery_1) {\n    return __awaiter(this, arguments, void 0, function* (searchQuery, token = \"\") {\n        var header = GetRequestHeaderWithAuthorization(\"application/json\", token);\n        const queryUrl = BaseUrl.SearchLinkMultipleAllApiUrl();\n        const body = JSON.stringify(searchQuery);\n        try {\n            const response = yield fetch(queryUrl, {\n                method: 'POST',\n                headers: header,\n                body: body\n            });\n            if (response.ok) {\n                let result = yield response.json();\n                return result;\n            }\n            else {\n                HandleHttpError(response);\n                console.log(\"This is the searching multiple error\", response.status);\n                return [];\n            }\n        }\n        catch (ex) {\n            console.log(\"This is the searching multiple error\", ex);\n            HandleInternalError(ex, queryUrl);\n        }\n    });\n}\n","export function SplitStrings(typeString) {\n    const pos = typeString.lastIndexOf(\"_\");\n    let SplittedStrings = [];\n    if (pos > 0) {\n        let rest = typeString.substring(0, pos);\n        let last = typeString.substring(pos + 1, typeString.length);\n        SplittedStrings = [rest, last];\n    }\n    else {\n        SplittedStrings = [typeString];\n    }\n    return SplittedStrings;\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConceptsData } from \"./../DataStructures/ConceptData\";\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { GetRequestHeader } from \"../Services/Security/GetRequestHeader\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nexport function GetAllConceptsByType(type, userId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            var urlencoded = new URLSearchParams();\n            urlencoded.append(\"type\", type);\n            urlencoded.append(\"user_id\", userId.toString());\n            var header = GetRequestHeader('application/x-www-form-urlencoded');\n            const response = yield fetch(BaseUrl.GetAllConceptsByTypeUrl(), {\n                method: 'POST',\n                headers: header,\n                body: urlencoded\n            });\n            if (response.ok) {\n                const result = yield response.json();\n                for (var i = 0; i < result.length; i++) {\n                    ConceptsData.AddConcept(result[i]);\n                }\n            }\n            else {\n                console.log(\"GetAllConceptsByType error\", response.status);\n                HandleHttpError(response);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('GetAllConceptsByType error message: ', error.message);\n            }\n            else {\n                console.log('GetAllConceptsByType unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetAllConceptsByTypeUrl());\n        }\n    });\n}\n","import { CreateDefaultConcept } from \"../Services/CreateDefaultConcept\";\nimport { BaseUrl } from \"./BaseUrl\";\nexport class Connection {\n    constructor(id = 0, ofTheConceptId, toTheConceptId, userId, typeId, orderId, accessId) {\n        this.count = 0;\n        this.isTemp = false;\n        this.toUpdate = false;\n        this.applicationId = BaseUrl.BASE_RANDOMIZER;\n        this.type = CreateDefaultConcept();\n        this.ofConcept = CreateDefaultConcept();\n        this.toConcept = CreateDefaultConcept();\n        this.id = id;\n        this.ofTheConceptId = ofTheConceptId;\n        this.toTheConceptId = toTheConceptId;\n        this.userId = userId;\n        this.typeId = typeId;\n        this.ghostId = id;\n        this.orderId = orderId;\n        this.accessId = accessId;\n        this.entryTimeStamp = new Date();\n        this.terminationDateTime = new Date();\n        this.localSyncTime = new Date();\n        this.typeCharacter = \"\";\n    }\n}\n","export class ConnectionNode {\n    constructor(key, value, leftNode, rightNode) {\n        this.variants = [];\n        this.height = 1;\n        this.key = key;\n        this.value = value;\n        this.leftNode = leftNode;\n        this.rightNode = rightNode;\n        this.currentNode = null;\n    }\n    addCurrentNode(passedNode, node) {\n        if (node == null) {\n            node = passedNode;\n            return node;\n        }\n        if (passedNode.value.typeId != node.value.typeId) {\n            node.currentNode = this.addCurrentNode(passedNode, node.currentNode);\n        }\n        return node;\n    }\n    addCurrentNodeType(passedNode, node) {\n        if (node == null) {\n            node = passedNode;\n            return node;\n        }\n        let contains = false;\n        if (passedNode.value.id == node.value.id) {\n            contains = true;\n        }\n        for (let i = 0; i < node.variants.length; i++) {\n            if (node.variants[i].value.id == passedNode.value.id) {\n                contains = true;\n            }\n        }\n        if (!contains) {\n            node.variants.push(passedNode);\n        }\n        //node.currentNode = this.addCurrentNode(passedNode, node.currentNode);\n        return node;\n    }\n    addNode(passedNode, node, height) {\n        if (node == null) {\n            node = passedNode;\n            return node;\n        }\n        let LeftNode = node.leftNode;\n        let RightNode = node.rightNode;\n        if (node.key > passedNode.key) {\n            node.leftNode = this.addNode(passedNode, LeftNode, height);\n        }\n        else if (node.key < passedNode.key) {\n            node.rightNode = this.addNode(passedNode, RightNode, height);\n        }\n        // else if (node.key == passedNode.key && node.key != \"\"){\n        //     node.currentNode = passedNode;\n        // }\n        else {\n            return node;\n        }\n        node.height = 1 + Math.max(this.getHeight(node.leftNode), this.getHeight(node.rightNode));\n        let balancingFactor = this.getBalanceFactor(node);\n        if (balancingFactor > 1) {\n            if (node.leftNode) {\n                if (passedNode.key < node.leftNode.key) {\n                    return this.rightRotate(node);\n                }\n                else if (passedNode.key > node.leftNode.key) {\n                    node.leftNode = this.leftRotate(node.leftNode);\n                    return this.rightRotate(node);\n                }\n            }\n        }\n        if (balancingFactor < -1) {\n            if (node.rightNode) {\n                if (passedNode.key > node.rightNode.key) {\n                    return this.leftRotate(node);\n                }\n                else if (passedNode.key < node.rightNode.key) {\n                    node.rightNode = this.rightRotate(node.rightNode);\n                    return this.leftRotate(node);\n                }\n            }\n        }\n        return node;\n    }\n    addTypeNode(passedNode, node, height) {\n        let debugFlag = false;\n        if (passedNode.value.typeId != 0) {\n            // if(passedNode.value.characterValue == \"Default\"){\n            //     console.log(\"default here\");\n            //     debugFlag = true;\n            // }\n            if (node == null) {\n                if (debugFlag) {\n                    console.log(\"equal here\", node);\n                }\n                node = passedNode;\n                return node;\n            }\n            let LeftNode = node.leftNode;\n            let RightNode = node.rightNode;\n            if (node.key > passedNode.key) {\n                if (debugFlag) {\n                    console.log(\"left  here\", node);\n                }\n                node.leftNode = this.addTypeNode(passedNode, LeftNode, height);\n            }\n            else if (node.key < passedNode.key) {\n                if (debugFlag) {\n                    console.log(\"right here\", node, RightNode);\n                }\n                node.rightNode = this.addTypeNode(passedNode, RightNode, height);\n            }\n            else {\n                if (debugFlag) {\n                    console.log(\"else here\", node, passedNode);\n                }\n                if (node.key == passedNode.key && node.key != 0) {\n                    node.addCurrentNodeType(passedNode, node);\n                }\n                return node;\n            }\n            node.height = 1 + Math.max(this.getHeight(node.leftNode), this.getHeight(node.rightNode));\n            if (debugFlag) {\n                console.log(\"height here\", node.height);\n            }\n            let balancingFactor = this.getBalanceFactor(node);\n            if (debugFlag) {\n                console.log(\"balancingFactor here\", balancingFactor);\n            }\n            if (balancingFactor > 1) {\n                if (node.leftNode) {\n                    if (passedNode.key < node.leftNode.key) {\n                        let returner = this.rightRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here 1 \", returner);\n                        }\n                        return returner;\n                    }\n                    else if (passedNode.key > node.leftNode.key) {\n                        node.leftNode = this.leftRotate(node.leftNode);\n                        let returner = this.rightRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here 2 \", returner);\n                        }\n                        return returner;\n                    }\n                }\n            }\n            if (balancingFactor < -1) {\n                if (node.rightNode) {\n                    if (passedNode.key > node.rightNode.key) {\n                        let returner = this.leftRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here 3 \", returner);\n                        }\n                        return returner;\n                    }\n                    else if (passedNode.key < node.rightNode.key) {\n                        node.rightNode = this.rightRotate(node.rightNode);\n                        let returner = this.leftRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here4 \", returner, node);\n                        }\n                        return returner;\n                    }\n                }\n            }\n        }\n        else {\n            if (debugFlag) {\n                console.log(\"what here\", node);\n            }\n        }\n        if (debugFlag) {\n            console.log(\"returning here 6\", node);\n        }\n        return node;\n    }\n    rightRotate(y) {\n        if (y) {\n            let x = y.leftNode;\n            if (x) {\n                let T2 = x.rightNode;\n                y.leftNode = T2;\n                x.rightNode = y;\n                y.height = Math.max(this.getHeight(y.leftNode), this.getHeight(y.rightNode)) + 1;\n                x.height = Math.max(this.getHeight(x.leftNode), this.getHeight(x.rightNode)) + 1;\n                return x;\n            }\n            // return x;\n        }\n        return y;\n    }\n    leftRotate(x) {\n        if (x) {\n            let y = x.rightNode;\n            if (y) {\n                let T2 = y.leftNode;\n                y.leftNode = x;\n                x.rightNode = T2;\n                x.height = Math.max(this.getHeight(x.leftNode), this.getHeight(x.rightNode) + 1);\n                y.height = Math.max(this.getHeight(y.leftNode), this.getHeight(x.rightNode) + 1);\n                return y;\n            }\n            //return y;\n        }\n        return x;\n    }\n    getHeight(node) {\n        if (node) {\n            return node.height;\n        }\n        return 0;\n    }\n    getBalanceFactor(N) {\n        if (N == null) {\n            return 0;\n        }\n        return this.getHeight(N.leftNode) - this.getHeight(N.rightNode);\n    }\n    getFromNode(id, node) {\n        if (node) {\n            if (id == node.key) {\n                if (node.value.count) {\n                    node.value.count++;\n                }\n                else {\n                    node.value.count = 1;\n                }\n                return node;\n            }\n            else if (id < node.key) {\n                return this.getFromNode(id, node.leftNode);\n            }\n            else if (id > node.key) {\n                return this.getFromNode(id, node.rightNode);\n            }\n            return node;\n        }\n        return node;\n    }\n    getCharacterFromNode(value, node) {\n        if (node) {\n            if (value == node.key) {\n                return node;\n            }\n            else if (value < node.key) {\n                return this.getCharacterFromNode(value, node.leftNode);\n            }\n            else if (value > node.key) {\n                return this.getCharacterFromNode(value, node.rightNode);\n            }\n            return node;\n        }\n        return node;\n    }\n    checkIfIdsInNode(node, ids, connectionArray, remainingIds) {\n        if (node) {\n            if (ids.includes(node.key)) {\n                connectionArray.push(node.value);\n                //remainingIds[node.key] = true;\n                let index = ids.indexOf(node.key);\n                ids.splice(index, 1);\n            }\n            if (node.leftNode) {\n                this.checkIfIdsInNode(node.leftNode, ids, connectionArray, remainingIds);\n            }\n            if (node.rightNode) {\n                this.checkIfIdsInNode(node.rightNode, ids, connectionArray, remainingIds);\n            }\n        }\n    }\n    traverse(node) {\n        let count = 0;\n        if (node) {\n            count = count + 1;\n            if (node === null || node === void 0 ? void 0 : node.leftNode) {\n                count += this.traverse(node.leftNode);\n            }\n            if (node.rightNode) {\n                count += this.traverse(node.rightNode);\n            }\n        }\n        return count;\n    }\n    removeNode(passedNode, id) {\n        if (passedNode == null) {\n            return passedNode;\n        }\n        if (passedNode.key > id) {\n            passedNode.leftNode = this.removeNode(passedNode.leftNode, id);\n            return passedNode;\n        }\n        else if (passedNode.key < id) {\n            passedNode.rightNode = this.removeNode(passedNode.rightNode, id);\n            return passedNode;\n        }\n        // if(passedNode.variants.length > 0){\n        //     if(passedNode.value.id == id ){\n        //     }\n        //     let newNode = passedNode.variants[0];\n        //     if(newNode){\n        //         passedNode.value = newNode.value;\n        //         passedNode.key = newNode.key;\n        //         passedNode.currentNode = newNode.currentNode;\n        //         return passedNode;\n        //     }\n        // }\n        /**\n         * This is dispatched incase the connection is deleted and others are listening\n         */\n        let event = new Event(`${passedNode.value.ofTheConceptId}`);\n        dispatchEvent(event);\n        if (passedNode.leftNode == null) {\n            let temp = passedNode.rightNode;\n            passedNode = null;\n            return temp;\n        }\n        else if (passedNode.rightNode == null) {\n            let temp = passedNode.leftNode;\n            passedNode = null;\n            return temp;\n        }\n        else {\n            // passing the rightNode to the inOrderSuccessor gives the immediate successor of the node\n            let immediateSuccessor = this.inOrderSuccessor(passedNode.rightNode);\n            passedNode.value = immediateSuccessor.value;\n            passedNode.key = immediateSuccessor.key;\n            passedNode.variants = immediateSuccessor.variants;\n            passedNode.currentNode = immediateSuccessor.currentNode;\n            passedNode.rightNode = this.removeNode(passedNode.rightNode, immediateSuccessor.key);\n            return passedNode;\n        }\n    }\n    removeNodeWithVariants(passedNode, typeIdentifier, conceptId) {\n        if (passedNode == null) {\n            return passedNode;\n        }\n        if (passedNode.key > typeIdentifier) {\n            passedNode.leftNode = this.removeNodeWithVariants(passedNode.leftNode, typeIdentifier, conceptId);\n            return passedNode;\n        }\n        else if (passedNode.key < typeIdentifier) {\n            passedNode.rightNode = this.removeNodeWithVariants(passedNode.rightNode, typeIdentifier, conceptId);\n            return passedNode;\n        }\n        if (passedNode.variants.length > 0) {\n            //condition if the main node is equal to the value\n            if (passedNode.value.id == conceptId) {\n                let newNode = passedNode.variants[0];\n                if (newNode) {\n                    passedNode.value = newNode.value;\n                    passedNode.key = newNode.key;\n                    passedNode.currentNode = newNode.currentNode;\n                    passedNode.variants.splice(0, 1);\n                    return passedNode;\n                }\n            }\n            else {\n                // in the condition that the main node is not equal to the checking value \n                for (let i = 0; i < passedNode.variants.length; i++) {\n                    if (conceptId == passedNode.variants[i].value.id) {\n                        passedNode.variants.splice(i, 1);\n                        return passedNode;\n                    }\n                }\n            }\n        }\n        if (passedNode.leftNode == null) {\n            let temp = passedNode.rightNode;\n            passedNode = null;\n            return temp;\n        }\n        else if (passedNode.rightNode == null) {\n            let temp = passedNode.leftNode;\n            passedNode = null;\n            return temp;\n        }\n        else {\n            // passing the rightNode to the inOrderSuccessor gives the immediate successor of the node\n            let immediateSuccessor = this.inOrderSuccessor(passedNode.rightNode);\n            passedNode.value = immediateSuccessor.value;\n            passedNode.key = immediateSuccessor.key;\n            passedNode.variants = immediateSuccessor.variants;\n            passedNode.currentNode = immediateSuccessor.currentNode;\n            passedNode.rightNode = this.removeNodeWithVariants(passedNode.rightNode, immediateSuccessor.key, conceptId);\n            return passedNode;\n        }\n    }\n    inOrderSuccessor(root) {\n        while (root.leftNode != null) {\n            root = root.leftNode;\n        }\n        return root;\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { IdentifierFlags } from \"../IdentifierFlags\";\nimport { ConnectionNode } from \"./ConnectionNode\";\nexport class ConnectionBinaryTree {\n    static addNodeToTree(node) {\n        if (this.connectionroot == null) {\n            this.connectionroot = node;\n            return this.connectionroot;\n        }\n        else {\n            this.connectionroot = this.connectionroot.addNode(node, this.connectionroot, this.connectionroot.height);\n        }\n    }\n    static addConnectionToTree(connection) {\n        let node = new ConnectionNode(connection.id, connection, null, null);\n        this.addNodeToTree(node);\n    }\n    static traverse() {\n        var _a;\n        return (_a = this.connectionroot) === null || _a === void 0 ? void 0 : _a.traverse(this.connectionroot);\n    }\n    static waitForDataToLoad() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                this.checkFlag(resolve);\n                setTimeout(() => {\n                    reject(\"not\");\n                }, 25000);\n            });\n        });\n    }\n    static checkFlag(resolve) {\n        if (IdentifierFlags.isConnectionLoaded) {\n            return resolve(\"done\");\n        }\n        else {\n            setTimeout(ConnectionBinaryTree.checkFlag, 1000, resolve);\n        }\n    }\n    ;\n    static removeNodeFromTree(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.connectionroot) {\n                this.connectionroot = this.connectionroot.removeNode(this.connectionroot, id);\n            }\n        });\n    }\n    static getNodeFromTree(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.connectionroot) {\n                let Node = this.connectionroot.getFromNode(id, this.connectionroot);\n                return Node;\n            }\n            return this.connectionroot;\n        });\n    }\n    static getConnectionListFromIds(ids, connectionArray, remainingIds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.connectionroot) {\n                this.connectionroot.checkIfIdsInNode(this.connectionroot, ids, connectionArray, remainingIds);\n            }\n        });\n    }\n}\nConnectionBinaryTree.connectionroot = null;\n","export class NodePrimitive {\n    constructor(key, value, leftNode, rightNode) {\n        this.key = \"\";\n        this.value = [];\n        this.height = 1;\n        this.key = key;\n        this.value = value;\n        this.leftNode = leftNode;\n        this.rightNode = rightNode;\n    }\n    getFromNode(id, node) {\n        if (node) {\n            if (id == node.key) {\n                return node;\n            }\n            else if (id < node.key) {\n                return this.getFromNode(id, node.leftNode);\n            }\n            else if (id > node.key) {\n                return this.getFromNode(id, node.rightNode);\n            }\n            return node;\n        }\n        return node;\n    }\n    rightRotate(y) {\n        if (y) {\n            let x = y.leftNode;\n            if (x) {\n                let T2 = x.rightNode;\n                y.leftNode = T2;\n                x.rightNode = y;\n                y.height = Math.max(this.getHeight(y.leftNode), this.getHeight(y.rightNode)) + 1;\n                x.height = Math.max(this.getHeight(x.leftNode), this.getHeight(x.rightNode)) + 1;\n                return x;\n            }\n            // return x;\n        }\n        return y;\n    }\n    leftRotate(x) {\n        if (x) {\n            let y = x.rightNode;\n            if (y) {\n                let T2 = y.leftNode;\n                y.leftNode = x;\n                x.rightNode = T2;\n                x.height = Math.max(this.getHeight(x.leftNode), this.getHeight(x.rightNode) + 1);\n                y.height = Math.max(this.getHeight(y.leftNode), this.getHeight(x.rightNode) + 1);\n                return y;\n            }\n            //return y;\n        }\n        return x;\n    }\n    getHeight(node) {\n        if (node) {\n            return node.height;\n        }\n        return 0;\n    }\n    getBalanceFactor(N) {\n        if (N == null) {\n            return 0;\n        }\n        return this.getHeight(N.leftNode) - this.getHeight(N.rightNode);\n    }\n    removeNode(passedNode, id) {\n        if (passedNode == null) {\n            return passedNode;\n        }\n        if (passedNode.key > id) {\n            passedNode.leftNode = this.removeNode(passedNode.leftNode, id);\n            return passedNode;\n        }\n        else if (passedNode.key < id) {\n            passedNode.rightNode = this.removeNode(passedNode.rightNode, id);\n            return passedNode;\n        }\n        // if(passedNode.variants.length > 0){\n        //     if(passedNode.value.id == id ){\n        //     }\n        //     var newNode = passedNode.variants[0];\n        //     if(newNode){\n        //         passedNode.value = newNode.value;\n        //         passedNode.key = newNode.key;\n        //         passedNode.currentNode = newNode.currentNode;\n        //         return passedNode;\n        //     }\n        // }\n        if (passedNode.leftNode == null) {\n            let temp = passedNode.rightNode;\n            passedNode = null;\n            return temp;\n        }\n        else if (passedNode.rightNode == null) {\n            let temp = passedNode.leftNode;\n            passedNode = null;\n            return temp;\n        }\n        else {\n            // passing the rightNode to the inOrderSuccessor gives the immediate successor of the node\n            let immediateSuccessor = this.inOrderSuccessor(passedNode.rightNode);\n            passedNode.value = immediateSuccessor.value;\n            passedNode.key = immediateSuccessor.key;\n            passedNode.variants = immediateSuccessor.variants;\n            passedNode.currentNode = immediateSuccessor.currentNode;\n            passedNode.rightNode = this.removeNode(passedNode.rightNode, immediateSuccessor.key);\n            return passedNode;\n        }\n    }\n    inOrderSuccessor(root) {\n        while (root.leftNode != null) {\n            root = root.leftNode;\n        }\n        return root;\n    }\n}\n","import { NodePrimitive } from \"./NodePrimitive\";\nexport class ConnectionOfNode extends NodePrimitive {\n    constructor(key, value, leftNode, rightNode) {\n        super(key, value, leftNode, rightNode);\n        this.key = \"\";\n        this.value = [];\n        this.height = 1;\n        this.key = key;\n        this.value = value;\n        this.leftNode = leftNode;\n        this.rightNode = rightNode;\n    }\n    addNode(passedNode, node, height) {\n        if (node == null) {\n            node = passedNode;\n            // let event = new Event(`${passedNode.key}`);\n            // dispatchEvent(event);\n            return node;\n        }\n        let LeftNode = node.leftNode;\n        let RightNode = node.rightNode;\n        if (node.key > passedNode.key) {\n            node.leftNode = this.addNode(passedNode, LeftNode, height);\n        }\n        else if (node.key < passedNode.key) {\n            node.rightNode = this.addNode(passedNode, RightNode, height);\n        }\n        else {\n            return node;\n        }\n        node.height = 1 + Math.max(this.getHeight(node.leftNode), this.getHeight(node.rightNode));\n        let balancingFactor = this.getBalanceFactor(node);\n        if (balancingFactor > 1) {\n            if (node.leftNode) {\n                if (passedNode.key < node.leftNode.key) {\n                    let returner = this.rightRotate(node);\n                    return returner;\n                }\n                else if (passedNode.key > node.leftNode.key) {\n                    node.leftNode = this.leftRotate(node.leftNode);\n                    let returner = this.rightRotate(node);\n                    return returner;\n                }\n            }\n        }\n        if (balancingFactor < -1) {\n            if (node.rightNode) {\n                if (passedNode.key > node.rightNode.key) {\n                    let returner = this.leftRotate(node);\n                    return returner;\n                }\n                else if (passedNode.key < node.rightNode.key) {\n                    node.rightNode = this.rightRotate(node.rightNode);\n                    let returner = this.leftRotate(node);\n                    return returner;\n                }\n            }\n        }\n        return node;\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConnectionOfNode } from \"./ConnectionOfNode\";\n/**\n * This is a binary tree that is used to store the reference to the main connection of the concept.\n */\nexport class ConnectionOfTheTree {\n    static CreateCompositionKey(ofTheConceptId, typeId) {\n        return ofTheConceptId;\n    }\n    static GetConnectionByOfTheConceptAndTypeId(ofTheConceptId, typeId) {\n        let key = this.CreateCompositionKey(ofTheConceptId, typeId);\n        if (this.node) {\n            let existingNode = this.node.getFromNode(key, this.node);\n            if (existingNode) {\n                return existingNode.value;\n            }\n        }\n        return null;\n    }\n    /**\n     * This function lets you add a connection by composite key with of the concept id and type id.\n     * This function checks if the connection already exists and then updates in the case that it does not\n     * If the connection of the concept id and type id combination is encountered first time then a node is created.\n     * @param connection connection that needs to be added.\n     */\n    static addConnection(connection) {\n        if (connection.id > 0) {\n            let key = this.CreateCompositionKey(connection.ofTheConceptId, connection.typeId);\n            if (this.node) {\n                let existingNode = this.node.getFromNode(key, this.node);\n                if (existingNode) {\n                    let connectionList = existingNode === null || existingNode === void 0 ? void 0 : existingNode.value;\n                    if (connectionList.length == 0) {\n                        existingNode.value = [];\n                    }\n                    if (!connectionList.includes(connection.id)) {\n                        connectionList.push(connection.id);\n                    }\n                }\n                else {\n                    let list = [];\n                    list.push(connection.id);\n                    let connectionNode = new ConnectionOfNode(key, list, null, null);\n                    this.addNodeToTree(connectionNode);\n                }\n            }\n            else {\n                let list = [];\n                list.push(connection.id);\n                let connectionNode = new ConnectionOfNode(key, list, null, null);\n                this.addNodeToTree(connectionNode);\n            }\n            let event = new Event(`${key}`);\n            // console.log(\"dispatched the of the concecpt event\", event);\n            dispatchEvent(event);\n        }\n        else {\n            console.log(\"cannot insert key id with  n 0 to the connection tree\", connection);\n        }\n    }\n    /**\n     * This is a function to add the connectionNode to the existing tree\n     * @param connectionOfNode This is the node that needs to be added to the tree.\n     * @returns ConnectionOfNode\n     */\n    static addNodeToTree(connectionOfNode) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.node == null) {\n                this.node = connectionOfNode;\n                // let event = new Event(`${this.node.key}`);\n                // console.log(\"dispatched the of the concecpt event\", event);\n                // dispatchEvent(event);\n                return this.node;\n            }\n            else {\n                this.node = this.node.addNode(connectionOfNode, this.node, this.node.height);\n            }\n            return this.node;\n        });\n    }\n    static removeNodeFromTree(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.node) {\n                this.node = this.node.removeNode(this.node, id);\n            }\n        });\n    }\n}\nConnectionOfTheTree.node = null;\n","import { NodePrimitive } from \"./NodePrimitive\";\nexport class ConnectionTypeNode extends NodePrimitive {\n    constructor(key, value, leftNode, rightNode) {\n        super(key, value, leftNode, rightNode);\n        this.key = \"\";\n        this.value = [];\n        this.height = 1;\n        this.key = key;\n        this.value = value;\n        this.leftNode = leftNode;\n        this.rightNode = rightNode;\n    }\n    addNode(passedNode, node, height) {\n        if (node == null) {\n            node = passedNode;\n            return node;\n        }\n        let LeftNode = node.leftNode;\n        let RightNode = node.rightNode;\n        if (node.key > passedNode.key) {\n            node.leftNode = this.addNode(passedNode, LeftNode, height);\n        }\n        else if (node.key < passedNode.key) {\n            node.rightNode = this.addNode(passedNode, RightNode, height);\n        }\n        else {\n            return node;\n        }\n        node.height = 1 + Math.max(this.getHeight(node.leftNode), this.getHeight(node.rightNode));\n        let balancingFactor = this.getBalanceFactor(node);\n        if (balancingFactor > 1) {\n            if (node.leftNode) {\n                if (passedNode.key < node.leftNode.key) {\n                    let returner = this.rightRotate(node);\n                    return returner;\n                }\n                else if (passedNode.key > node.leftNode.key) {\n                    node.leftNode = this.leftRotate(node.leftNode);\n                    let returner = this.rightRotate(node);\n                    return returner;\n                }\n            }\n        }\n        if (balancingFactor < -1) {\n            if (node.rightNode) {\n                if (passedNode.key > node.rightNode.key) {\n                    let returner = this.leftRotate(node);\n                    return returner;\n                }\n                else if (passedNode.key < node.rightNode.key) {\n                    node.rightNode = this.rightRotate(node.rightNode);\n                    let returner = this.leftRotate(node);\n                    return returner;\n                }\n            }\n        }\n        return node;\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConnectionTypeNode } from \"./ConnectionTypeNode\";\nexport class ConnectionTypeTree {\n    static CreateCompositionKey(typeId) {\n        return typeId;\n    }\n    /**\n     * This is a function to add the connectionNode to the existing tree\n     * @param connectionOfNode This is the node that needs to be added to the tree.\n     * @returns ConnectionOfNode\n     */\n    static addNodeToTree(connectionOfNode) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.connectionTypeRoot == null) {\n                this.connectionTypeRoot = connectionOfNode;\n                return this.connectionTypeRoot;\n            }\n            else {\n                this.connectionTypeRoot = this.connectionTypeRoot.addNode(connectionOfNode, this.connectionTypeRoot, this.connectionTypeRoot.height);\n            }\n            return this.connectionTypeRoot;\n        });\n    }\n    /**\n     * This function lets you add a connection by composite key with of the concept id and type id.\n     * This function checks if the connection already exists and then updates in the case that it does not\n     * If the connection of the concept id and type id combination is encountered first time then a node is created.\n     * @param connection connection that needs to be added.\n     */\n    static addConnectionToTree(connection) {\n        if (connection.id > 0) {\n            let key = this.CreateCompositionKey(connection.typeId);\n            if (this.connectionTypeRoot) {\n                // let event = new Event(`${key}`);\n                // // console.log(\"dispatched the of the concecpt event\", event);\n                // dispatchEvent(event);\n                let existingNode = this.connectionTypeRoot.getFromNode(key, this.connectionTypeRoot);\n                if (existingNode) {\n                    let connectionList = existingNode === null || existingNode === void 0 ? void 0 : existingNode.value;\n                    if (connectionList.length == 0) {\n                        existingNode.value = [];\n                    }\n                    if (!connectionList.includes(connection.id)) {\n                        connectionList.push(connection.id);\n                    }\n                }\n                else {\n                    let list = [];\n                    list.push(connection.id);\n                    let connectionNode = new ConnectionTypeNode(key, list, null, null);\n                    this.addNodeToTree(connectionNode);\n                }\n            }\n            else {\n                let list = [];\n                list.push(connection.id);\n                let connectionNode = new ConnectionTypeNode(key, list, null, null);\n                this.addNodeToTree(connectionNode);\n            }\n        }\n        else {\n            console.log(\"cannot insert key id with  n 0 to the connection tree\", connection);\n        }\n    }\n    // static async removeNodeFromTree(id:number){\n    //     if(this.connectionTypeRoot){\n    //         this.connectionTypeRoot = this.connectionTypeRoot.removeNode(this.connectionTypeRoot,id);\n    //     }\n    //   }\n    // commented\n    // static getNodeFromTree(id:number){\n    //     if(this.connectionTypeRoot){\n    //         let Node = this.connectionTypeRoot.getFromNode(id, this.connectionTypeRoot);\n    //         return Node;\n    //     }\n    //     return this.connectionTypeRoot;\n    // }\n    static GetConnectionByOfTheConceptAndTypeId(ofTheConceptId, typeId) {\n        let key = this.CreateCompositionKey(typeId);\n        if (this.connectionTypeRoot) {\n            let existingNode = this.connectionTypeRoot.getFromNode(key, this.connectionTypeRoot);\n            if (existingNode) {\n                return existingNode.value;\n            }\n        }\n        return null;\n    }\n}\nConnectionTypeTree.connectionTypeRoot = null;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { removeFromDatabase, UpdateToDatabase } from \"../Database/indexeddb\";\nimport { Connection } from \"./Connection\";\nimport { ConnectionBinaryTree } from \"./ConnectionBinaryTree/ConnectionBinaryTree\";\nimport { ConnectionOfTheTree } from \"./ConnectionBinaryTree/ConnectionOfTheTree\";\nimport { ConnectionTypeTree } from \"./ConnectionBinaryTree/ConnectionTypeTree\";\nexport class ConnectionData {\n    constructor() {\n        this.name = \"Connection Array\";\n    }\n    static CheckContains(connection) {\n        let contains = false;\n        for (let i = 0; i < this.connectionArray.length; i++) {\n            if (this.connectionArray[i].id == connection.id) {\n                contains = true;\n            }\n        }\n        return contains;\n    }\n    static AddConnectionToStorage(connection) {\n        UpdateToDatabase(\"connection\", connection);\n    }\n    static AddConnection(connection) {\n        //    var contains = this.CheckContains(connection);\n        //     if(contains){\n        //         this.RemoveConnection(connection);\n        //     }\n        //     if(connection.id != 0 || connection.isTemp){\n        //         storeToDatabase(\"connection\",connection);\n        //     }\n        //     this.connectionArray.push(connection);\n        // if(!connection.isTemp){\n        //UpdateToDatabase(\"connection\", connection);\n        ConnectionBinaryTree.addConnectionToTree(connection);\n        ConnectionTypeTree.addConnectionToTree(connection);\n        ConnectionOfTheTree.addConnection(connection);\n    }\n    static AddConnectionToMemory(connection) {\n        if (!connection.isTemp) {\n            ConnectionBinaryTree.addConnectionToTree(connection);\n            ConnectionTypeTree.addConnectionToTree(connection);\n            ConnectionOfTheTree.addConnection(connection);\n        }\n    }\n    static AddToDictionary(connection) {\n        this.connectionDictionary[connection.id] = connection;\n    }\n    static RemoveConnection(connection) {\n        //    for(var i=0; i<this.connectionArray.length; i++){\n        //     if(this.connectionArray[i].id == connection.id){\n        //         this.connectionArray.splice(i, 1);\n        //     }\n        //    }\n        if (connection.id != 0) {\n            removeFromDatabase(\"connection\", connection.id);\n            ConnectionBinaryTree.removeNodeFromTree(connection.id);\n            // ConnectionTypeTree.removeTypeConcept(connection.typeId, connection.id);\n            ConnectionOfTheTree.removeNodeFromTree(connection.id);\n        }\n    }\n    static GetConnectionTypeOfTree() {\n        ConnectionOfTheTree.node;\n    }\n    static GetConnectionByOfTheConceptAndType(ofTheConceptId, typeId) {\n        let connections = ConnectionOfTheTree.GetConnectionByOfTheConceptAndTypeId(ofTheConceptId, typeId);\n        if (connections) {\n            return connections;\n        }\n        return [];\n    }\n    static GetConnectionByOfType(ofTheConceptId, typeId) {\n        let connections = ConnectionTypeTree.GetConnectionByOfTheConceptAndTypeId(ofTheConceptId, typeId);\n        if (connections) {\n            return connections;\n        }\n        return [];\n    }\n    static GetConnectionTree() {\n        return ConnectionBinaryTree.connectionroot;\n    }\n    static GetConnectionTypeTree() {\n        return ConnectionTypeTree.connectionTypeRoot;\n    }\n    static GetConnectionBulkData(ids, connectionArray, remainingIds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield ConnectionBinaryTree.getConnectionListFromIds(ids, connectionArray, remainingIds);\n        });\n    }\n    static GetConnection(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            //    var  myConcept: Connection|null;\n            //    myConcept = null;\n            //     for(var i=0; i<this.connectionArray.length; i++){\n            //         if(this.connectionArray[i].id == id){\n            //             myConcept = this.connectionArray[i];\n            //         }\n            //     }\n            //     return myConcept;\n            let myConnection = new Connection(0, 0, 0, 0, 0, 0, 0);\n            let node = yield ConnectionBinaryTree.getNodeFromTree(id);\n            if (node === null || node === void 0 ? void 0 : node.value) {\n                let returnedConcept = node.value;\n                if (returnedConcept) {\n                    myConnection = returnedConcept;\n                    //if(myConnection.count > IndexDbUpdate.MIN_USE_FOR_INDEX_DB){\n                    // IndexDbUpdate.UpdateConnectionIndexDb(myConnection);\n                    //}\n                }\n            }\n            // if(myConcept.id == 0 || myConcept == null){\n            //     for(var i=0; i<this.conceptsArray.length; i++){\n            //         if(this.conceptsArray[i].id == id){\n            //             myConcept = this.conceptsArray[i];\n            //         }\n            //     }\n            // }\n            return myConnection;\n        });\n    }\n    // commented\n    static GetConnectionsOfCompositionLocal(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let connections = [];\n            let connectionIds = [];\n            connectionIds = ConnectionData.GetConnectionByOfType(id, id);\n            for (let i = 0; i < connectionIds.length; i++) {\n                let conn = yield ConnectionBinaryTree.getNodeFromTree(connectionIds[i]);\n                if (conn) {\n                    connections.push(conn.value);\n                }\n            }\n            return connections;\n            //let node = await ConnectionTypeTree.getNodeFromTree(id);\n            // if(node?.value){\n            //     let returnedConnection = node.value;\n            //     if(returnedConnection){\n            //         let myConnection = returnedConnection as Connection;\n            //         connections.push(myConnection);\n            //         for(let i=0; i<node.variants.length;i++){\n            //             connections.push(node.variants[i].value);\n            //         }\n            //     }\n            // }\n            //return connections;\n        });\n    }\n    static GetConnectionsOfConcept(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let connectionIds = [];\n            let connections = [];\n            connectionIds = ConnectionData.GetConnectionByOfTheConceptAndType(id, id);\n            console.log(\"this is the id\", connectionIds);\n            for (let i = 0; i < connectionIds.length; i++) {\n                let conn = yield ConnectionBinaryTree.getNodeFromTree(connectionIds[i]);\n                if (conn) {\n                    connections.push(conn.value);\n                }\n            }\n            return connections;\n        });\n    }\n    getName() {\n        return this.name;\n    }\n}\nConnectionData.connectionArray = [];\nConnectionData.connectionDictionary = [];\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConceptsData } from \"./../DataStructures/ConceptData\";\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { GetRequestHeader } from \"../Services/Security/GetRequestHeader\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\n/**\n * This function takes in a list of ids and returns a list of concepts . This uses local memory to find concepts\n * namely in the concept binary tree. If it could not find the concepts in local memory then it fetches those from\n * the api. The fetched concepts from api are then stored in the memory for further use in future.\n * @param conceptIds list of concept ids that need to be fetched\n * @returns list of concepts\n */\nexport function GetConceptBulk(passedConcepts) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let result = [];\n        let setTime = new Date().getTime();\n        // let conceptIds = passedConcepts.filter((value, index, self) => {\n        //   return self.indexOf(value) === index;\n        // });\n        let conceptIds = Array.from(new Set(passedConcepts));\n        try {\n            if (conceptIds.length > 0) {\n                let bulkConceptFetch = [];\n                for (let i = 0; i < conceptIds.length; i++) {\n                    let conceptUse = yield ConceptsData.GetConcept(conceptIds[i]);\n                    if (conceptUse.id == 0) {\n                        bulkConceptFetch.push(conceptIds[i]);\n                    }\n                }\n                // let newAlgoTime = new Date().getTime();\n                //let remainingIds:any = {};\n                // for(let i=0; i< conceptIds.length; i++){\n                //     remainingIds[conceptIds[i]] = false;\n                // }\n                //await ConceptsData.GetConceptBulkData(conceptIds, result, remainingIds );\n                // for(let key in remainingIds){\n                //     if(remainingIds[key] == false){\n                //       bulkConceptFetch.push(Number(key));\n                //     }\n                // }\n                //bulkConceptFetch = conceptIds;\n                if (bulkConceptFetch.length == 0) {\n                    return result;\n                }\n                else {\n                    let header = GetRequestHeader();\n                    const response = yield fetch(BaseUrl.GetConceptBulkUrl(), {\n                        method: 'POST',\n                        headers: header,\n                        body: JSON.stringify(bulkConceptFetch)\n                    });\n                    if (response.ok) {\n                        result = yield response.json();\n                        console.log(\"got all the concepts\", result);\n                        if (result.length > 0) {\n                            for (let i = 0; i < result.length; i++) {\n                                let concept = result[i];\n                                ConceptsData.AddConcept(concept);\n                            }\n                        }\n                        console.log(\"added the concepts\");\n                    }\n                    else {\n                        console.log(\"Get Concept Bulk error\", response.status);\n                        HandleHttpError(response);\n                    }\n                }\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Get Concept Bulk  error message: ', error.message);\n            }\n            else {\n                console.log('Get Concept Bulk  unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetConceptBulkUrl());\n        }\n        return result;\n    });\n}\nexport function BulkConceptGetterApi(bulkConceptFetch) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const conceptList = [];\n        if (bulkConceptFetch.length > 0) {\n            const myHeaders = {\n                'Content-Type': 'application/json',\n            };\n            try {\n                const response = yield fetch(BaseUrl.GetConceptBulkUrl(), {\n                    method: 'POST',\n                    headers: myHeaders,\n                    body: JSON.stringify(bulkConceptFetch),\n                });\n                if (response.ok) {\n                    const result = yield response.json();\n                    if (result.length > 0) {\n                        for (let i = 0; i < result.length; i++) {\n                            const concept = result[i];\n                            conceptList.push(concept);\n                            ConceptsData.AddConcept(concept);\n                        }\n                    }\n                }\n                else {\n                    console.log('bulk concept getter api error: ', response.status);\n                    HandleHttpError(response);\n                }\n            }\n            catch (error) {\n                if (error instanceof Error) {\n                    console.log('bulk concept getter api error: ', error.message);\n                }\n                else {\n                    console.log('bulk concept getter api error: ', error);\n                }\n                HandleInternalError(error, BaseUrl.GetConceptBulkUrl());\n            }\n        }\n        return conceptList;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetConceptBulk } from \"../Api/GetConceptBulk\";\n/**\n * This function takes in a list of connections and in bulk gets the concepts that are related with these connections.\n * @param connectionList list of connections whose concepts need to be found out.\n */\nexport function FindConceptsFromConnections() {\n    return __awaiter(this, arguments, void 0, function* (connectionList = []) {\n        let ConceptList = [];\n        if (connectionList.length > 0) {\n            for (let i = 0; i < connectionList.length; i++) {\n                if (!ConceptList.includes(connectionList[i].ofTheConceptId)) {\n                    ConceptList.push(connectionList[i].ofTheConceptId);\n                }\n                if (!ConceptList.includes(connectionList[i].toTheConceptId)) {\n                    ConceptList.push(connectionList[i].toTheConceptId);\n                }\n            }\n            yield GetConceptBulk(ConceptList);\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConnectionData } from \"../DataStructures/ConnectionData\";\nexport function FindConnectionsOfCompositionsBulkInMemory() {\n    return __awaiter(this, arguments, void 0, function* (composition_ids = []) {\n        let FinalConnectionList = [];\n        for (let i = 0; i < composition_ids.length; i++) {\n            // let connectionList = await ConnectionData.GetConnectionsOfCompositionLocal(composition_ids[i]);\n            let connectionList = yield ConnectionData.GetConnectionsOfConcept(composition_ids[i]);\n            FinalConnectionList.push(...connectionList);\n        }\n        return FinalConnectionList;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConnectionData } from '../DataStructures/ConnectionData';\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { FindConceptsFromConnections } from '../Services/FindConeceptsFromConnection';\nimport { FindConnectionsOfCompositionsBulkInMemory } from '../Services/FindConnectionsOfCompositionBulkInMemory';\nimport { CheckForConnectionDeletion } from '../Services/CheckForConnectionDeletion';\nimport { GetRequestHeader } from '../Services/Security/GetRequestHeader';\nimport { HandleHttpError, HandleInternalError } from '../Services/Common/ErrorPosting';\nexport function GetAllConnectionsOfCompositionBulk() {\n    return __awaiter(this, arguments, void 0, function* (composition_ids = []) {\n        var connectionList = [];\n        var conceptList = [];\n        if (composition_ids.length <= 0) {\n            return connectionList;\n        }\n        var oldConnectionList = yield FindConnectionsOfCompositionsBulkInMemory(composition_ids);\n        var connectionListString = yield GetAllConnectionsOfCompositionOnline(composition_ids);\n        connectionList = connectionListString;\n        CheckForConnectionDeletion(connectionList, oldConnectionList);\n        yield FindConceptsFromConnections(connectionList);\n        return connectionList;\n    });\n}\nexport function GetAllConnectionsOfCompositionOnline() {\n    return __awaiter(this, arguments, void 0, function* (composition_ids = []) {\n        var connectionList = [];\n        try {\n            var header = GetRequestHeader();\n            const response = yield fetch(BaseUrl.GetAllConnectionsOfCompositionBulkUrl(), {\n                method: 'POST',\n                headers: header,\n                body: JSON.stringify(composition_ids)\n            });\n            if (response.ok) {\n                const result = yield response.json();\n                for (var i = 0; i < result.length; i++) {\n                    ConnectionData.AddConnection(result[i]);\n                    connectionList.push(result[i]);\n                }\n            }\n            else {\n                console.log('Get all connections of composition bulk error message: ', \"Cannot get response\");\n                HandleHttpError(response);\n            }\n            return connectionList;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Get all connections of composition bulk error message: ', error.message);\n            }\n            else {\n                console.log('Get all connections of composition bulk unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetAllConnectionsOfCompositionBulkUrl());\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../app\";\n/**\n * version of the database. If you want to change the database then you must update this version also.\n */\nvar version = 9;\n/**\n * This class will help us store the indexdb  reference in memory and not go back to index db.\n */\nexport class LocalIndexDb {\n}\n/**\n *\n * @param databaseName not required actually. This is not used you can pass anything.\n * @returns a promise that either resolves or rejects opening the database.\n */\nexport function openDatabase(databaseName) {\n    return new Promise(function (resolve, reject) {\n        // if the indexdb is already initialized then you do not need to again initialize the db so you can get \n        // from memory.\n        if (LocalIndexDb.db) {\n            resolve(LocalIndexDb.db);\n        }\n        // the name of the database is passed here. We are statically passing the dbName with inputs from user\n        // the BASE_URL is the api that the framework calls\n        // the BASE_APPLICATION is a thing that differentiates an application from another so no two application create\n        // and use the same index db.  \n        let localDbName = BaseUrl.BASE_URL + \"_FreeSchemaLocal\" + BaseUrl.BASE_APPLICATION;\n        const request = indexedDB.open(localDbName, version);\n        // in case that the database is not opened then log the error.\n        // then we delete the database that is already present with the name\n        // then again try to create the database, since this is a temporary database so it might not matter\n        // but this is a point that we might need to be careful about.\n        // we then reject the promise and report this problem.\n        request.onerror = (event) => {\n            console.error(\"Why didn't you allow my web app to use IndexedDB?!\", event);\n            indexedDB.deleteDatabase(localDbName);\n            openDatabase(databaseName);\n            reject(event);\n        };\n        // in case that the database is allowed to be opened then we return the database object.\n        request.onsuccess = function (event) {\n            var target = event.target;\n            LocalIndexDb.db = target.result;\n            resolve(LocalIndexDb.db);\n        };\n        // in case that the version is upgraded then we delete all the old databases and then create a new database.\n        // version upgrade is a way which we can clean up old databases and its structures.\n        request.onupgradeneeded = (event) => {\n            var target = event.target;\n            var db = target.result;\n            var conceptDb = \"localconcept\";\n            var connectionDb = \"localconnection\";\n            var idDb = \"localid\";\n            console.log(\"this is the version upgrade\", version);\n            if (db.objectStoreNames.contains(conceptDb)) {\n                db.deleteObjectStore(conceptDb);\n            }\n            if (db.objectStoreNames.contains(connectionDb)) {\n                db.deleteObjectStore(connectionDb);\n            }\n            if (db.objectStoreNames.contains(idDb)) {\n                db.deleteObjectStore(idDb);\n            }\n            if (!db.objectStoreNames.contains(conceptDb)) { // if there's no database name\n                let objectStore = db.createObjectStore(conceptDb, { keyPath: 'id' }); // create it\n                objectStore.transaction.oncomplete = (event) => {\n                };\n            }\n            if (!db.objectStoreNames.contains(connectionDb)) { // if there's no database name\n                let objectStore = db.createObjectStore(connectionDb, { keyPath: 'id' }); // create it\n                objectStore.transaction.oncomplete = (event) => {\n                };\n            }\n            if (!db.objectStoreNames.contains(idDb)) { // if there's no database name\n                let objectStore = db.createObjectStore(idDb, { keyPath: 'id' }); // create it\n                objectStore.transaction.oncomplete = (event) => {\n                    // this is the event in which we initialize the local database\n                    // we assume the start of the localconcept by -100, localconnection by -200 and a random value \n                    // which will enable us to identify this local database from others.\n                    storeToDatabase(idDb, { \"id\": 0, \"value\": -100 });\n                    storeToDatabase(idDb, { \"id\": 1, \"value\": -200 });\n                    storeToDatabase(idDb, { \"id\": 3, \"value\": BaseUrl.BASE_RANDOMIZER });\n                };\n            }\n            resolve(db);\n        };\n    });\n}\nexport function LockTheDatabase(databaseName) {\n    return __awaiter(this, void 0, void 0, function* () {\n        console.log(\"lock : locked db\");\n        yield UpdateToDatabase(databaseName, { \"id\": 4, \"value\": true });\n    });\n}\nexport function UnlockDatabase(databaseName) {\n    return __awaiter(this, void 0, void 0, function* () {\n        yield UpdateToDatabase(databaseName, { \"id\": 4, \"value\": false });\n        console.log(\"lock :locked opened\");\n    });\n}\nexport function GetLockStatus(databaseName) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let list = yield getObjectsFromLocalIndexDb(databaseName);\n            console.log(\"lock :for lock locked\", list);\n            if (Array.isArray(list)) {\n                console.log(\"lock : This is the list vallue\", list[4].value);\n                return list[4].value;\n            }\n            console.log(\"lock : This is not a list\", Array.isArray(list));\n            return false;\n        }\n        catch (error) {\n            console.log(\"lock : this is the error\", error);\n        }\n    });\n}\n/**\n*  this function will return all the objects that are in the database\n* @param databaseName name of the database\n* @returns all the objects that are in the database\n*/\nexport function getObjectsFromLocalIndexDb(databaseName) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise(function (resolve, reject) {\n            openDatabase(databaseName).then((db) => {\n                var concept;\n                var ConceptList = [];\n                let transaction = db.transaction(databaseName, \"readwrite\");\n                let objectStore = transaction.objectStore(databaseName);\n                var allobjects = objectStore.getAll();\n                allobjects.onsuccess = () => {\n                    const students = allobjects.result;\n                    for (var i = 0; i < students.length; i++) {\n                        ConceptList.push(students[i]);\n                    }\n                    resolve(ConceptList);\n                };\n            }).catch((event) => {\n                let errorObject = {\n                    \"status\": 400,\n                    \"ok\": false,\n                    \"message\": \"Cannot get objects from database because you cannot open the Local database\",\n                    \"data\": event\n                };\n                reject(errorObject);\n            });\n        });\n    });\n}\n/**\n *\n * @param databaseName name of the database that you want to store data to.\n * @param object any object that can be stored but keep in mind it must follow the convention that we created\n * while creating the datbase.\n * @returns a promise that if a store is successful then the obejct is returned else rejects with the event.\n */\nexport function storeToDatabase(databaseName, object) {\n    return new Promise(function (resolve, reject) {\n        openDatabase(databaseName).then((db) => {\n            let transaction = db.transaction(databaseName, \"readwrite\");\n            let objStore = transaction.objectStore(databaseName);\n            const request = objStore.add(object);\n            request.onsuccess = (event) => {\n                resolve(object);\n            };\n            request.onerror = (event) => {\n                let errorObject = {\n                    \"status\": 400,\n                    \"ok\": false,\n                    \"message\": \"Cannot store to the Local database \" + databaseName,\n                    \"data\": event,\n                    \"body\": object\n                };\n                reject(errorObject);\n            };\n        }).catch((event) => {\n            let errorObject = {\n                \"status\": 400,\n                \"ok\": false,\n                \"message\": \"Cannot store to database because you cannot open the Local database\",\n                \"data\": event\n            };\n            reject(errorObject);\n        });\n    });\n}\n/**\n *\n * @param databaseName name of the database\n * @param object this is the object that you want to update\n * @returns returns the object if it is updated successfully.\n */\nexport function UpdateToDatabase(databaseName, object) {\n    return new Promise(function (resolve, reject) {\n        console.log(\"this is wriring to the database local\", object);\n        openDatabase(databaseName).then((db) => {\n            let transaction = db.transaction(databaseName, \"readwrite\");\n            let objStore = transaction.objectStore(databaseName);\n            const request = objStore.put(object);\n            request.onsuccess = (event) => {\n                resolve(object);\n            };\n            request.onerror = (event) => {\n                let errorObject = {\n                    \"status\": 400,\n                    \"ok\": false,\n                    \"message\": \"Cannot Update to the Local database\" + databaseName,\n                    \"data\": event,\n                    \"body\": object\n                };\n                reject(errorObject);\n            };\n        }).catch((event) => {\n            let errorObject = {\n                \"status\": 400,\n                \"ok\": false,\n                \"message\": \"Cannot update to database because you cannot open the Local database\",\n                \"data\": event\n            };\n            reject(errorObject);\n        });\n    });\n}\n//   /**\n//  *  this function will return all the objects that are in the database \n//  * @param databaseName name of the database\n//  * @returns all the objects that are in the database\n//  */\n// export async function getLConceptsFromLocalDb(databaseName:string){\n//   return new Promise(function(resolve, reject){\n//         var ConceptList:any[] = [];\n//       openDatabase(databaseName).then(db=>{\n//           let transaction = LocalIndexDb.db.transaction(databaseName, \"readwrite\") as IDBTransaction;\n//           let objectStore =transaction.objectStore(databaseName) as IDBObjectStore;\n//           var allobjects = objectStore.getAll();\n//           allobjects.onsuccess = ()=> {\n//             const readObjects = allobjects.result;\n//             for(var i=0; i<readObjects.length; i++){\n//                 ConceptList.push(readObjects[i]);\n//             }\n//             resolve(ConceptList); \n//         }\n//       });\n//   });\n// }\n/**\n *\n * @param databaseName name of the database\n * @param id the id that we need to remove from the database (this is the index)\n * @returns an id if the deletion is successful and error with even in case it cannot.\n */\nexport function removeFromDatabase(databaseName, id) {\n    return new Promise(function (resolve, reject) {\n        openDatabase(databaseName).then((db) => {\n            let transaction = db.transaction(databaseName, \"readwrite\");\n            let objectStore = transaction.objectStore(databaseName);\n            let getRequest = objectStore.delete(id);\n            getRequest.onsuccess = function (event) {\n                resolve(id);\n            };\n            getRequest.onerror = function (event) {\n                let errorObject = {\n                    \"status\": 400,\n                    \"ok\": false,\n                    \"message\": \"Cannot Update to the Local database\" + databaseName,\n                    \"data\": event,\n                    \"body\": id\n                };\n                reject(errorObject);\n            };\n        }).catch((event) => {\n            let errorObject = {\n                \"status\": 400,\n                \"ok\": false,\n                \"message\": \"Cannot remove object from database because you cannot open the Local database\",\n                \"data\": event\n            };\n            reject(errorObject);\n        });\n    });\n}\n","export class LNode {\n    constructor(key, value, leftNode, rightNode) {\n        this.variants = [];\n        this.height = 1;\n        this.key = key;\n        this.value = value;\n        this.leftNode = leftNode;\n        this.rightNode = rightNode;\n        this.currentNode = null;\n    }\n    addCurrentNode(passedNode, node) {\n        if (node == null) {\n            node = passedNode;\n            return node;\n        }\n        if (passedNode.value.typeId != node.value.typeId) {\n            node.currentNode = this.addCurrentNode(passedNode, node.currentNode);\n        }\n        return node;\n    }\n    addCurrentNodeType(passedNode, node) {\n        if (node == null) {\n            node = passedNode;\n            return node;\n        }\n        var contains = false;\n        for (let i = 0; i < node.variants.length; i++) {\n            if (node.variants[i].value.id == passedNode.value.id) {\n                contains = true;\n            }\n        }\n        if (!contains) {\n            node.variants.push(passedNode);\n        }\n        //node.currentNode = this.addCurrentNode(passedNode, node.currentNode);\n        return node;\n    }\n    addNode(passedNode, node, height) {\n        if (node == null) {\n            node = passedNode;\n            return node;\n        }\n        var LeftNode = node.leftNode;\n        var RightNode = node.rightNode;\n        if (node.key > passedNode.key) {\n            node.leftNode = this.addNode(passedNode, LeftNode, height);\n        }\n        else if (node.key < passedNode.key) {\n            node.rightNode = this.addNode(passedNode, RightNode, height);\n        }\n        // else if (node.key == passedNode.key && node.key != \"\"){\n        //     node.currentNode = passedNode;\n        // }\n        else {\n            return node;\n        }\n        node.height = 1 + Math.max(this.getHeight(node.leftNode), this.getHeight(node.rightNode));\n        let balancingFactor = this.getBalanceFactor(node);\n        if (balancingFactor > 1) {\n            if (node.leftNode) {\n                if (passedNode.key < node.leftNode.key) {\n                    return this.rightRotate(node);\n                }\n                else if (passedNode.key > node.leftNode.key) {\n                    node.leftNode = this.leftRotate(node.leftNode);\n                    return this.rightRotate(node);\n                }\n            }\n        }\n        if (balancingFactor < -1) {\n            if (node.rightNode) {\n                if (passedNode.key > node.rightNode.key) {\n                    return this.leftRotate(node);\n                }\n                else if (passedNode.key < node.rightNode.key) {\n                    node.rightNode = this.rightRotate(node.rightNode);\n                    return this.leftRotate(node);\n                }\n            }\n        }\n        return node;\n    }\n    addCharacterNode(passedNode, node, height) {\n        var debugFlag = false;\n        if (passedNode.value.characterValue != \"\") {\n            // if(passedNode.value.characterValue == \"Default\"){\n            //     console.log(\"default here\");\n            //     debugFlag = true;\n            // }\n            if (node == null) {\n                if (debugFlag) {\n                    console.log(\"equal here\", node);\n                }\n                node = passedNode;\n                return node;\n            }\n            // if (node.key == passedNode.key && node.key != \"\" ){\n            //     if(passedNode.value.characterValue == \"Default\"){\n            //         console.log(\"equal\");\n            //     }\n            //     node.currentNode = passedNode;\n            //     return node;\n            // }\n            var LeftNode = node.leftNode;\n            var RightNode = node.rightNode;\n            if (node.key > passedNode.key) {\n                if (debugFlag) {\n                    console.log(\"left  here\", node);\n                }\n                node.leftNode = this.addCharacterNode(passedNode, LeftNode, height);\n            }\n            else if (node.key < passedNode.key) {\n                if (debugFlag) {\n                    console.log(\"right here\", node, RightNode);\n                }\n                node.rightNode = this.addCharacterNode(passedNode, RightNode, height);\n            }\n            // else if (node.key == passedNode.key && node.key != \"\"){\n            //     node.currentNode = passedNode;\n            // }\n            else {\n                if (debugFlag) {\n                    console.log(\"else here\", node, passedNode);\n                }\n                if (node.key == passedNode.key && node.key != \"\" && node.value.id != passedNode.value.id) {\n                    // node.currentNode = this.addCurrentNode(passedNode, node.currentNode);\n                    node.addCurrentNodeType(passedNode, node);\n                }\n                return node;\n            }\n            node.height = 1 + Math.max(this.getHeight(node.leftNode), this.getHeight(node.rightNode));\n            if (debugFlag) {\n                console.log(\"height here\", node.height);\n            }\n            let balancingFactor = this.getBalanceFactor(node);\n            if (debugFlag) {\n                console.log(\"balancingFactor here\", balancingFactor);\n            }\n            if (balancingFactor > 1) {\n                if (node.leftNode) {\n                    if (passedNode.key < node.leftNode.key) {\n                        var returner = this.rightRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here 1 \", returner);\n                        }\n                        return returner;\n                    }\n                    else if (passedNode.key > node.leftNode.key) {\n                        node.leftNode = this.leftRotate(node.leftNode);\n                        var returner = this.rightRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here 2 \", returner);\n                        }\n                        return returner;\n                    }\n                }\n            }\n            if (balancingFactor < -1) {\n                if (node.rightNode) {\n                    if (passedNode.key > node.rightNode.key) {\n                        var returner = this.leftRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here 3 \", returner);\n                        }\n                        return returner;\n                    }\n                    else if (passedNode.key < node.rightNode.key) {\n                        node.rightNode = this.rightRotate(node.rightNode);\n                        var returner = this.leftRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here4 \", returner, node);\n                        }\n                        return returner;\n                    }\n                }\n            }\n        }\n        else {\n            if (debugFlag) {\n                console.log(\"what here\", node);\n            }\n        }\n        if (debugFlag) {\n            console.log(\"returning here 6\", node);\n        }\n        return node;\n    }\n    addTypeNode(passedNode, node, height) {\n        var debugFlag = false;\n        if (passedNode.value.typeId != 0) {\n            // if(passedNode.value.characterValue == \"Default\"){\n            //     console.log(\"default here\");\n            //     debugFlag = true;\n            // }\n            if (node == null) {\n                if (debugFlag) {\n                    console.log(\"equal here\", node);\n                }\n                node = passedNode;\n                return node;\n            }\n            var LeftNode = node.leftNode;\n            var RightNode = node.rightNode;\n            if (node.key > passedNode.key) {\n                if (debugFlag) {\n                    console.log(\"left  here\", node);\n                }\n                node.leftNode = this.addTypeNode(passedNode, LeftNode, height);\n            }\n            else if (node.key < passedNode.key) {\n                if (debugFlag) {\n                    console.log(\"right here\", node, RightNode);\n                }\n                node.rightNode = this.addTypeNode(passedNode, RightNode, height);\n            }\n            else {\n                if (debugFlag) {\n                    console.log(\"else here\", node, passedNode);\n                }\n                if (node.key == passedNode.key && node.key != 0 && node.value.id != passedNode.value.id) {\n                    node.addCurrentNodeType(passedNode, node);\n                }\n                return node;\n            }\n            node.height = 1 + Math.max(this.getHeight(node.leftNode), this.getHeight(node.rightNode));\n            if (debugFlag) {\n                console.log(\"height here\", node.height);\n            }\n            let balancingFactor = this.getBalanceFactor(node);\n            if (debugFlag) {\n                console.log(\"balancingFactor here\", balancingFactor);\n            }\n            if (balancingFactor > 1) {\n                if (node.leftNode) {\n                    if (passedNode.key < node.leftNode.key) {\n                        var returner = this.rightRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here 1 \", returner);\n                        }\n                        return returner;\n                    }\n                    else if (passedNode.key > node.leftNode.key) {\n                        node.leftNode = this.leftRotate(node.leftNode);\n                        var returner = this.rightRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here 2 \", returner);\n                        }\n                        return returner;\n                    }\n                }\n            }\n            if (balancingFactor < -1) {\n                if (node.rightNode) {\n                    if (passedNode.key > node.rightNode.key) {\n                        var returner = this.leftRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here 3 \", returner);\n                        }\n                        return returner;\n                    }\n                    else if (passedNode.key < node.rightNode.key) {\n                        node.rightNode = this.rightRotate(node.rightNode);\n                        var returner = this.leftRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here4 \", returner, node);\n                        }\n                        return returner;\n                    }\n                }\n            }\n        }\n        else {\n            if (debugFlag) {\n                console.log(\"what here\", node);\n            }\n        }\n        if (debugFlag) {\n            console.log(\"returning here 6\", node);\n        }\n        return node;\n    }\n    rightRotate(y) {\n        if (y) {\n            let x = y.leftNode;\n            if (x) {\n                let T2 = x.rightNode;\n                y.leftNode = T2;\n                x.rightNode = y;\n                y.height = Math.max(this.getHeight(y.leftNode), this.getHeight(y.rightNode)) + 1;\n                x.height = Math.max(this.getHeight(x.leftNode), this.getHeight(x.rightNode)) + 1;\n                return x;\n            }\n            // return x;\n        }\n        return y;\n    }\n    leftRotate(x) {\n        if (x) {\n            let y = x.rightNode;\n            if (y) {\n                let T2 = y.leftNode;\n                y.leftNode = x;\n                x.rightNode = T2;\n                x.height = Math.max(this.getHeight(x.leftNode), this.getHeight(x.rightNode) + 1);\n                y.height = Math.max(this.getHeight(y.leftNode), this.getHeight(x.rightNode) + 1);\n                return y;\n            }\n            //return y;\n        }\n        return x;\n    }\n    getHeight(node) {\n        if (node) {\n            return node.height;\n        }\n        return 0;\n    }\n    getBalanceFactor(N) {\n        if (N == null) {\n            return 0;\n        }\n        return this.getHeight(N.leftNode) - this.getHeight(N.rightNode);\n    }\n    getFromNode(id, node) {\n        if (node) {\n            if (id == node.key) {\n                return node;\n            }\n            else if (id < node.key) {\n                return this.getFromNode(id, node.leftNode);\n            }\n            else if (id > node.key) {\n                return this.getFromNode(id, node.rightNode);\n            }\n            return node;\n        }\n        return node;\n    }\n    updateNodeSyncStatus(id, value, node) {\n        if (node) {\n            if (id == node.key) {\n                let lconcept = node.value;\n                lconcept.isSynced = value;\n                node.value = lconcept;\n                return node;\n            }\n            else if (id < node.key) {\n                return this.updateNodeSyncStatus(id, value, node.leftNode);\n            }\n            else if (id > node.key) {\n                return this.updateNodeSyncStatus(id, value, node.rightNode);\n            }\n            return node;\n        }\n        return node;\n    }\n    getCharacterFromNode(value, node) {\n        if (node) {\n            if (value == node.key) {\n                return node;\n            }\n            else if (value < node.key) {\n                return this.getCharacterFromNode(value, node.leftNode);\n            }\n            else if (value > node.key) {\n                return this.getCharacterFromNode(value, node.rightNode);\n            }\n            return node;\n        }\n        return node;\n    }\n    getFromNodeWithCharacterAndType(value, typeId, node) {\n        value = `${value}`;\n        if (node) {\n            if (value == node.key) {\n                if (value == node.value.characterValue && typeId == node.value.typeId) {\n                    return node;\n                }\n                else {\n                    for (let i = 0; i < node.variants.length; i++) {\n                        if (node.variants[i].value.typeId == typeId) {\n                            return node.variants[i];\n                        }\n                    }\n                    // return this.getFromNodeWithCharacterAndType(value, typeId, node.currentNode);\n                }\n            }\n            else if (value < node.key) {\n                return this.getFromNodeWithCharacterAndType(value, typeId, node.leftNode);\n            }\n            else if (value > node.key) {\n                return this.getFromNodeWithCharacterAndType(value, typeId, node.rightNode);\n            }\n            return null;\n        }\n        return node;\n    }\n    getFromNodeWithCharacterAndCategory(value, categoryId, node) {\n        value = `${value}`;\n        if (node) {\n            if (value == node.key) {\n                if (value == node.value.characterValue && categoryId == node.value.categoryId) {\n                    return node;\n                }\n                else {\n                    for (let i = 0; i < node.variants.length; i++) {\n                        if (node.variants[i].value.categoryId == categoryId) {\n                            return node.variants[i];\n                        }\n                    }\n                    // return this.getFromNodeWithCharacterAndType(value, typeId, node.currentNode);\n                }\n            }\n            else if (value < node.key) {\n                return this.getFromNodeWithCharacterAndCategory(value, categoryId, node.leftNode);\n            }\n            else if (value > node.key) {\n                return this.getFromNodeWithCharacterAndCategory(value, categoryId, node.rightNode);\n            }\n            return null;\n        }\n        return node;\n    }\n    removeNode(passedNode, id) {\n        if (passedNode == null) {\n            return passedNode;\n        }\n        if (passedNode.key > id) {\n            passedNode.leftNode = this.removeNode(passedNode.leftNode, id);\n            return passedNode;\n        }\n        else if (passedNode.key < id) {\n            passedNode.rightNode = this.removeNode(passedNode.rightNode, id);\n            return passedNode;\n        }\n        // if(passedNode.variants.length > 0){\n        //     if(passedNode.value.id == id ){\n        //     }\n        //     var newNode = passedNode.variants[0];\n        //     if(newNode){\n        //         passedNode.value = newNode.value;\n        //         passedNode.key = newNode.key;\n        //         passedNode.currentNode = newNode.currentNode;\n        //         return passedNode;\n        //     }\n        // }\n        if (passedNode.leftNode == null) {\n            let temp = passedNode.rightNode;\n            passedNode = null;\n            return temp;\n        }\n        else if (passedNode.rightNode == null) {\n            let temp = passedNode.leftNode;\n            passedNode = null;\n            return temp;\n        }\n        else {\n            // passing the rightNode to the inOrderSuccessor gives the immediate successor of the node\n            var immediateSuccessor = this.inOrderSuccessor(passedNode.rightNode);\n            passedNode.value = immediateSuccessor.value;\n            passedNode.key = immediateSuccessor.key;\n            passedNode.variants = immediateSuccessor.variants;\n            passedNode.currentNode = immediateSuccessor.currentNode;\n            passedNode.rightNode = this.removeNode(passedNode.rightNode, immediateSuccessor.key);\n            return passedNode;\n        }\n    }\n    removeNodeWithVariants(passedNode, typeIdentifier, conceptId) {\n        if (passedNode == null) {\n            return passedNode;\n        }\n        if (passedNode.key > typeIdentifier) {\n            passedNode.leftNode = this.removeNodeWithVariants(passedNode.leftNode, typeIdentifier, conceptId);\n            return passedNode;\n        }\n        else if (passedNode.key < typeIdentifier) {\n            passedNode.rightNode = this.removeNodeWithVariants(passedNode.rightNode, typeIdentifier, conceptId);\n            return passedNode;\n        }\n        if (passedNode.variants.length > 0) {\n            //condition if the main node is equal to the value\n            if (passedNode.value.id == conceptId) {\n                var newNode = passedNode.variants[0];\n                if (newNode) {\n                    passedNode.value = newNode.value;\n                    passedNode.key = newNode.key;\n                    passedNode.currentNode = newNode.currentNode;\n                    passedNode.variants.splice(0, 1);\n                    return passedNode;\n                }\n            }\n            else {\n                // in the condition that the main node is not equal to the checking value \n                for (let i = 0; i < passedNode.variants.length; i++) {\n                    if (conceptId == passedNode.variants[i].value.id) {\n                        passedNode.variants.splice(i, 1);\n                        return passedNode;\n                    }\n                }\n            }\n        }\n        if (passedNode.leftNode == null) {\n            let temp = passedNode.rightNode;\n            passedNode = null;\n            return temp;\n        }\n        else if (passedNode.rightNode == null) {\n            let temp = passedNode.leftNode;\n            passedNode = null;\n            return temp;\n        }\n        else {\n            // passing the rightNode to the inOrderSuccessor gives the immediate successor of the node\n            var immediateSuccessor = this.inOrderSuccessor(passedNode.rightNode);\n            passedNode.value = immediateSuccessor.value;\n            passedNode.key = immediateSuccessor.key;\n            passedNode.variants = immediateSuccessor.variants;\n            passedNode.currentNode = immediateSuccessor.currentNode;\n            passedNode.rightNode = this.removeNodeWithVariants(passedNode.rightNode, immediateSuccessor.key, conceptId);\n            return passedNode;\n        }\n    }\n    countNodeBelow(root) {\n        if (root == null) {\n            return 0;\n        }\n        //recursive call to left child and right child and\n        // add the result of these with 1 ( 1 for counting the root)\n        return 1 + this.countNodeBelow(root.leftNode) + this.countNodeBelow(root.rightNode);\n    }\n    inOrderSuccessor(root) {\n        while (root.leftNode != null) {\n            root = root.leftNode;\n        }\n        return root;\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { IdentifierFlags } from \"../IdentifierFlags\";\nimport { LNode } from \"./../Local/LNode\";\nexport class LocalBinaryTree {\n    static addNodeToTree(node) {\n        if (this.root == null) {\n            this.root = node;\n            return this.root;\n        }\n        else {\n            this.root = this.root.addNode(node, this.root, this.root.height);\n        }\n    }\n    static addConceptToTree(concept) {\n        var node = new LNode(concept.id, concept, null, null);\n        var characterNode = new LNode(concept.characterValue, concept, null, null);\n        this.addNodeToTree(node);\n    }\n    static waitForDataToLoad() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                this.checkFlag(resolve);\n                setTimeout(() => {\n                    reject(\"not\");\n                }, 25000);\n            });\n        });\n    }\n    static checkFlag(resolve) {\n        if (IdentifierFlags.isLocalDataLoaded) {\n            return resolve(\"done\");\n        }\n        else {\n            setTimeout(LocalBinaryTree.checkFlag, 1000, resolve);\n        }\n    }\n    ;\n    static getNodeFromTree(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                var data = yield this.waitForDataToLoad();\n            }\n            catch (exception) {\n                return null;\n            }\n            if (this.root) {\n                var Node = this.root.getFromNode(id, this.root);\n                return Node;\n            }\n            return null;\n        });\n    }\n    static getCharacterAndTypeFromTree(value, typeId) {\n        if (this.root) {\n            var Node = this.root.getFromNodeWithCharacterAndType(value, typeId, this.root);\n            return Node;\n        }\n        return this.root;\n    }\n    static updateSyncStatus(id) {\n        if (this.root) {\n            var Node = this.root.updateNodeSyncStatus(id, true, this.root);\n            return Node;\n        }\n        return this.root;\n    }\n    static removeNodeFromTree(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.root) {\n                this.root = this.root.removeNode(this.root, id);\n            }\n        });\n    }\n}\nLocalBinaryTree.root = null;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { IdentifierFlags } from \"./../IdentifierFlags\";\nimport { LNode } from \"./../Local/LNode\";\nexport class LocalBinaryCharacterTree {\n    static waitForDataToLoad() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                this.checkFlag(resolve);\n                setTimeout(() => {\n                    reject(\"not\");\n                }, 25000);\n            });\n        });\n    }\n    static checkFlag(resolve) {\n        if (IdentifierFlags.isLocalCharacterLoaded) {\n            return resolve(\"done\");\n        }\n        else {\n            setTimeout(LocalBinaryCharacterTree.checkFlag, 1000, resolve);\n        }\n    }\n    ;\n    static addNodeToTree(node) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.LocalCharacterRoot == null) {\n                this.LocalCharacterRoot = node;\n                return this.LocalCharacterRoot;\n            }\n            else {\n                this.LocalCharacterRoot = this.LocalCharacterRoot.addCharacterNode(node, this.LocalCharacterRoot, this.LocalCharacterRoot.height);\n            }\n            return this.LocalCharacterRoot;\n        });\n    }\n    static addConceptToTree(concept) {\n        if (concept.characterValue != \"\") {\n            var node = new LNode(concept.characterValue, concept, null, null);\n            this.addNodeToTree(node);\n        }\n    }\n    static getNodeFromTree(value) {\n        if (this.LocalCharacterRoot) {\n            var Node = this.LocalCharacterRoot.getCharacterFromNode(value, this.LocalCharacterRoot);\n            return Node;\n        }\n        return this.LocalCharacterRoot;\n    }\n    static getCharacterAndTypeFromTree(value, typeId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                var data = yield this.waitForDataToLoad();\n            }\n            catch (exception) {\n                return null;\n            }\n            if (this.LocalCharacterRoot) {\n                var Node = this.LocalCharacterRoot.getFromNodeWithCharacterAndType(value, typeId, this.LocalCharacterRoot);\n                return Node;\n            }\n            return this.LocalCharacterRoot;\n        });\n    }\n    static getCharacterAndCategoryFromTree(value, categoryId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                var data = yield this.waitForDataToLoad();\n            }\n            catch (exception) {\n                return null;\n            }\n            if (this.LocalCharacterRoot) {\n                var Node = this.LocalCharacterRoot.getFromNodeWithCharacterAndCategory(value, categoryId, this.LocalCharacterRoot);\n                return Node;\n            }\n            return this.LocalCharacterRoot;\n        });\n    }\n    static removeConceptType(character, id) {\n        if (this.LocalCharacterRoot) {\n            this.LocalCharacterRoot = this.LocalCharacterRoot.removeNodeWithVariants(this.LocalCharacterRoot, character, id);\n        }\n    }\n}\nLocalBinaryCharacterTree.LocalCharacterRoot = null;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { IdentifierFlags } from \"./../IdentifierFlags\";\nimport { LNode } from \"./LNode\";\nexport class LocalBinaryTypeTree {\n    static addNodeToTree(node) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.LocalTypeRoot == null) {\n                this.LocalTypeRoot = node;\n                return this.LocalTypeRoot;\n            }\n            else {\n                this.LocalTypeRoot = this.LocalTypeRoot.addTypeNode(node, this.LocalTypeRoot, this.LocalTypeRoot.height);\n            }\n            return this.LocalTypeRoot;\n        });\n    }\n    static addConceptToTree(concept) {\n        if (concept.typeId != 0) {\n            var node = new LNode(concept.typeId, concept, null, null);\n            this.addNodeToTree(node);\n        }\n    }\n    static removeConceptType(typeId, id) {\n        if (this.LocalTypeRoot) {\n            this.LocalTypeRoot = this.LocalTypeRoot.removeNodeWithVariants(this.LocalTypeRoot, typeId, id);\n        }\n    }\n    static getNodeFromTree(id) {\n        if (this.LocalTypeRoot) {\n            var Node = this.LocalTypeRoot.getFromNode(id, this.LocalTypeRoot);\n            return Node;\n        }\n        return this.LocalTypeRoot;\n    }\n    static getTypeVariantsFromTree(typeId) {\n        var Node = this.getNodeFromTree(typeId);\n        var concepts = [];\n        if (Node) {\n            concepts.push(Node === null || Node === void 0 ? void 0 : Node.value);\n            for (let i = 0; i < Node.variants.length; i++) {\n                concepts.push(Node.variants[i].value);\n            }\n            return concepts;\n        }\n    }\n    static waitForDataToLoad() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                this.checkFlag(resolve);\n                setTimeout(() => {\n                    reject(\"not\");\n                }, 25000);\n            });\n        });\n    }\n    static checkFlag(resolve) {\n        if (IdentifierFlags.isLocalTypeLoaded) {\n            return resolve(\"done\");\n        }\n        else {\n            setTimeout(LocalBinaryTypeTree.checkFlag, 1000, resolve);\n        }\n    }\n    ;\n    static getTypeVariantsFromTreeWithUserId(typeId, userId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var concepts = [];\n            try {\n                var data = yield this.waitForDataToLoad();\n            }\n            catch (exception) {\n                return concepts;\n            }\n            var Node = this.getNodeFromTree(typeId);\n            if (Node) {\n                console.log(\"this is the node to type\", Node);\n                if (Node.value.userId == userId || Node.value.userId == 999) {\n                    concepts.push(Node === null || Node === void 0 ? void 0 : Node.value);\n                }\n                for (let i = 0; i < Node.variants.length; i++) {\n                    if (Node.variants[i].value.userId == userId || Node.value.userId == 999) {\n                        concepts.push(Node.variants[i].value);\n                    }\n                }\n            }\n            return concepts;\n        });\n    }\n}\nLocalBinaryTypeTree.LocalTypeRoot = null;\n","import { Concept } from \"../../DataStructures/Concept\";\nexport function CreateDefaultLConcept() {\n    let created_on = new Date();\n    let updated_on = new Date();\n    let concept = new Concept(0, 0, 0, 0, 0, \"0\", 0, false, created_on, updated_on, \"0\");\n    return concept;\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { IdentifierFlags } from \"../IdentifierFlags\";\nimport { LNode } from \"./../Local/LNode\";\nexport class LocalGhostIdTree {\n    static addNodeToTree(node) {\n        if (this.root == null) {\n            this.root = node;\n            return this.root;\n        }\n        else {\n            this.root = this.root.addNode(node, this.root, this.root.height);\n        }\n    }\n    static addConceptToTree(concept) {\n        var node = new LNode(concept.ghostId, concept, null, null);\n        this.addNodeToTree(node);\n    }\n    static waitForDataToLoad() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                this.checkFlag(resolve);\n                setTimeout(() => {\n                    reject(\"not\");\n                }, 25000);\n            });\n        });\n    }\n    static checkFlag(resolve) {\n        if (IdentifierFlags.isLocalDataLoaded) {\n            return resolve(\"done\");\n        }\n        else {\n            setTimeout(LocalGhostIdTree.checkFlag, 1000, resolve);\n        }\n    }\n    ;\n    static getNodeFromTree(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                var data = yield this.waitForDataToLoad();\n            }\n            catch (exception) {\n                return null;\n            }\n            if (this.root) {\n                var Node = this.root.getFromNode(id, this.root);\n                return Node;\n            }\n            return null;\n        });\n    }\n    static removeNodeFromTree(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.root) {\n                this.root = this.root.removeNode(this.root, id);\n            }\n        });\n    }\n}\nLocalGhostIdTree.root = null;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../../DataStructures/BaseUrl\";\nimport { TokenStorage } from \"../../DataStructures/Security/TokenStorage\";\nimport { HandleHttpError } from \"../../Services/Common/ErrorPosting\";\nexport function CreateTheGhostConceptApi(conceptData, connectionData) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let result = {\n            \"concepts\": [],\n            \"connections\": []\n        };\n        try {\n            const myHeaders = new Headers();\n            let myBody = {\n                \"concepts\": conceptData,\n                \"connections\": connectionData\n            };\n            myHeaders.set(\"Content-Type\", \"application/json\");\n            myHeaders.set('Authorization', \"Bearer \" + TokenStorage.BearerAccessToken);\n            myHeaders.set('Accept', 'application/json');\n            myHeaders.set('Randomizer', BaseUrl.BASE_RANDOMIZER.toString());\n            const response = yield fetch(BaseUrl.CreateGhostConceptApiUrl(), {\n                method: 'POST',\n                headers: myHeaders,\n                body: JSON.stringify(myBody),\n            });\n            if (!response.ok) {\n                HandleHttpError(response);\n                throw new Error(`Error! status: ${response.status}`);\n            }\n            const resultString = yield response.json();\n            result.concepts = resultString.concepts;\n            result.connections = resultString.connections;\n            return result;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Create the concept api error message: ', error.message);\n            }\n            else {\n                console.log('Create the concept api unexpected error: ', error);\n            }\n            throw error;\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CreateTheGhostConceptApi } from \"../../Api/Create/CreateTheGhostConceptApi\";\nimport { UpdateToDatabase } from \"../../Database/indexdblocal\";\nimport { LocalConceptsData } from \"./LocalConceptData\";\nimport { CreateDefaultLConcept } from \"../../app\";\nimport { LocalConnectionData } from \"./LocalConnectionData\";\nexport class LocalSyncData {\n    static CheckContains(concept) {\n        var contains = false;\n        for (var i = 0; i < this.conceptsSyncArray.length; i++) {\n            if (this.conceptsSyncArray[i].id == concept.id) {\n                contains = true;\n            }\n        }\n        return contains;\n    }\n    static SyncDataDelete(id) {\n        for (var i = 0; i < this.conceptsSyncArray.length; i++) {\n            if (id == this.conceptsSyncArray[i].id) {\n                this.conceptsSyncArray.splice(i, 1);\n            }\n        }\n        for (var i = 0; i < this.connectionSyncArray.length; i++) {\n            if (this.connectionSyncArray[i].ofTheConceptId == id || this.connectionSyncArray[i].toTheConceptId == id || this.connectionSyncArray[i].typeId == id) {\n                this.connectionSyncArray.splice(i, 1);\n            }\n        }\n    }\n    static CheckContainsConnection(connection) {\n        var contains = false;\n        for (var i = 0; i < this.connectionSyncArray.length; i++) {\n            if (this.connectionSyncArray[i].id == connection.id) {\n                contains = true;\n            }\n        }\n        return contains;\n    }\n    static AddConcept(concept) {\n        try {\n            let contains = false;\n            let existingConcept = LocalSyncData.CheckIfTheConceptIdExists(concept.id, this.conceptsSyncArray);\n            if (existingConcept.id != 0) {\n                contains = true;\n            }\n            if (!contains) {\n                this.conceptsSyncArray.push(concept);\n            }\n        }\n        catch (error) {\n            throw error;\n        }\n    }\n    static RemoveConcept(concept) {\n        for (var i = 0; i < this.conceptsSyncArray.length; i++) {\n            if (this.conceptsSyncArray[i].id == concept.id) {\n                this.conceptsSyncArray.splice(i, 1);\n            }\n        }\n    }\n    static SyncDataOnline() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let conceptsArray = this.conceptsSyncArray.slice();\n                let connectionsArray = this.connectionSyncArray.slice();\n                this.connectionSyncArray = [];\n                this.conceptsSyncArray = [];\n                let toSyncConcepts = [];\n                for (let i = 0; i < conceptsArray.length; i++) {\n                    //if(!conceptsArray[i].isSynced){\n                    toSyncConcepts.push(conceptsArray[i]);\n                    //}\n                    // this is used to denote that the local concept has already been synced with the online db\n                    yield LocalConceptsData.UpdateConceptSyncStatus(conceptsArray[i].id);\n                }\n                //if(connectionsArray.length > 0){\n                yield this.UpdateConceptListToIncludeRelatedConcepts(connectionsArray, toSyncConcepts);\n                let result = yield CreateTheGhostConceptApi(toSyncConcepts, connectionsArray);\n                let concepts = result.concepts;\n                let connections = result.connections;\n                for (let i = 0; i < concepts.length; i++) {\n                    LocalConceptsData.AddPermanentConcept(concepts[i]);\n                }\n                for (let i = 0; i < connections.length; i++) {\n                    LocalConnectionData.AddPermanentConnection(connections[i]);\n                }\n                //}\n                return conceptsArray;\n            }\n            catch (error) {\n                throw error;\n            }\n        });\n    }\n    //  static async  SyncDataOnline(){\n    //     if(this.conceptsSyncArray.length > 0){\n    //         let conceptsArray = this.conceptsSyncArray.slice();\n    //         this.conceptsSyncArray = [];\n    //         let concepts = await CreateTheGhostConceptApi(conceptsArray);\n    //         for(let i =0 ; i< concepts.length; i++){\n    //             LocalSyncData.ghostIdMap.set(concepts[i].ghostId,concepts[i].id);\n    //             LocalConceptsData.AddPermanentConcept(concepts[i]);\n    //         }\n    //     }\n    //      if(this.connectionSyncArray.length > 0){\n    //         // for(let i =0 ; i<this.connectionSyncArray.length ; i++){\n    //         //     console.log(\"create the connection in backend\", this.connectionSyncArray[i].ofTheConceptId + \"====\" + this.connectionSyncArray[i].toTheConceptId);\n    //         // }\n    //         let connectionsArray = this.connectionSyncArray.slice();\n    //         this.ConvertGhostIdsInConnections(connectionsArray);\n    //         this.connectionSyncArray = [];\n    //         await CreateTheGhostConnectionApi(connectionsArray);\n    //     }\n    //     return \"done\";\n    //  }\n    static ConvertGhostIdsInConnections(connectionArray) {\n        var _a, _b, _c;\n        for (let i = 0; i < connectionArray.length; i++) {\n            let ofTheConceptId = connectionArray[i].ofTheConceptId;\n            let toTheConceptId = connectionArray[i].toTheConceptId;\n            let typeId = connectionArray[i].typeId;\n            let newOfTheConceptId = (_a = LocalSyncData.ghostIdMap.get(ofTheConceptId)) !== null && _a !== void 0 ? _a : ofTheConceptId;\n            let newToTheConceptId = (_b = LocalSyncData.ghostIdMap.get(toTheConceptId)) !== null && _b !== void 0 ? _b : toTheConceptId;\n            let newTypeId = (_c = LocalSyncData.ghostIdMap.get(typeId)) !== null && _c !== void 0 ? _c : typeId;\n            connectionArray[i].ofTheConceptId = newOfTheConceptId;\n            connectionArray[i].toTheConceptId = newToTheConceptId;\n            connectionArray[i].typeId = newTypeId;\n        }\n    }\n    static UpdateConceptListToIncludeRelatedConcepts(connectionArray, conceptsArray) {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (let i = 0; i < connectionArray.length; i++) {\n                let ofTheConceptId = connectionArray[i].ofTheConceptId;\n                let toTheConceptId = connectionArray[i].toTheConceptId;\n                let typeId = connectionArray[i].typeId;\n                if (ofTheConceptId < 0) {\n                    let ofTheConcept = this.CheckIfTheConceptIdExists(ofTheConceptId, conceptsArray);\n                    if (ofTheConcept.id == 0) {\n                        ofTheConcept = yield LocalConceptsData.GetConceptByGhostId(ofTheConceptId);\n                        if (ofTheConcept.id != 0) {\n                            if (ofTheConcept.id != ofTheConcept.ghostId) {\n                                connectionArray[i].ofTheConceptId = ofTheConcept.id;\n                            }\n                        }\n                        else {\n                            ofTheConcept = yield LocalConceptsData.GetConcept(ofTheConceptId);\n                            // if this has already been synced before and is a composition type then do not send it again\n                            // if(!ofTheConcept.isSynced && !ofTheConcept.isComposition){\n                            this.AddConceptIfDoesNotExist(ofTheConcept, conceptsArray);\n                            //   }\n                        }\n                    }\n                }\n                if (toTheConceptId < 0) {\n                    let toTheConcept = this.CheckIfTheConceptIdExists(toTheConceptId, conceptsArray);\n                    if (toTheConcept.id == 0) {\n                        toTheConcept = yield LocalConceptsData.GetConceptByGhostId(toTheConceptId);\n                        if (toTheConcept.id != 0) {\n                            if (toTheConcept.id != toTheConcept.ghostId) {\n                                connectionArray[i].toTheConceptId = toTheConcept.id;\n                            }\n                        }\n                        else {\n                            toTheConcept = yield LocalConceptsData.GetConcept(toTheConceptId);\n                            // if this has already been synced before and is a composition type then do not send it again\n                            //   if(!toTheConcept.isSynced && !toTheConcept.isComposition){\n                            this.AddConceptIfDoesNotExist(toTheConcept, conceptsArray);\n                            //   }\n                        }\n                    }\n                }\n                if (typeId < 0) {\n                    let type = this.CheckIfTheConceptIdExists(typeId, conceptsArray);\n                    if (type.id == 0) {\n                        type = yield LocalConceptsData.GetConceptByGhostId(typeId);\n                        if (type.id != 0) {\n                            if (type.id != type.ghostId) {\n                                connectionArray[i].typeId = type.id;\n                            }\n                        }\n                        else {\n                            type = yield LocalConceptsData.GetConcept(typeId);\n                            // if this has already been synced before and is a composition type then do not send it again\n                            //    if(!type.isSynced && !type.isComposition){\n                            this.AddConceptIfDoesNotExist(type, conceptsArray);\n                            //    }\n                        }\n                    }\n                }\n            }\n        });\n    }\n    static AddConceptIfDoesNotExist(concept, conceptList = []) {\n        let exists = false;\n        for (let i = 0; i < conceptList.length; i++) {\n            if (concept.ghostId == conceptList[i].ghostId) {\n                exists = true;\n            }\n        }\n        if (!exists) {\n            conceptList.push(concept);\n        }\n    }\n    static CheckIfTheConceptIdExists(id, conceptList = []) {\n        let returnConcept = CreateDefaultLConcept();\n        for (let i = 0; i < conceptList.length; i++) {\n            if (id == conceptList[i].ghostId || id == conceptList[i].id) {\n                returnConcept = conceptList[i];\n            }\n        }\n        return returnConcept;\n    }\n    static AddConnection(connection) {\n        this.connectionSyncArray.push(connection);\n    }\n    static RemoveConnection(connection) {\n        for (var i = 0; i < this.connectionSyncArray.length; i++) {\n            if (this.connectionSyncArray[i].id == connection.id) {\n                this.connectionSyncArray.splice(i, 1);\n            }\n        }\n    }\n    static RemoveConnectionById(connectionId) {\n        for (var i = 0; i < this.connectionSyncArray.length; i++) {\n            if (this.connectionSyncArray[i].id == connectionId) {\n                this.connectionSyncArray.splice(i, 1);\n            }\n        }\n    }\n    static syncDataLocalDb() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.conceptsSyncArray.length > 0) {\n                for (let i = 0; i < this.conceptsSyncArray.length; i++) {\n                    UpdateToDatabase(\"localconcept\", this.conceptsSyncArray[i]);\n                }\n                this.conceptsSyncArray = [];\n            }\n            if (this.connectionSyncArray.length > 0) {\n                for (let i = 0; i < this.connectionSyncArray.length; i++) {\n                    UpdateToDatabase(\"localconnection\", this.connectionSyncArray[i]);\n                }\n                this.connectionSyncArray = [];\n            }\n            return \"done\";\n        });\n    }\n}\nLocalSyncData.conceptsSyncArray = [];\nLocalSyncData.connectionSyncArray = [];\nLocalSyncData.ghostIdMap = new Map();\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { UpdateToDatabase } from \"../../Database/indexdblocal\";\nimport { removeFromDatabase } from \"../../Database/indexdblocal\";\nimport { ConvertFromLConnectionToConnection } from \"../../Services/Local/ConvertFromLConnectionToConnection\";\nimport { ConnectionData } from \"../ConnectionData\";\nimport { IdentifierFlags } from \"../IdentifierFlags\";\nimport { LocalSyncData } from \"./LocalSyncData\";\nexport class LocalConnectionData {\n    constructor() {\n        this.name = \"Connection Array\";\n    }\n    static CheckContains(connection) {\n        var contains = false;\n        for (var i = 0; i < this.connectionArray.length; i++) {\n            if (this.connectionArray[i].id == connection.id) {\n                contains = true;\n            }\n        }\n        return contains;\n    }\n    static AddConnection(connection) {\n        var contains = this.CheckContains(connection);\n        if (contains) {\n            this.RemoveConnection(connection);\n        }\n        if (connection.id != 0) {\n            UpdateToDatabase(\"localconnection\", connection);\n        }\n        this.connectionArray.push(connection);\n    }\n    static AddConnectionToMemory(connection) {\n        var contains = this.CheckContains(connection);\n        if (contains) {\n            this.RemoveConnection(connection);\n        }\n        this.connectionArray.push(connection);\n    }\n    static AddToDictionary(connection) {\n        this.connectionDictionary[connection.id] = connection;\n    }\n    static RemoveConnection(connection) {\n        for (var i = 0; i < this.connectionArray.length; i++) {\n            if (this.connectionArray[i].id == connection.id) {\n                this.connectionArray.splice(i, 1);\n            }\n        }\n        if (connection.id != 0) {\n            //  removeFromDatabase(\"connection\",connection.id);\n        }\n    }\n    static RemoveConnectionById(connectionId) {\n        for (var i = 0; i < this.connectionArray.length; i++) {\n            if (this.connectionArray[i].id == connectionId) {\n                this.connectionArray.splice(i, 1);\n            }\n        }\n        LocalSyncData.RemoveConnectionById(connectionId);\n    }\n    static AddPermanentConnection(connection) {\n        if (connection.id > 0) {\n            removeFromDatabase(\"localconnection\", connection.ghostId);\n            ConnectionData.AddConnection(ConvertFromLConnectionToConnection(connection));\n        }\n    }\n    static GetConnection(id) {\n        var myConcept;\n        myConcept = null;\n        for (var i = 0; i < this.connectionArray.length; i++) {\n            if (this.connectionArray[i].id == id) {\n                myConcept = this.connectionArray[i];\n            }\n        }\n        return myConcept;\n    }\n    static waitForDataToLoad() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                this.checkFlag(resolve);\n                setTimeout(() => {\n                    reject(\"not\");\n                }, 25000);\n            });\n        });\n    }\n    static checkFlag(resolve) {\n        if (IdentifierFlags.isLocalConnectionLoaded) {\n            return resolve(\"done\");\n        }\n        else {\n            setTimeout(LocalConnectionData.checkFlag, 1000, resolve);\n        }\n    }\n    ;\n    static GetConnectionsOfCompositionLocal(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var connectionList = [];\n            try {\n                var data = yield this.waitForDataToLoad();\n                for (var i = 0; i < this.connectionArray.length; i++) {\n                    if (this.connectionArray[i].typeId == id) {\n                        connectionList.push(this.connectionArray[i]);\n                    }\n                }\n                return connectionList;\n            }\n            catch (exception) {\n                return connectionList;\n            }\n        });\n    }\n    static GetConnectionOfCompositionAndTypeLocal(typeId, ofTheConceptId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var connectionList = [];\n            try {\n                var data = yield this.waitForDataToLoad();\n                console.log(\"this is the connections\", this.connectionArray, typeId, ofTheConceptId);\n                for (var i = 0; i < this.connectionArray.length; i++) {\n                    if (this.connectionArray[i].typeId == typeId && this.connectionArray[i].ofTheConceptId == ofTheConceptId) {\n                        connectionList.push(this.connectionArray[i]);\n                    }\n                }\n                return connectionList;\n            }\n            catch (exception) {\n                return connectionList;\n            }\n        });\n    }\n    getName() {\n        return this.name;\n    }\n}\nLocalConnectionData.connectionArray = [];\nLocalConnectionData.connectionDictionary = [];\n","import { Connection } from \"../../DataStructures/Connection\";\nexport function ConvertFromLConnectionToConnection(lconnection) {\n    let connection = new Connection(0, 0, 0, 0, 0, 0, 0);\n    connection.ofTheConceptId = lconnection.ofTheConceptId;\n    connection.toTheConceptId = lconnection.toTheConceptId;\n    connection.typeId = lconnection.typeId;\n    connection.orderId = lconnection.orderId;\n    connection.id = lconnection.id;\n    return connection;\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { removeFromDatabase, UpdateToDatabase } from \"../../Database/indexdblocal\";\nimport { LocalBinaryTree } from \"./LocalBinaryTree\";\nimport { LocalBinaryCharacterTree } from \"./LocalBinaryCharacterTree\";\nimport { LocalBinaryTypeTree } from \"./LocalBinaryTypeTree\";\nimport { CreateDefaultLConcept } from \"../../Services/Local/CreateDefaultLConcept\";\nimport { ConceptsData } from \"../ConceptData\";\nimport { LocalGhostIdTree } from \"./LocalGhostIdTree\";\nimport { LocalConnectionData } from \"./LocalConnectionData\";\nimport { LocalSyncData } from \"./LocalSyncData\";\nexport class LocalConceptsData {\n    constructor() {\n        this.name = \"conceptsArray\";\n    }\n    static AddConcept(concept) {\n        if (concept.id != 0) {\n            UpdateToDatabase(\"localconcept\", concept);\n            LocalBinaryTree.addConceptToTree(concept);\n            LocalBinaryCharacterTree.addConceptToTree(concept);\n            LocalBinaryTypeTree.addConceptToTree(concept);\n            this.localconceptsArray.push(concept);\n        }\n    }\n    static AddPermanentConcept(concept) {\n        if (concept.id != 0) {\n            LocalBinaryTree.removeNodeFromTree(concept.ghostId);\n            LocalBinaryCharacterTree.removeConceptType(concept.characterValue, concept.ghostId);\n            LocalBinaryTypeTree.removeConceptType(concept.typeId, concept.ghostId);\n            LocalGhostIdTree.addConceptToTree(concept);\n            let removeData = removeFromDatabase(\"localconcept\", concept.ghostId);\n            ConceptsData.AddConcept(concept);\n        }\n    }\n    static RemoveConcept(concept) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                if (concept.id != 0) {\n                    LocalBinaryTree.removeNodeFromTree(concept.ghostId);\n                    LocalBinaryCharacterTree.removeConceptType(concept.characterValue, concept.ghostId);\n                    LocalBinaryTypeTree.removeConceptType(concept.typeId, concept.ghostId);\n                    yield removeFromDatabase(\"localconcept\", concept.ghostId);\n                }\n            }\n            catch (error) {\n                throw error;\n            }\n        });\n    }\n    static RemoveConceptById(conceptId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let concept = yield LocalConceptsData.GetConcept(conceptId);\n                if (concept.id != 0) {\n                    LocalBinaryTree.removeNodeFromTree(conceptId);\n                    LocalBinaryCharacterTree.removeConceptType(concept.characterValue, concept.ghostId);\n                    LocalBinaryTypeTree.removeConceptType(concept.typeId, concept.ghostId);\n                    LocalSyncData.RemoveConcept(concept);\n                    // await removeFromDatabase(\"localconcept\", concept.ghostId);\n                }\n            }\n            catch (error) {\n                throw error;\n            }\n        });\n    }\n    static AddConceptToMemory(concept) {\n        if (concept.id != 0) {\n            LocalBinaryTree.addConceptToTree(concept);\n            LocalBinaryCharacterTree.addConceptToTree(concept);\n            LocalBinaryTypeTree.addConceptToTree(concept);\n        }\n    }\n    static GetConcept(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var myConcept = CreateDefaultLConcept();\n            var node = yield LocalBinaryTree.getNodeFromTree(id);\n            if (node === null || node === void 0 ? void 0 : node.value) {\n                var returnedConcept = node.value;\n                if (returnedConcept) {\n                    myConcept = returnedConcept;\n                }\n            }\n            return myConcept;\n        });\n    }\n    static UpdateConceptSyncStatus(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            LocalBinaryTree.updateSyncStatus(id);\n        });\n    }\n    static GetConceptByGhostId(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var myConcept = CreateDefaultLConcept();\n            var node = yield LocalGhostIdTree.getNodeFromTree(id);\n            if (node === null || node === void 0 ? void 0 : node.value) {\n                var returnedConcept = node.value;\n                if (returnedConcept) {\n                    myConcept = returnedConcept;\n                }\n            }\n            return myConcept;\n        });\n    }\n    static GetConceptByCharacter(characterValue) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var concept = CreateDefaultLConcept();\n            //  for(var i=0; i<this.conceptsArray.length; i++){\n            //      if(this.conceptsArray[i].characterValue == characterValue){\n            //         concept = this.conceptsArray[i];\n            //      }\n            //  }\n            var Node = LocalBinaryCharacterTree.getNodeFromTree(characterValue);\n            if (Node) {\n                concept = Node.value;\n            }\n            return concept;\n        });\n    }\n    static GetConceptByCharacterAndTypeLocal(character_value, typeId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var concept = CreateDefaultLConcept();\n            // let conceptList:Concept[] = await this.GetConceptsByTypeId(typeId);\n            // for(var i=0;i<conceptList.length; i++){\n            //     if(character_value == conceptList[i].characterValue){\n            //         concept = conceptList[i];\n            //     }\n            // }\n            var Node = yield LocalBinaryCharacterTree.getCharacterAndTypeFromTree(character_value, typeId);\n            if (Node) {\n                concept = Node.value;\n            }\n            return concept;\n        });\n    }\n    static GetConceptByCharacterAndCategoryLocal(character_value, categoryId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var concept = CreateDefaultLConcept();\n            var Node = yield LocalBinaryCharacterTree.getCharacterAndCategoryFromTree(character_value, categoryId);\n            if (Node) {\n                concept = Node.value;\n            }\n            return concept;\n        });\n    }\n    static GetConceptsByTypeId(typeId) {\n        var myConcept;\n        let ConceptList = [];\n        myConcept = null;\n        for (var i = 0; i < this.localconceptsArray.length; i++) {\n            if (this.localconceptsArray[i].typeId == typeId) {\n                ConceptList.push(this.localconceptsArray[i]);\n            }\n        }\n        return ConceptList;\n    }\n    static GetConceptsByTypeIdAndUser(typeId, userId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var myConcept;\n            let ConceptList = [];\n            // myConcept = null;\n            //  for(var i=0; i<this.conceptsArray.length; i++){\n            //      if(this.conceptsArray[i].typeId == typeId && this.conceptsArray[i].userId == userId){\n            //          ConceptList.push(this.conceptsArray[i]);\n            //      }\n            //  }\n            ConceptList = yield LocalBinaryTypeTree.getTypeVariantsFromTreeWithUserId(typeId, userId);\n            return ConceptList;\n        });\n    }\n    static ClearData() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.localconceptsArray = [];\n            LocalConnectionData.connectionArray = [];\n        });\n    }\n    getName() {\n        return this.name;\n    }\n}\nLocalConceptsData.localconceptsArray = [];\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConceptsData } from \"./../DataStructures/ConceptData\";\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { GetRequestHeader } from \"../Services/Security/GetRequestHeader\";\nimport { CreateDefaultConcept } from \"../app\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\n/**\n * This function helps you get concept from the id. This can only be positive.\n * @param id The id that you want to get the concept of\n * @returns\n */\nexport function GetConcept(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let result = CreateDefaultConcept();\n            var conceptUse = yield ConceptsData.GetConcept(id);\n            let isNpc = ConceptsData.GetNpc(id);\n            if (conceptUse.id != 0 || isNpc) {\n                return conceptUse;\n            }\n            else {\n                var header = GetRequestHeader();\n                console.log(\"this is the url\", BaseUrl.GetConceptUrl());\n                const formdata = new FormData();\n                formdata.append(\"id\", id.toString());\n                const response = yield fetch(BaseUrl.GetConceptUrl(), {\n                    method: 'POST',\n                    body: formdata\n                });\n                if (response.ok) {\n                    result = (yield response.json());\n                    if (result.id > 0) {\n                        ConceptsData.AddConcept(result);\n                    }\n                    else {\n                        ConceptsData.AddNpc(id);\n                    }\n                }\n                else {\n                    console.log(\"Get the concept error\", response.status);\n                    HandleHttpError(response);\n                }\n                return result;\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Get the concept error message: ', error.message);\n            }\n            else {\n                console.log('Get the concept unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetConceptUrl());\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConnectionData } from '../DataStructures/ConnectionData';\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { CheckForConnectionDeletion } from '../Services/CheckForConnectionDeletion';\nimport { GetRequestHeader } from '../Services/Security/GetRequestHeader';\nimport { HandleHttpError, HandleInternalError } from '../Services/Common/ErrorPosting';\nexport function GetAllConnectionsOfComposition(composition_id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var connectionList = [];\n        //connectionList = await ConnectionData.GetConnectionsOfCompositionLocal(composition_id);\n        connectionList = yield ConnectionData.GetConnectionsOfConcept(composition_id);\n        if (connectionList.length == 0) {\n            var connectionListString = yield GetAllConnectionsOfCompositionOnline(composition_id);\n            connectionList = connectionListString;\n        }\n        else {\n            var newConnectionsString = yield GetAllConnectionsOfCompositionOnline(composition_id);\n            var newConnections = newConnectionsString;\n            CheckForConnectionDeletion(newConnections, connectionList);\n            connectionList = newConnections;\n        }\n        return connectionList;\n    });\n}\nexport function GetAllConnectionsOfCompositionOnline(composition_id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var connectionList = [];\n        try {\n            var header = GetRequestHeader('application/json');\n            const myHeaders = new Headers();\n            const formdata = new FormData();\n            formdata.append(\"composition_id\", composition_id.toString());\n            const response = yield fetch(BaseUrl.GetAllConnectionsOfCompositionUrl(), {\n                method: 'POST',\n                headers: myHeaders,\n                body: formdata\n            });\n            console.log(\"this is getting connection from online\", BaseUrl.GetAllConnectionsOfCompositionUrl(), composition_id);\n            if (!response.ok) {\n                HandleHttpError(response);\n                throw new Error(`Error! status: ${response.status}`);\n            }\n            const result = yield response.json();\n            for (var i = 0; i < result.length; i++) {\n                ConnectionData.AddConnection(result[i]);\n                connectionList.push(result[i]);\n            }\n            return connectionList;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Get all connection of composition error : ', error.message);\n            }\n            else {\n                console.log('Get all connection of composition error : ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetAllConnectionsOfCompositionUrl());\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetConcept } from \"../Api/GetConcept\";\nimport { GetAllConnectionsOfComposition } from \"../Api/GetAllConnectionsOfComposition\";\nimport { ConceptsData } from \"../DataStructures/ConceptData\";\nimport { ConnectionData } from \"../DataStructures/ConnectionData\";\nimport { GetTheConcept } from \"../app\";\nexport function GetCompositionById(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let connectionList = [];\n        let returnOutput = {};\n        let connectionListString = yield GetAllConnectionsOfComposition(id);\n        connectionList = connectionListString;\n        let compositionList = [];\n        for (let i = 0; i < connectionList.length; i++) {\n            if (!compositionList.includes(connectionList[i].ofTheConceptId)) {\n                compositionList.push(connectionList[i].ofTheConceptId);\n            }\n        }\n        return { \"connectionList\": connectionList, \"compositionList\": compositionList };\n    });\n}\n/**\n * ## format JUSTDATA ##\n * this function builds the composition with the main id as the point of building.\n * @param id id of the main composition that you want to build\n * @param connectionList  list of connections\n * @param compositionList list of of_the_concept_ids for all the connections.\n * @returns\n */\nexport function RecursiveFetchBuildLayer(id, connectionList, compositionList) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        let returnOutput = {};\n        let concept = yield ConceptsData.GetConcept(id);\n        if (concept.id == 0 && id != null && id != undefined) {\n            let conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        let output = yield recursiveFetch(id, connectionList, compositionList);\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        returnOutput[mainString] = output;\n        return returnOutput;\n    });\n}\n/**\n * ## format DATAID ##\n * this function builds the composition with the main id as the point of building.\n * @param id id of the main composition that you want to build\n * @param connectionList  list of connections\n * @param compositionList list of of_the_concept_ids for all the connections.\n * @returns\n */\nexport function RecursiveFetchBuildLayerDataId(id, connectionList, compositionList) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        let returnOutput = {};\n        let concept = yield ConceptsData.GetConcept(id);\n        if (concept.id == 0 && id != null && id != undefined) {\n            let conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        let output = yield recursiveFetch(id, connectionList, compositionList);\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        returnOutput[mainString] = output;\n        let FinalReturn = {};\n        FinalReturn['created_at'] = concept.entryTimeStamp;\n        FinalReturn['data'] = returnOutput;\n        FinalReturn['id'] = id;\n        return FinalReturn;\n    });\n}\n/**\n * ## format Normal ##\n * this function builds the composition with the main id as the point of building.\n * @param id id of the main composition that you want to build\n * @param connectionList  list of connections\n * @param compositionList list of of_the_concept_ids for all the connections.\n * @returns\n */\nexport function RecursiveFetchBuildLayerNormal(id, connectionList, compositionList) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        let returnOutput = {};\n        let concept = yield ConceptsData.GetConcept(id);\n        if (concept.id == 0 && id != null && id != undefined) {\n            let conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        let output = yield recursiveFetchConceptNormal(concept, connectionList, compositionList);\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        returnOutput[mainString] = output;\n        return returnOutput;\n    });\n}\n/**\n * ## format JUSTDATA ##\n * this function builds the composition with the main id as the point of building.\n * This just requires the id\n * @param id id of the main composition that you want to build\n * @param connectionList  list of connections\n * @param compositionList list of of_the_concept_ids for all the connections.\n * @returns\n */\nexport function GetComposition(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        let connectionList = [];\n        let returnOutput = {};\n        let connectionListString = yield GetAllConnectionsOfComposition(id);\n        connectionList = connectionListString;\n        console.log(\"this is the connection list online\", connectionList);\n        //connectionList = ConnectionData.GetConnectionsOfComposition(id);\n        let compositionList = [];\n        for (let i = 0; i < connectionList.length; i++) {\n            if (!compositionList.includes(connectionList[i].ofTheConceptId)) {\n                compositionList.push(connectionList[i].ofTheConceptId);\n            }\n        }\n        let concept = yield ConceptsData.GetConcept(id);\n        if (concept.id == 0 && id != null && id != undefined) {\n            let conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        let output = yield recursiveFetch(id, connectionList, compositionList);\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        returnOutput[mainString] = output;\n        return returnOutput;\n    });\n}\nexport function GetCompositionWithAllIds(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        let connectionList = [];\n        let returnOutput = {};\n        let connectionListString = yield GetAllConnectionsOfComposition(id);\n        connectionList = connectionListString;\n        //connectionList = ConnectionData.GetConnectionsOfComposition(id);\n        let compositionList = [];\n        for (let i = 0; i < connectionList.length; i++) {\n            if (!compositionList.includes(connectionList[i].ofTheConceptId)) {\n                compositionList.push(connectionList[i].ofTheConceptId);\n            }\n        }\n        let concept = yield ConceptsData.GetConcept(id);\n        if (concept.id == 0 && id != null && id != undefined) {\n            let conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        let output = yield recursiveFetchWithSubCompositions(id, connectionList, compositionList);\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        returnOutput[mainString] = output;\n        return returnOutput;\n    });\n}\n/**\n * ### Format JUSTDATA ###\n * This function just builds data from the memory.\n * This is a function that takes on all the concepts and connections of the concept (as a composition ) and builds\n * it into a json data.\n * @param id this id is just used to get all the composition data from the concepts and connections in memory\n * @returns\n */\nexport function GetCompositionFromMemory(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        let connectionList = [];\n        let returnOutput = {};\n        //connectionList = await ConnectionData.GetConnectionsOfConcept(id);\n        connectionList = yield ConnectionData.GetConnectionsOfCompositionLocal(id);\n        //connectionList = ConnectionData.GetConnectionsOfComposition(id);\n        let compositionList = [];\n        for (let i = 0; i < connectionList.length; i++) {\n            if (!compositionList.includes(connectionList[i].ofTheConceptId)) {\n                compositionList.push(connectionList[i].ofTheConceptId);\n            }\n        }\n        let concept = yield ConceptsData.GetConcept(id);\n        if (concept.id == 0 && id != null && id != undefined) {\n            let conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        let output = yield recursiveFetchConcept(concept, connectionList, compositionList);\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        returnOutput[mainString] = output;\n        return returnOutput;\n    });\n}\n/**\n * ### Format Normal ###\n * This function just builds data from the memory.\n * This is a function that takes on all the concepts and connections of the concept (as a composition ) and builds\n * it into a json data.\n * @param id this id is just used to get all the composition data from the concepts and connections in memory\n * @returns\n */\nexport function GetCompositionFromMemoryNormal(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        let connectionList = [];\n        let returnOutput = {};\n        //connectionList = await ConnectionData.GetConnectionsOfConcept(id);\n        connectionList = yield ConnectionData.GetConnectionsOfCompositionLocal(id);\n        //connectionList = ConnectionData.GetConnectionsOfComposition(id);\n        let compositionList = [];\n        for (let i = 0; i < connectionList.length; i++) {\n            if (!compositionList.includes(connectionList[i].ofTheConceptId)) {\n                compositionList.push(connectionList[i].ofTheConceptId);\n            }\n        }\n        let concept = yield ConceptsData.GetConcept(id);\n        if (concept.id == 0 && id != null && id != undefined) {\n            let conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        let output = yield recursiveFetchConceptNormal(concept, connectionList, compositionList);\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        returnOutput[mainString] = output;\n        return returnOutput;\n    });\n}\n/**\n * ### Format DATAIDDATE ####\n * Gets data just from memory\n * @param id\n * @returns\n */\nexport function GetCompositionWithIdFromMemory(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        let connectionList = [];\n        let returnOutput = {};\n        // connectionList = await ConnectionData.GetConnectionsOfConcept(id);\n        connectionList = yield ConnectionData.GetConnectionsOfCompositionLocal(id);\n        let compositionList = [];\n        for (let i = 0; i < connectionList.length; i++) {\n            if (!compositionList.includes(connectionList[i].ofTheConceptId)) {\n                compositionList.push(connectionList[i].ofTheConceptId);\n            }\n        }\n        let concept = yield ConceptsData.GetConcept(id);\n        if (concept.id == 0 && id != null && id != undefined) {\n            let conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        let output = yield recursiveFetchConcept(concept, connectionList, compositionList);\n        // let output = await recursiveFetchConceptSingleLoop(concept, connectionList,compositionList );\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        returnOutput[mainString] = output;\n        let FinalReturn = {};\n        FinalReturn['created_at'] = concept.entryTimeStamp;\n        FinalReturn['data'] = returnOutput;\n        FinalReturn['id'] = id;\n        return FinalReturn;\n    });\n}\n/**\n * ### Format DATAIDDATE ####\n * ### experimental ####\n * This is the new format that needs to work with a single or max two loops\n * @param id the id whose composition needs to be created\n * @returns\n */\nexport function GetCompositionWithIdFromMemoryNew(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        let connectionList = [];\n        let returnOutput = {};\n        //connectionList = await ConnectionData.GetConnectionsOfConcept(id);\n        connectionList = yield ConnectionData.GetConnectionsOfCompositionLocal(id);\n        let compositionList = [];\n        for (let i = 0; i < connectionList.length; i++) {\n            if (!compositionList.includes(connectionList[i].ofTheConceptId)) {\n                compositionList.push(connectionList[i].ofTheConceptId);\n            }\n        }\n        let concept = yield ConceptsData.GetConcept(id);\n        if (concept.id == 0 && id != null && id != undefined) {\n            console.log(\"this concept you cannot find \", id);\n            let conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        let startTime = new Date().getTime();\n        //console.log(\"this is the connection list which has to be looped\", connectionList);\n        let output = yield recursiveFetchConceptSingleLoop(concept, connectionList, compositionList);\n        console.log(\"this is the time for the data to be made\", new Date().getTime() - startTime);\n        // let output = await recursiveFetchConceptSingleLoop(concept, connectionList,compositionList );\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        returnOutput = output;\n        let FinalReturn = {};\n        FinalReturn['created_at'] = concept.entryTimeStamp;\n        FinalReturn['data'] = returnOutput;\n        FinalReturn['id'] = id;\n        return FinalReturn;\n    });\n}\n/**\n * ### Format DATAIDDATE #####\n * ### This just returns composition from memory and not from anywhere else.\n * @param id\n * @returns\n */\nexport function GetCompositionWithIdAndDateFromMemory(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        let connectionList = [];\n        let returnOutput = {};\n        connectionList = yield ConnectionData.GetConnectionsOfCompositionLocal(id);\n        //connectionList = await ConnectionData.GetConnectionsOfConcept(id);\n        let compositionList = [];\n        for (let i = 0; i < connectionList.length; i++) {\n            if (!compositionList.includes(connectionList[i].ofTheConceptId)) {\n                compositionList.push(connectionList[i].ofTheConceptId);\n            }\n        }\n        let concept = yield ConceptsData.GetConcept(id);\n        if (concept.id == 0 && id != null && id != undefined) {\n            let conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        let output = yield recursiveFetch(id, connectionList, compositionList);\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        returnOutput[mainString] = output;\n        let FinalReturn = {};\n        FinalReturn['data'] = returnOutput;\n        FinalReturn['id'] = id;\n        FinalReturn['created_at'] = concept.entryTimeStamp;\n        return FinalReturn;\n    });\n}\nexport function GetCompositionWithIdFromMemoryFromConnections(id_1) {\n    return __awaiter(this, arguments, void 0, function* (id, connectionList = []) {\n        var _a, _b;\n        let returnOutput = {};\n        //connectionList = await ConnectionData.GetConnectionsOfCompositionLocal(id);\n        let compositionList = [];\n        for (let i = 0; i < connectionList.length; i++) {\n            if (!compositionList.includes(connectionList[i].ofTheConceptId)) {\n                compositionList.push(connectionList[i].ofTheConceptId);\n            }\n        }\n        let concept = yield ConceptsData.GetConcept(id);\n        if (concept.id == 0 && id != null && id != undefined) {\n            let conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        let output = yield recursiveFetch(id, connectionList, compositionList);\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        returnOutput[mainString] = output;\n        let FinalReturn = {};\n        FinalReturn['data'] = returnOutput;\n        FinalReturn['id'] = id;\n        return FinalReturn;\n    });\n}\n/**\n * #### Format DATAID ####\n * ## This will return the composition even if it is not in the local memory ##\n * @param id\n * @returns\n */\nexport function GetCompositionWithId(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        let connectionList = [];\n        let returnOutput = {};\n        let connectionListString = yield GetAllConnectionsOfComposition(id);\n        connectionList = connectionListString;\n        let compositionList = [];\n        for (let i = 0; i < connectionList.length; i++) {\n            if (!compositionList.includes(connectionList[i].ofTheConceptId)) {\n                compositionList.push(connectionList[i].ofTheConceptId);\n            }\n        }\n        let concept = yield ConceptsData.GetConcept(id);\n        if (concept.id == 0 && id != null && id != undefined) {\n            let conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        let output = yield recursiveFetch(id, connectionList, compositionList);\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        returnOutput[mainString] = output;\n        let FinalReturn = {};\n        FinalReturn['data'] = returnOutput;\n        FinalReturn['id'] = id;\n        return FinalReturn;\n    });\n}\n/**\n * ## Format justdata ###\n * ## This contains a concept in the parameter so that you dont have to again find the concept ##\n * This function takes concepts and connections and then builds a json.\n * @param concept The concept that needs to get other concepts that are inside of it.\n * @param connectionList List of connections that are available in the composition. We have to loop over it.\n * @param compositionList Composition list is the list of concepts that have connections inside of them.\n * @param visitedConcepts This is a checking mechanism to not go in loops. So preferably pass an empty array.\n * @returns\n */\nexport function recursiveFetchConcept(concept_1, connectionList_1, compositionList_1) {\n    return __awaiter(this, arguments, void 0, function* (concept, connectionList, compositionList, visitedConcepts = []) {\n        var _a, _b, _c, _d;\n        let output = {};\n        let arroutput = [];\n        let id = concept.id;\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        if (!compositionList.includes(id)) {\n            return concept === null || concept === void 0 ? void 0 : concept.characterValue;\n        }\n        else {\n            if (visitedConcepts.includes(id)) {\n                return \"\";\n            }\n            else {\n                visitedConcepts.push(id);\n            }\n            for (let i = 0; i < connectionList.length; i++) {\n                if (connectionList[i].ofTheConceptId == id) {\n                    if (id != connectionList[i].toTheConceptId) {\n                        let toConceptId = connectionList[i].toTheConceptId;\n                        let toConcept = yield ConceptsData.GetConcept(toConceptId);\n                        if ((toConcept == null || toConcept.id == 0) && toConceptId != null && toConceptId != undefined) {\n                            let conceptString = yield GetConcept(toConceptId);\n                            toConcept = conceptString;\n                        }\n                        if (toConcept.id != 0) {\n                            if ((toConcept === null || toConcept === void 0 ? void 0 : toConcept.type) == null) {\n                                let toConceptTypeId = toConcept.typeId;\n                                let toConceptType = yield ConceptsData.GetConcept(toConceptTypeId);\n                                toConcept.type = toConceptType;\n                                if (toConceptType == null && toConceptTypeId != null && toConceptTypeId != undefined) {\n                                    let conceptString = yield GetConcept(toConceptTypeId);\n                                    toConceptType = conceptString;\n                                    toConcept.type = toConceptType;\n                                }\n                            }\n                        }\n                        let regex = \"the_\";\n                        let localmainString = (_d = (_c = toConcept === null || toConcept === void 0 ? void 0 : toConcept.type) === null || _c === void 0 ? void 0 : _c.characterValue) !== null && _d !== void 0 ? _d : \"\";\n                        let localKey = localmainString.replace(regex, \"\");\n                        if (isNaN(Number(localKey))) {\n                            if (localKey) {\n                                const result = yield recursiveFetchConcept(toConcept, connectionList, compositionList, visitedConcepts);\n                                output[localKey] = result;\n                            }\n                        }\n                        else {\n                            const result = yield recursiveFetchConcept(toConcept, connectionList, compositionList, visitedConcepts);\n                            arroutput[localKey] = result;\n                            output = arroutput;\n                        }\n                    }\n                    else {\n                        console.log(\"this is the faulty connection \", connectionList[i]);\n                    }\n                }\n            }\n        }\n        return output;\n    });\n}\n/**\n* ## Format Normal ###\n* ## This contains a concept in the parameter so that you dont have to again find the concept ##\n* This function takes concepts and connections and then builds a json.\n* @param concept The concept that needs to get other concepts that are inside of it.\n* @param connectionList List of connections that are available in the composition. We have to loop over it.\n* @param compositionList Composition list is the list of concepts that have connections inside of them.\n* @param visitedConcepts This is a checking mechanism to not go in loops. So preferably pass an empty array.\n* @returns\n*/\nexport function recursiveFetchConceptNormal(concept_1, connectionList_1, compositionList_1) {\n    return __awaiter(this, arguments, void 0, function* (concept, connectionList, compositionList, visitedConcepts = []) {\n        var _a, _b, _c, _d;\n        let startTime = new Date().getTime();\n        let output = {};\n        let arroutput = [];\n        let id = concept.id;\n        output[\"id\"] = id;\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        if (!compositionList.includes(id)) {\n            return concept === null || concept === void 0 ? void 0 : concept.characterValue;\n        }\n        else {\n            if (visitedConcepts.includes(id)) {\n                return \"\";\n            }\n            else {\n                visitedConcepts.push(id);\n            }\n            for (let i = 0; i < connectionList.length; i++) {\n                if (connectionList[i].ofTheConceptId == id) {\n                    if (id != connectionList[i].toTheConceptId) {\n                        let toConceptId = connectionList[i].toTheConceptId;\n                        let toConcept = yield ConceptsData.GetConcept(toConceptId);\n                        if ((toConcept == null || toConcept.id == 0) && toConceptId != null && toConceptId != undefined) {\n                            let conceptString = yield GetConcept(toConceptId);\n                            toConcept = conceptString;\n                        }\n                        if (toConcept.id != 0) {\n                            if ((toConcept === null || toConcept === void 0 ? void 0 : toConcept.type) == null) {\n                                let toConceptTypeId = toConcept.typeId;\n                                let toConceptType = yield ConceptsData.GetConcept(toConceptTypeId);\n                                toConcept.type = toConceptType;\n                                if (toConceptType == null && toConceptTypeId != null && toConceptTypeId != undefined) {\n                                    let conceptString = yield GetConcept(toConceptTypeId);\n                                    toConceptType = conceptString;\n                                    toConcept.type = toConceptType;\n                                }\n                            }\n                        }\n                        let regex = \"the_\";\n                        let localmainString = (_d = (_c = toConcept === null || toConcept === void 0 ? void 0 : toConcept.type) === null || _c === void 0 ? void 0 : _c.characterValue) !== null && _d !== void 0 ? _d : \"\";\n                        let localKey = localmainString.replace(regex, \"\");\n                        if (isNaN(Number(localKey))) {\n                            if (localKey) {\n                                const result = yield recursiveFetchConcept(toConcept, connectionList, compositionList, visitedConcepts);\n                                output[localKey] = result;\n                            }\n                        }\n                        else {\n                            const result = yield recursiveFetchConcept(toConcept, connectionList, compositionList, visitedConcepts);\n                            arroutput[localKey] = result;\n                            output = arroutput;\n                        }\n                    }\n                    else {\n                        console.log(\"this is the faulty connection \", connectionList[i]);\n                    }\n                }\n            }\n        }\n        // console.log(\"second loop normal\", new Date().getTime() - startTime);\n        return output;\n    });\n}\n/**\n * ## experimental ##\n* This function takes concepts and connections and then builds a json.\n* @param concept The concept that needs to get other concepts that are inside of it.\n* @param connectionList List of connections that are available in the composition. We have to loop over it.\n* @param compositionList Composition list is the list of concepts that have connections inside of them.\n* @param visitedConcepts This is a checking mechanism to not go in loops. So preferably pass an empty array.\n* @returns\n*/\nexport function recursiveFetchConceptSingleLoop(concept_1, connectionList_1, compositionList_1) {\n    return __awaiter(this, arguments, void 0, function* (concept, connectionList, compositionList, visitedConcepts = []) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        let output = {};\n        let id = concept.id;\n        let startTime = new Date().getTime();\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        if (!compositionList.includes(id)) {\n            let myString = mainString;\n            let returnoutput = { [myString]: concept === null || concept === void 0 ? void 0 : concept.characterValue };\n            return returnoutput;\n        }\n        else {\n            if (visitedConcepts.includes(id)) {\n                return \"\";\n            }\n            else {\n                visitedConcepts.push(id);\n            }\n            for (let i = 0; i < connectionList.length; i++) {\n                let newData = yield GetTheConcept(connectionList[i].ofTheConceptId);\n                let toConcept = yield GetTheConcept(connectionList[i].toTheConceptId);\n                connectionList[i].ofConcept = newData;\n                connectionList[i].toConcept = toConcept;\n                let ofKey = newData.id;\n                let toConceptKey = (_d = (_c = toConcept === null || toConcept === void 0 ? void 0 : toConcept.type) === null || _c === void 0 ? void 0 : _c.characterValue) !== null && _d !== void 0 ? _d : \"\";\n                let regex = \"the_\";\n                let localmainString = toConceptKey;\n                let localToKey = localmainString.replace(regex, \"\");\n                if (output[ofKey] == undefined || output[ofKey] == null) {\n                    output[ofKey] = {};\n                }\n                output[ofKey][localToKey] = toConcept.characterValue;\n            }\n        }\n        let finalOutput = {};\n        for (let i = 0; i < connectionList.length; i++) {\n            let ofConcept = connectionList[i].ofConcept;\n            let toConcept = connectionList[i].toConcept;\n            let ofConceptKey = (_f = (_e = ofConcept === null || ofConcept === void 0 ? void 0 : ofConcept.type) === null || _e === void 0 ? void 0 : _e.characterValue) !== null && _f !== void 0 ? _f : \"\";\n            let toConceptKey = (_h = (_g = toConcept === null || toConcept === void 0 ? void 0 : toConcept.type) === null || _g === void 0 ? void 0 : _g.characterValue) !== null && _h !== void 0 ? _h : \"\";\n            let regex = \"the_\";\n            let localmainString = toConceptKey;\n            let localToKey = localmainString.replace(regex, \"\");\n            if (finalOutput[ofConcept.id] == undefined || finalOutput[ofConcept.id] == null) {\n                finalOutput[ofConcept.id] = {};\n            }\n            let internalOutput = finalOutput[ofConcept.id];\n            if (internalOutput[ofConceptKey] == undefined || internalOutput[ofConceptKey] == null) {\n                internalOutput[ofConceptKey] = {};\n            }\n            if (output[connectionList[i].ofTheConceptId] != undefined && output[connectionList[i].toTheConceptId] != undefined) {\n                internalOutput[ofConceptKey][localToKey] = output[toConcept.id];\n            }\n            else {\n                internalOutput[ofConceptKey][localToKey] = toConcept.characterValue;\n            }\n        }\n        return finalOutput[concept.id];\n    });\n}\n/**\n * ## Format justdata ##\n * @param id\n * @param connectionList\n * @param compositionList\n * @param visitedConcepts\n * @returns\n */\nexport function recursiveFetch(id_1, connectionList_1, compositionList_1) {\n    return __awaiter(this, arguments, void 0, function* (id, connectionList, compositionList, visitedConcepts = []) {\n        var _a, _b, _c, _d;\n        let output = {};\n        let arroutput = [];\n        if (id == 0) {\n            return null;\n        }\n        let concept = yield ConceptsData.GetConcept(id);\n        if ((concept == null || concept.id == 0) && id != null && id != undefined) {\n            let conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        if (concept.id != 0) {\n            if (concept.type == null) {\n                let toConceptTypeId = concept.typeId;\n                let toConceptType = yield ConceptsData.GetConcept(toConceptTypeId);\n                concept.type = toConceptType;\n                if (toConceptType == null && toConceptTypeId != null && toConceptTypeId != undefined) {\n                    let conceptString = yield GetConcept(toConceptTypeId);\n                    toConceptType = conceptString;\n                    concept.type = toConceptType;\n                }\n            }\n        }\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        if (!compositionList.includes(id)) {\n            return concept === null || concept === void 0 ? void 0 : concept.characterValue;\n        }\n        else {\n            if (visitedConcepts.includes(id)) {\n                return \"\";\n            }\n            else {\n                visitedConcepts.push(id);\n            }\n            for (let i = 0; i < connectionList.length; i++) {\n                let insideTime = new Date().getTime();\n                if (connectionList[i].ofTheConceptId == id) {\n                    if (id != connectionList[i].toTheConceptId) {\n                        let toConceptId = connectionList[i].toTheConceptId;\n                        let toConcept = yield ConceptsData.GetConcept(toConceptId);\n                        if ((toConcept == null || toConcept.id == 0) && toConceptId != null && toConceptId != undefined) {\n                            let conceptString = yield GetConcept(toConceptId);\n                            toConcept = conceptString;\n                        }\n                        if (toConcept.id != 0) {\n                            if ((toConcept === null || toConcept === void 0 ? void 0 : toConcept.type) == null) {\n                                let toConceptTypeId = toConcept.typeId;\n                                let toConceptType = yield ConceptsData.GetConcept(toConceptTypeId);\n                                toConcept.type = toConceptType;\n                                if (toConceptType == null && toConceptTypeId != null && toConceptTypeId != undefined) {\n                                    let conceptString = yield GetConcept(toConceptTypeId);\n                                    toConceptType = conceptString;\n                                    toConcept.type = toConceptType;\n                                }\n                            }\n                        }\n                        let regex = \"the_\";\n                        let localmainString = (_d = (_c = toConcept === null || toConcept === void 0 ? void 0 : toConcept.type) === null || _c === void 0 ? void 0 : _c.characterValue) !== null && _d !== void 0 ? _d : \"\";\n                        let localKey = localmainString.replace(regex, \"\");\n                        if (isNaN(Number(localKey))) {\n                            if (localKey) {\n                                const result = yield recursiveFetch(toConceptId, connectionList, compositionList, visitedConcepts);\n                                output[localKey] = result;\n                            }\n                        }\n                        else {\n                            const result = yield recursiveFetch(toConceptId, connectionList, compositionList, visitedConcepts);\n                            arroutput[localKey] = result;\n                            output = arroutput;\n                        }\n                    }\n                    else {\n                        console.log(\"this is the faulty connection \", connectionList[i]);\n                    }\n                }\n            }\n        }\n        return output;\n    });\n}\nexport function recursiveFetchWithSubCompositions(id_1, connectionList_1, compositionList_1) {\n    return __awaiter(this, arguments, void 0, function* (id, connectionList, compositionList, visitedConcepts = []) {\n        var _a, _b, _c, _d;\n        let output = {};\n        let arroutput = [];\n        if (id == 0) {\n            return null;\n        }\n        let concept = yield ConceptsData.GetConcept(id);\n        if ((concept == null || concept.id == 0) && id != null && id != undefined) {\n            let conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        if (concept.id != 0) {\n            if (concept.type == null) {\n                let toConceptTypeId = concept.typeId;\n                let toConceptType = yield ConceptsData.GetConcept(toConceptTypeId);\n                concept.type = toConceptType;\n                if (toConceptType == null && toConceptTypeId != null && toConceptTypeId != undefined) {\n                    let conceptString = yield GetConcept(toConceptTypeId);\n                    toConceptType = conceptString;\n                    concept.type = toConceptType;\n                }\n            }\n        }\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        if (!compositionList.includes(id)) {\n            return concept === null || concept === void 0 ? void 0 : concept.characterValue;\n        }\n        else {\n            if (visitedConcepts.includes(id)) {\n                return \"\";\n            }\n            else {\n                visitedConcepts.push(id);\n            }\n            output[\"id\"] = id;\n            for (let i = 0; i < connectionList.length; i++) {\n                if (connectionList[i].ofTheConceptId == id) {\n                    let toConceptId = connectionList[i].toTheConceptId;\n                    let toConcept = yield ConceptsData.GetConcept(toConceptId);\n                    if ((toConcept == null || toConcept.id == 0) && toConceptId != null && toConceptId != undefined) {\n                        let conceptString = yield GetConcept(toConceptId);\n                        toConcept = conceptString;\n                    }\n                    if (toConcept) {\n                        if ((toConcept === null || toConcept === void 0 ? void 0 : toConcept.type) == null) {\n                            let toConceptTypeId = toConcept.typeId;\n                            let toConceptType = yield ConceptsData.GetConcept(toConceptTypeId);\n                            toConcept.type = toConceptType;\n                            if (toConceptType == null && toConceptTypeId != null && toConceptTypeId != undefined) {\n                                let conceptString = yield GetConcept(toConceptTypeId);\n                                toConceptType = conceptString;\n                                toConcept.type = toConceptType;\n                            }\n                        }\n                    }\n                    let regex = \"the_\";\n                    let localmainString = (_d = (_c = toConcept === null || toConcept === void 0 ? void 0 : toConcept.type) === null || _c === void 0 ? void 0 : _c.characterValue) !== null && _d !== void 0 ? _d : \"\";\n                    let localKey = localmainString.replace(regex, \"\");\n                    if (isNaN(Number(localKey))) {\n                        if (localKey) {\n                            const result = yield recursiveFetchWithSubCompositions(toConceptId, connectionList, compositionList);\n                            output[localKey] = result;\n                        }\n                    }\n                    else {\n                        const result = yield recursiveFetchWithSubCompositions(toConceptId, connectionList, compositionList);\n                        arroutput[localKey] = result;\n                        output = arroutput;\n                    }\n                }\n            }\n        }\n        return output;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConceptsData } from \"./../DataStructures/ConceptData\";\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { CreateDefaultConcept } from \"../app\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nexport function GetConceptByCharacterValue(characterValue) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let result = CreateDefaultConcept();\n        try {\n            const formdata = new FormData();\n            formdata.append(\"character_value\", characterValue);\n            const response = yield fetch(BaseUrl.GetConceptByCharacterValueUrl(), {\n                method: 'POST',\n                body: formdata\n            });\n            if (response.ok) {\n                result = (yield response.json());\n                if (result.id > 0) {\n                    ConceptsData.AddConcept(result);\n                }\n            }\n            else {\n                HandleHttpError(response);\n                console.log(\"Error in Getting concept by character value Error\", response.status);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Error in Getting concept by character value error message: ', error);\n            }\n            else {\n                console.log('Error in Getting concept by character value unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetConceptByCharacterValueUrl());\n        }\n        return result;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetConceptByCharacterValue } from \"../Api/GetConceptByCharacterValue\";\nimport { ConceptsData } from \"../DataStructures/ConceptData\";\nexport default function GetConceptByCharacter(characterValue) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let concept = yield ConceptsData.GetConceptByCharacter(characterValue);\n        let literalCharacter = `${characterValue}`;\n        if ((concept == null || (concept === null || concept === void 0 ? void 0 : concept.id) == 0) && literalCharacter) {\n            yield GetConceptByCharacterValue(characterValue);\n            concept = yield ConceptsData.GetConceptByCharacterAndTypeLocal(characterValue, 51);\n            if (concept.id == 0) {\n                concept = yield ConceptsData.GetConceptByCharacter(characterValue);\n            }\n        }\n        return concept;\n    });\n}\nexport function GetConceptByCharacterUpdated(characterValue) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let concept = yield ConceptsData.GetConceptByCharacter(characterValue);\n        let literalCharacter = `${characterValue}`;\n        if ((concept == null || (concept === null || concept === void 0 ? void 0 : concept.id) == 0) && literalCharacter) {\n            yield GetConceptByCharacterValue(characterValue);\n            concept = yield ConceptsData.GetConceptByCharacter(characterValue);\n        }\n        return concept;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetLocalConceptByCharacterValue } from \"../../Api/Local/GetLocalConceptByCharacterValue\";\nimport { LocalConceptsData } from \"../../DataStructures/Local/LocalConceptData\";\nimport { CreateDefaultLConcept, SplitStrings } from \"../../app\";\nexport default function GetConceptByCharacterLocal(characterValue) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let concept = yield LocalConceptsData.GetConceptByCharacterAndTypeLocal(characterValue, 51);\n        return concept;\n    });\n}\n/**\n *\n * @param character the character value of the concept we want to find in our local system.\n * @returns LConcept which will be the associated concept with the character Value.\n */\nexport function GetConceptByCharacterAndCategoryLocal(character) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let lconcept = CreateDefaultLConcept();\n        if (character == \"the\") {\n            lconcept.id = 1;\n            lconcept.typeId = 5;\n            lconcept.characterValue = \"the\";\n            return lconcept;\n        }\n        let splittedStringArray = SplitStrings(character);\n        if (splittedStringArray.length > 1) {\n            let category = 1;\n            let prefix = yield GetConceptByCharacterAndCategoryLocal(splittedStringArray[0]);\n            if (prefix.id != 0) {\n                category = prefix.id;\n            }\n            lconcept = yield GetConceptByCategoryAndCharacterLocalMemory(character, category);\n        }\n        else if (splittedStringArray[0] == character) {\n            lconcept = yield GetConceptByCharacterLocal(character);\n        }\n        return lconcept;\n    });\n}\nexport function GetConceptByCategoryAndCharacterLocalMemory(value, categoryId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let concept = LocalConceptsData.GetConceptByCharacterAndCategoryLocal(value, categoryId);\n        return concept;\n    });\n}\nexport function GetConceptByCharacterLocalFull(characterValue) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let concept = yield LocalConceptsData.GetConceptByCharacter(characterValue);\n            let literalCharacter = `${characterValue}`;\n            if ((concept == null || (concept === null || concept === void 0 ? void 0 : concept.id) == 0) && literalCharacter) {\n                yield GetLocalConceptByCharacterValue(characterValue);\n                concept = yield LocalConceptsData.GetConceptByCharacter(characterValue);\n            }\n            return concept;\n        }\n        catch (error) {\n            console.log(\"this is the error in Get Concept By Character Local full\", error);\n            throw error;\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetAllConceptsByType } from \"../Api/GetAllConceptsByType\";\nimport { GetAllConnectionsOfCompositionBulk } from \"../Api/GetAllConnectionsOfCompositionBulk\";\nimport { ConceptsData } from \"../DataStructures/ConceptData\";\nimport { LocalConceptsData } from \"../DataStructures/Local/LocalConceptData\";\nimport { GetCompositionListLocal, GetCompositionLocalWithId } from \"../app\";\nimport { GetCompositionFromMemory, GetCompositionWithIdFromMemory } from \"./GetComposition\";\nimport GetConceptByCharacter, { GetConceptByCharacterUpdated } from \"./GetConceptByCharacter\";\nimport GetConceptByCharacterLocal from \"./Local/GetConceptByCharacterLocal\";\n// get the list of compositions from the type \n// for eg get list of boomgpt\nexport function GetCompositionList(compositionName_1, userId_1) {\n    return __awaiter(this, arguments, void 0, function* (compositionName, userId, inpage = 10, page = 1) {\n        let concept = yield GetConceptByCharacter(compositionName);\n        let CompositionList = [];\n        if (concept) {\n            yield GetAllConceptsByType(compositionName, userId);\n            let conceptList = yield ConceptsData.GetConceptsByTypeIdAndUser(concept.id, userId);\n            let startPage = inpage * (page - 1);\n            let prefetchComposition = [];\n            for (let i = startPage; i < startPage + inpage; i++) {\n                if (conceptList[i]) {\n                    prefetchComposition.push(conceptList[i].id);\n                }\n            }\n            yield GetAllConnectionsOfCompositionBulk(prefetchComposition);\n            for (let i = startPage; i < startPage + inpage; i++) {\n                if (conceptList[i]) {\n                    let compositionJson = yield GetCompositionFromMemory(conceptList[i].id);\n                    CompositionList.push(compositionJson);\n                }\n            }\n        }\n        return CompositionList;\n    });\n}\nexport function GetCompositionListAll(compositionName_1, userId_1) {\n    return __awaiter(this, arguments, void 0, function* (compositionName, userId, inpage = 10, page = 1) {\n        let LocalCompositionList = GetCompositionListLocal(compositionName, userId);\n        let CompositionList = GetCompositionList(compositionName, userId);\n        let AllList = [];\n        Promise.race([LocalCompositionList, CompositionList])\n            .then((result) => {\n            console.log(\"Promise result\", result);\n            AllList.push(...result);\n        })\n            .catch((error) => {\n            console.log(\"error in handling\", error);\n        });\n        CompositionList.then((result) => {\n            console.log(\"This is the second promise result\", result);\n            AllList.push(...result);\n        });\n        return AllList;\n    });\n}\n// export async function GetCompositionListAllWithId(compositionName: string,userId:number,  inpage:number = 10, page:number =1){\n//    let LocalCompositionList =  await GetCompositionListLocalWithId(compositionName, userId);\n//    console.log(\"tbis is the local composition list\", LocalCompositionList);\n//    let CompositionList =    await GetCompositionListWithId(compositionName,userId)\n//    console.log(\"this is the online composition list\", CompositionList);\n//    let AllList: any[] = [];\n//    // Promise.race([LocalCompositionList, CompositionList])\n//    // .then((result)=> {\n//    //    console.log(\"Promise result\", result);\n//    //    AllList.push(...result);\n//    // })\n//    // .catch((error)=>{\n//    //    console.log(\"error in handling\", error);\n//    // });\n//    // CompositionList.then((result)=>{\n//    //    console.log(\"This is the second promise result\", result);\n//    //    AllList.push(...result);\n//    // })\n//    AllList.push(...LocalCompositionList);\n//    AllList.push(...CompositionList);\n//    return AllList;\n// }\nexport function GetCompositionListAllWithId(compositionName_1, userId_1) {\n    return __awaiter(this, arguments, void 0, function* (compositionName, userId, inpage = 10, page = 1) {\n        let conceptLocal = yield GetConceptByCharacterLocal(compositionName);\n        let conceptOnline = yield GetConceptByCharacter(compositionName);\n        let CompositionList = [];\n        let conceptList = [];\n        let conceptListLocal = [];\n        let finalLocal = [];\n        let conceptListOnline = [];\n        if (conceptLocal.id != 0) {\n            conceptListLocal = yield LocalConceptsData.GetConceptsByTypeIdAndUser(conceptLocal.id, userId);\n        }\n        if (conceptOnline.id != 0) {\n            yield GetAllConceptsByType(compositionName, userId);\n            conceptListOnline = yield ConceptsData.GetConceptsByTypeIdAndUser(conceptOnline.id, userId);\n            conceptList = conceptListOnline;\n        }\n        for (let i = 0; i < conceptListLocal.length; i++) {\n            let isDuplicate = false;\n            for (let j = 0; j < conceptListOnline.length; j++) {\n                if (conceptListLocal[i].ghostId == conceptListOnline[j].ghostId) {\n                    isDuplicate = true;\n                }\n            }\n            if (!isDuplicate) {\n                finalLocal.push(conceptListLocal[i]);\n            }\n        }\n        console.log(\"This is the all list\", finalLocal);\n        let AllList = [];\n        AllList = yield FormatTheConcepts(conceptList, finalLocal, inpage, page);\n        return AllList;\n    });\n}\nexport function GetCompositionListWithId(compositionName_1, userId_1) {\n    return __awaiter(this, arguments, void 0, function* (compositionName, userId, inpage = 10, page = 1) {\n        let concept = yield GetConceptByCharacter(compositionName);\n        let CompositionList = [];\n        if (concept) {\n            yield GetAllConceptsByType(compositionName, userId);\n            let conceptList = yield ConceptsData.GetConceptsByTypeIdAndUser(concept.id, userId);\n            let startPage = inpage * (page - 1);\n            let prefetchComposition = [];\n            for (let i = startPage; i < startPage + inpage; i++) {\n                if (conceptList[i]) {\n                    prefetchComposition.push(conceptList[i].id);\n                }\n            }\n            yield GetAllConnectionsOfCompositionBulk(prefetchComposition);\n            for (let i = startPage; i < startPage + inpage; i++) {\n                if (conceptList[i]) {\n                    let compositionJson = yield GetCompositionWithIdFromMemory(conceptList[i].id);\n                    CompositionList.push(compositionJson);\n                }\n            }\n        }\n        return CompositionList;\n    });\n}\nexport function GetCompositionListWithIdUpdated(compositionName_1, userId_1) {\n    return __awaiter(this, arguments, void 0, function* (compositionName, userId, inpage = 10, page = 1) {\n        let concept = yield GetConceptByCharacterUpdated(compositionName);\n        let CompositionList = [];\n        if (concept) {\n            yield GetAllConceptsByType(compositionName, userId);\n            let conceptList = yield ConceptsData.GetConceptsByTypeIdAndUser(concept.id, userId);\n            let startPage = inpage * (page - 1);\n            let prefetchComposition = [];\n            for (let i = startPage; i < startPage + inpage; i++) {\n                if (conceptList[i]) {\n                    prefetchComposition.push(conceptList[i].id);\n                }\n            }\n            yield GetAllConnectionsOfCompositionBulk(prefetchComposition);\n            for (let i = startPage; i < startPage + inpage; i++) {\n                if (conceptList[i]) {\n                    let compositionJson = yield GetCompositionWithIdFromMemory(conceptList[i].id);\n                    CompositionList.push(compositionJson);\n                }\n            }\n        }\n        return CompositionList;\n    });\n}\nexport function FormatTheConcepts(conceptList_1, localConceptList_1) {\n    return __awaiter(this, arguments, void 0, function* (conceptList, localConceptList, inpage = 10, page = 1) {\n        let CompositionList = [];\n        let startPage = inpage * (page - 1);\n        let prefetchComposition = [];\n        let localConceptLength = localConceptList.length;\n        for (let i = startPage; i < startPage + inpage - localConceptLength; i++) {\n            if (conceptList[i]) {\n                prefetchComposition.push(conceptList[i].id);\n            }\n        }\n        for (let i = 0; i < localConceptList.length; i++) {\n            let compositionJson = yield GetCompositionLocalWithId(localConceptList[i].id);\n            CompositionList.push(compositionJson);\n        }\n        yield GetAllConnectionsOfCompositionBulk(prefetchComposition);\n        for (let i = startPage; i < startPage + inpage - localConceptLength; i++) {\n            if (conceptList[i]) {\n                let compositionJson = yield GetCompositionWithIdFromMemory(conceptList[i].id);\n                CompositionList.push(compositionJson);\n            }\n        }\n        return CompositionList;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../../DataStructures/BaseUrl\";\nimport { HandleHttpError, HandleInternalError } from \"../../Services/Common/ErrorPosting\";\nimport { GetRequestHeaderWithAuthorization } from \"../../Services/Security/GetRequestHeader\";\nimport { ConceptsData, CreateDefaultConcept } from \"../../app\";\nexport function TranslateLocalToReal(conceptId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let result = CreateDefaultConcept();\n        try {\n            var header = GetRequestHeaderWithAuthorization('application/x-www-form-urlencoded');\n            const response = yield fetch(BaseUrl.GetRealConceptById(), {\n                method: 'POST',\n                headers: header,\n                body: `id=${conceptId}`\n            });\n            if (response.ok) {\n                result = (yield response.json());\n                if (result.id > 0) {\n                    ConceptsData.AddConcept(result);\n                }\n                return result;\n            }\n            else {\n                console.log(\"Error in Getting Translating concept Error\", response.status);\n                HandleHttpError(response);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Error in Getting Translating concept error message: ', error);\n            }\n            else {\n                console.log('Error in Getting Translating concept unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetRealConceptById());\n        }\n        return result;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { LocalConceptsData } from \"../../DataStructures/Local/LocalConceptData\";\nimport { LocalConnectionData } from \"../../DataStructures/Local/LocalConnectionData\";\nimport { TranslateLocalToReal } from \"../../Api/Translate/TranslateLocalToReal\";\nimport { GetComposition } from \"../GetComposition\";\nexport function GetCompositionLocal(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        try {\n            let connectionList = [];\n            let returnOutput = {};\n            connectionList = yield LocalConnectionData.GetConnectionsOfCompositionLocal(id);\n            //connectionList = ConnectionData.GetConnectionsOfComposition(id);\n            let compositionList = [];\n            for (let i = 0; i < connectionList.length; i++) {\n                if (!compositionList.includes(connectionList[i].ofTheConceptId)) {\n                    compositionList.push(connectionList[i].ofTheConceptId);\n                }\n            }\n            let concept = yield LocalConceptsData.GetConcept(id);\n            if (concept.id == 0) {\n                let realConcept = yield TranslateLocalToReal(id);\n                if (realConcept.id > 0) {\n                    return yield GetComposition(realConcept.id);\n                }\n            }\n            let output = yield recursiveFetchLocal(id, connectionList, compositionList);\n            let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"top\";\n            returnOutput[mainString] = output;\n            return returnOutput;\n        }\n        catch (error) {\n            throw error;\n        }\n    });\n}\nexport function GetCompositionLocalWithId(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        try {\n            let connectionList = [];\n            let returnOutput = {};\n            let FinalReturn = {};\n            connectionList = yield LocalConnectionData.GetConnectionsOfCompositionLocal(id);\n            let compositionList = [];\n            for (let i = 0; i < connectionList.length; i++) {\n                if (!compositionList.includes(connectionList[i].ofTheConceptId)) {\n                    compositionList.push(connectionList[i].ofTheConceptId);\n                }\n            }\n            let concept = yield LocalConceptsData.GetConcept(id);\n            if (concept.id != 0) {\n                let output = yield recursiveFetchLocal(id, connectionList, compositionList);\n                let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"top\";\n                returnOutput[mainString] = output;\n            }\n            FinalReturn['data'] = returnOutput;\n            FinalReturn['id'] = id;\n            return FinalReturn;\n        }\n        catch (error) {\n            throw error;\n        }\n    });\n}\nfunction recursiveFetchLocal(id_1, connectionList_1, compositionList_1) {\n    return __awaiter(this, arguments, void 0, function* (id, connectionList, compositionList, visitedConcepts = []) {\n        var _a, _b, _c, _d;\n        let output = {};\n        let arroutput = [];\n        let concept = yield LocalConceptsData.GetConcept(id);\n        if (concept.id != 0) {\n            if (concept.type == null) {\n                let toConceptTypeId = concept.typeId;\n                let toConceptType = yield LocalConceptsData.GetConcept(toConceptTypeId);\n                concept.type = toConceptType;\n            }\n        }\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"top\";\n        if (!compositionList.includes(id)) {\n            return concept === null || concept === void 0 ? void 0 : concept.characterValue;\n        }\n        else {\n            if (visitedConcepts.includes(id)) {\n                return \"\";\n            }\n            else {\n                visitedConcepts.push(id);\n            }\n            for (let i = 0; i < connectionList.length; i++) {\n                if (connectionList[i].ofTheConceptId == id) {\n                    let toConceptId = connectionList[i].toTheConceptId;\n                    let toConcept = yield LocalConceptsData.GetConcept(toConceptId);\n                    if (toConcept.id != 0) {\n                        if ((toConcept === null || toConcept === void 0 ? void 0 : toConcept.type) == null) {\n                            let toConceptTypeId = toConcept.typeId;\n                            let toConceptType = yield LocalConceptsData.GetConcept(toConceptTypeId);\n                            toConcept.type = toConceptType;\n                        }\n                    }\n                    let regex = \"the_\";\n                    let localmainString = (_d = (_c = toConcept === null || toConcept === void 0 ? void 0 : toConcept.type) === null || _c === void 0 ? void 0 : _c.characterValue) !== null && _d !== void 0 ? _d : \"top\";\n                    let localKey = localmainString.replace(regex, \"\");\n                    if (isNaN(Number(localKey))) {\n                        if (localKey) {\n                            const result = yield recursiveFetchLocal(toConceptId, connectionList, compositionList);\n                            output[localKey] = result;\n                        }\n                    }\n                    else {\n                        const result = yield recursiveFetchLocal(toConceptId, connectionList, compositionList);\n                        arroutput[localKey] = result;\n                        output = arroutput;\n                    }\n                }\n            }\n        }\n        return output;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { LocalConceptsData } from \"../../DataStructures/Local/LocalConceptData\";\nimport { GetCompositionLocal, GetCompositionLocalWithId } from \"./GetCompositionLocal\";\nimport GetConceptByCharacterLocal from \"./GetConceptByCharacterLocal\";\n/**\n * This function returns the list of composition which have the type @param compositionName\n * @param compositionName The type of the composition to pull\n * @param userId User Id of the user trying to pull the list\n * @returns list of compositions.\n */\nexport function GetCompositionListLocal(compositionName, userId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let concept = yield GetConceptByCharacterLocal(compositionName);\n            let CompositionList = [];\n            if (concept.id != 0) {\n                let conceptList = yield LocalConceptsData.GetConceptsByTypeIdAndUser(concept.id, userId);\n                for (let i = 0; i < conceptList.length; i++) {\n                    let compositionJson = yield GetCompositionLocal(conceptList[i].id);\n                    CompositionList.push(compositionJson);\n                }\n            }\n            return CompositionList;\n        }\n        catch (error) {\n            throw error;\n        }\n    });\n}\n/**\n * This function returns the list of composition with data - id format which have the type @param compositionName\n * @param compositionName The type of the composition to pull\n * @param userId User Id of the user trying to pull the list\n * @returns list of compositions with data - id format.\n */\nexport function GetCompositionListLocalWithId(compositionName, userId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let concept = yield GetConceptByCharacterLocal(compositionName);\n            let CompositionList = [];\n            if (concept.id != 0) {\n                let conceptList = yield LocalConceptsData.GetConceptsByTypeIdAndUser(concept.id, userId);\n                for (let i = 0; i < conceptList.length; i++) {\n                    let compositionJson = yield GetCompositionLocalWithId(conceptList[i].id);\n                    CompositionList.push(compositionJson);\n                }\n            }\n            return CompositionList;\n        }\n        catch (error) {\n            throw error;\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../../DataStructures/BaseUrl\";\nimport { GetRequestHeader } from \"../../Services/Security/GetRequestHeader\";\nimport { CreateDefaultConcept } from \"../../app\";\nimport { HandleHttpError, HandleInternalError } from \"../../Services/Common/ErrorPosting\";\nexport function CreateTheConceptApi(conceptData) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let result = CreateDefaultConcept();\n        try {\n            var header = GetRequestHeader();\n            const response = yield fetch(BaseUrl.CreateTheConceptUrl(), {\n                method: 'POST',\n                headers: header,\n                body: JSON.stringify(conceptData),\n            });\n            if (!response.ok) {\n                HandleHttpError(response);\n                throw new Error(`Error! status: ${response.status}`);\n            }\n            const resultString = yield response.json();\n            result = resultString;\n            return result;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Create the concept api error message: ', error.message);\n            }\n            else {\n                console.log('Create the concept api unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.CreateTheConceptUrl());\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Connection } from \"../../DataStructures/Connection\";\nimport { BaseUrl } from \"../../DataStructures/BaseUrl\";\nimport { GetRequestHeader } from \"../../Services/Security/GetRequestHeader\";\nimport { HandleHttpError } from \"../../Services/Common/ErrorPosting\";\nexport function CreateTheConnectionApi(connectionData) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let result = new Connection(0, 0, 0, 0, 0, 0, 0);\n        try {\n            var header = GetRequestHeader();\n            var jsonData = JSON.stringify(connectionData);\n            const response = yield fetch(BaseUrl.CreateTheConnectionUrl(), {\n                method: 'POST',\n                headers: header,\n                body: jsonData\n            });\n            if (response.ok) {\n                const result = yield response.json();\n            }\n            else {\n                console.log('Create the connection error message: ', response.status);\n                HandleHttpError(response);\n            }\n            return result;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Create the connection error message: ', error.message);\n            }\n            else {\n                console.log(' Create the connection unexpected error: ', error);\n            }\n            throw error;\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { storeToDatabase } from \"./../Database/indexeddb\";\nimport { CreateTheConceptApi } from \"../Api/Create/CreateTheConceptApi\";\nimport { CreateTheConnectionApi } from \"../Api/Create/CreateTheConnectionApi\";\nimport { ConceptsData } from \"./ConceptData\";\nimport { ConnectionData } from \"./ConnectionData\";\nexport class SyncData {\n    static CheckContains(concept) {\n        var contains = false;\n        for (var i = 0; i < this.conceptsSyncArray.length; i++) {\n            if (this.conceptsSyncArray[i].id == concept.id) {\n                contains = true;\n            }\n        }\n        return contains;\n    }\n    static SyncDataDelete(id) {\n        for (var i = 0; i < this.conceptsSyncArray.length; i++) {\n            if (id == this.conceptsSyncArray[i].id) {\n                this.conceptsSyncArray.splice(i, 1);\n            }\n        }\n        for (var i = 0; i < this.connectionSyncArray.length; i++) {\n            if (this.connectionSyncArray[i].ofTheConceptId == id || this.connectionSyncArray[i].toTheConceptId == id || this.connectionSyncArray[i].typeId == id) {\n                this.connectionSyncArray.splice(i, 1);\n            }\n        }\n    }\n    static CheckContainsConnection(connection) {\n        var contains = false;\n        for (var i = 0; i < this.connectionSyncArray.length; i++) {\n            if (this.connectionSyncArray[i].id == connection.id) {\n                contains = true;\n            }\n        }\n        return contains;\n    }\n    static AddConcept(concept) {\n        var contains = false;\n        // ConceptsData.AddConceptTemporary(concept);\n        if (!contains) {\n            this.conceptsSyncArray.push(concept);\n        }\n    }\n    static RemoveConcept(concept) {\n        for (var i = 0; i < this.conceptsSyncArray.length; i++) {\n            if (this.conceptsSyncArray[i].id == concept.id) {\n                this.conceptsSyncArray.splice(i, 1);\n            }\n        }\n    }\n    static AddConnection(connection) {\n        this.connectionSyncArray.push(connection);\n    }\n    static RemoveConnection(connection) {\n        for (var i = 0; i < this.connectionSyncArray.length; i++) {\n            if (this.connectionSyncArray[i].id == connection.id) {\n                this.connectionSyncArray.splice(i, 1);\n            }\n        }\n    }\n    static SyncDataOnline() {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (let i = 0; i < this.conceptsSyncArray.length; i++) {\n                ConceptsData.AddConcept(this.conceptsSyncArray[i]);\n            }\n            for (let i = 0; i < this.connectionSyncArray.length; i++) {\n                ConnectionData.AddConnection(this.connectionSyncArray[i]);\n            }\n            if (this.conceptsSyncArray.length > 0) {\n                let conceptsArray = this.conceptsSyncArray.slice();\n                this.conceptsSyncArray = [];\n                CreateTheConceptApi(conceptsArray);\n            }\n            if (this.connectionSyncArray.length > 0) {\n                // for(let i =0 ; i<this.connectionSyncArray.length ; i++){\n                //     console.log(\"create the connection in backend\", this.connectionSyncArray[i].ofTheConceptId + \"====\" + this.connectionSyncArray[i].toTheConceptId);\n                // }\n                let connectionsArray = this.connectionSyncArray.slice();\n                this.connectionSyncArray = [];\n                yield CreateTheConnectionApi(connectionsArray);\n            }\n            return \"done\";\n        });\n    }\n    static syncDataLocalDb() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.conceptsSyncArray.length > 0) {\n                for (let i = 0; i < this.conceptsSyncArray.length; i++) {\n                    storeToDatabase(\"localconcept\", this.conceptsSyncArray[i]);\n                }\n                this.conceptsSyncArray = [];\n            }\n            if (this.connectionSyncArray.length > 0) {\n                for (let i = 0; i < this.connectionSyncArray.length; i++) {\n                    storeToDatabase(\"localconnection\", this.connectionSyncArray[i]);\n                }\n                this.connectionSyncArray = [];\n            }\n            return \"done\";\n        });\n    }\n}\nSyncData.conceptsSyncArray = [];\nSyncData.connectionSyncArray = [];\n","import { Connection } from \"../DataStructures/Connection\";\nimport { SyncData } from \"../DataStructures/SyncData\";\nimport { HandleInternalError } from \"./Common/ErrorPosting\";\n/**\n * This function is used to create a connection that is internal(inside of a composition)\n * @param ofTheConceptId Start of the connection\n * @param userId user id fo the user creating the connection\n * @param toTheConceptId the end of the connection\n * @param typeId this is the type of the connection\n * @returns\n */\nexport function createTheConnection(ofTheConceptId, userId, toTheConceptId, typeId) {\n    var orderId = 1;\n    var localUserId = userId;\n    var accessId = 4;\n    var connection = new Connection(0, ofTheConceptId, toTheConceptId, localUserId, typeId, orderId, accessId);\n    if (ofTheConceptId == toTheConceptId) {\n        connection.ofTheConceptId = 0;\n        connection.toTheConceptId = 1;\n        return connection;\n    }\n    try {\n        connection.isTemp = true;\n        connection.id = Math.floor(Math.random() * 100000000);\n        SyncData.AddConnection(connection);\n    }\n    catch (error) {\n        HandleInternalError(error);\n    }\n    return connection;\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../../DataStructures/BaseUrl\";\nimport { GetRequestHeader } from \"../../Services/Security/GetRequestHeader\";\nimport { HandleHttpError } from \"../../Services/Common/ErrorPosting\";\nexport function CreateTextData(textData) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            var header = GetRequestHeader();\n            const response = yield fetch(BaseUrl.CreateTheTextDataUrl(), {\n                method: 'POST',\n                headers: header,\n                body: JSON.stringify(textData),\n            });\n            if (!response.ok) {\n                HandleHttpError(response);\n                throw new Error(`Error! status: ${response.status}`);\n            }\n            const resultString = yield response.json();\n            const result = resultString;\n            return result;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Create the text error message: ', error.message);\n            }\n            else {\n                console.log('Create the text unexpected error: ', error);\n            }\n            throw error;\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConceptsData } from \"./../DataStructures/ConceptData\";\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { GetRequestHeader } from \"../Services/Security/GetRequestHeader\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nexport function GetConceptByCharacterAndType(characterValue, typeId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let concept = yield ConceptsData.GetConceptByCharacterAndTypeLocal(characterValue, typeId);\n        try {\n            if (concept == null || concept.id == 0) {\n                var json = {\n                    'character_value': `${characterValue}`,\n                    'type_id': typeId\n                };\n                var toSendJson = JSON.stringify(json);\n                var header = GetRequestHeader();\n                const response = yield fetch(BaseUrl.GetConceptByCharacterAndTypeUrl(), {\n                    method: 'POST',\n                    headers: header,\n                    body: toSendJson,\n                });\n                if (response.ok) {\n                    let conceptString = yield response.json();\n                    concept = conceptString;\n                    ConceptsData.AddConcept(concept);\n                }\n                else {\n                    //  throw new Error(`Error! status: ${response.status}`);\n                    HandleHttpError(response);\n                    console.log(\"This is the concept by type and character error\", response.status);\n                }\n            }\n            return concept;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log(' This is the concept by type and character error message: ', error.message);\n            }\n            else {\n                console.log(' This is the concept by type and character unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetConceptByCharacterAndTypeUrl());\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nimport { GetRequestHeader } from \"../Services/Security/GetRequestHeader\";\nexport function MakeTheNameInBackend(newConceptId, referent, typeId, typeUserId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let object = {\n                'newConceptId': newConceptId,\n                'referent': referent,\n                'typeId': typeId,\n                'typeUserId': typeUserId\n            };\n            let myHeaders = GetRequestHeader();\n            let requestObject = JSON.stringify(object);\n            const response = yield fetch(BaseUrl.MakeTheNameInBackendUrl(), {\n                method: 'POST',\n                headers: myHeaders,\n                body: requestObject\n            });\n            if (!response.ok) {\n                HandleHttpError(response);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('make the name in backend error message: ', error.message);\n            }\n            else {\n                console.log('make the name in backend unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.MakeTheNameInBackendUrl());\n        }\n    });\n}\n","export class TheTexts {\n    constructor(userId, data, securityId, securityUserId, accessId, accessUserId, sessionId, sessionUserId, entryTimestamp, isNew) {\n        this.id = 0;\n        this.userId = userId;\n        this.data = data;\n        this.securityId = securityId;\n        this.securityUserId = securityUserId;\n        this.accessId = accessId;\n        this.accessUserId = accessUserId;\n        this.sessionId = sessionId;\n        this.sessionUserId = sessionUserId;\n        this.entryTimestamp = entryTimestamp;\n        this.isNew = isNew;\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ReservedConnectionIds } from \"../DataStructures/ReservedIds\";\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { GetRequestHeader } from \"../Services/Security/GetRequestHeader\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nexport function GetReservedConnectionIds() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let header = GetRequestHeader('application/x-www-form-urlencoded');\n            const response = yield fetch(BaseUrl.GetReservedConnectionIdUrl(), {\n                method: 'GET',\n                headers: header,\n            });\n            if (!response.ok) {\n                HandleHttpError(response);\n                throw new Error(`Error! status: ${response.status}`);\n            }\n            const result = yield response.json();\n            for (let i = 0; i < result.length; i++) {\n                ReservedConnectionIds.AddId(result[i]);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('get reserved connection ids error message: ', error.message);\n            }\n            else {\n                console.log('get reserved connection ids  unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetReservedConnectionIdUrl());\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetReservedConnectionIds } from \"../Api/GetReservedConnectionIds\";\nimport { GetReservedIds } from \"../Api/GetReservedIds\";\nexport class ReservedIds {\n    static getId() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.ids.length < 5) {\n                var ids = yield GetReservedIds();\n            }\n            var id = this.ids[0];\n            this.ids.shift();\n            return id;\n        });\n    }\n    static AddId(id) {\n        if (!this.ids.includes(id)) {\n            this.ids.push(id);\n        }\n    }\n}\nReservedIds.ids = [];\nexport class ReservedConnectionIds {\n    static getId() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.connectionIds.length < 5) {\n                var connectionIds = yield GetReservedConnectionIds();\n            }\n            var id = this.connectionIds[0];\n            this.connectionIds.shift();\n            return id;\n        });\n    }\n    static AddId(id) {\n        if (!this.connectionIds.includes(id)) {\n            this.connectionIds.push(id);\n        }\n    }\n}\nReservedConnectionIds.connectionIds = [];\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ReservedIds } from \"../DataStructures/ReservedIds\";\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { GetRequestHeader } from \"../Services/Security/GetRequestHeader\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nexport function GetReservedIds() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let header = GetRequestHeader('application/x-www-form-urlencoded');\n            const response = yield fetch(BaseUrl.GetReservedIdUrl(), {\n                method: 'GET',\n                headers: header,\n            });\n            if (!response.ok) {\n                HandleHttpError(response);\n                throw new Error(`Error! status: ${response.status}`);\n            }\n            const result = yield response.json();\n            for (let i = 0; i < result.length; i++) {\n                ReservedIds.AddId(result[i]);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('get reserved ids error message: ', error.message);\n            }\n            else {\n                console.log('get reserved ids  unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetReservedIdUrl());\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CreateTheConceptApi } from \"../Api/Create/CreateTheConceptApi\";\nimport { Concept } from \"../DataStructures/Concept\";\nimport { ReservedIds } from \"../DataStructures/ReservedIds\";\nimport { SyncData } from \"../DataStructures/SyncData\";\nimport { ConceptsData } from \"../app\";\nexport default function CreateTheConcept(referent, userId, categoryId, typeId, referentId, accessId, typeCharacter) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let id = yield ReservedIds.getId();\n        let isNew = true;\n        let created_on = new Date();\n        let updated_on = new Date();\n        // let concept = new Concept(id,userId,typeId,typeUserId,categoryId,categoryUserId,referentId, referentUserId, referent, securityId,\n        // securityUserId,accessId, accessUserId,sessionInformationId, sessionInformationUserId,isNew,created_on,updated_on);\n        let concept = new Concept(id, userId, typeId, categoryId, referentId, referent, accessId, isNew, created_on, updated_on, typeCharacter);\n        concept.isTemp = false;\n        SyncData.AddConcept(concept);\n        return concept;\n    });\n}\nexport function CreateTheConceptTemporary(referent, userId, categoryId, typeId, referentId, accessId, typeCharacter) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let id = yield ReservedIds.getId();\n        let isNew = true;\n        let created_on = new Date();\n        let updated_on = new Date();\n        // let concept = new Concept(id,userId,typeId,typeUserId,categoryId,referentId, referent,\n        //     accessId,isNew,created_on, updated_on);\n        let concept = new Concept(id, userId, typeId, categoryId, referentId, referent, accessId, isNew, created_on, updated_on, typeCharacter);\n        concept.isTemp = true;\n        return concept;\n    });\n}\nexport function CreateTheConceptImmediate(referent, userId, categoryId, typeId, referentId, accessId, typeCharacter) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let id = yield ReservedIds.getId();\n        let isNew = false;\n        let created_on = new Date();\n        let updated_on = new Date();\n        // let concept = new Concept(id,userId,typeId,typeUserId,categoryId,categoryUserId,referentId, referentUserId, referent, securityId,\n        //     securityUserId,accessId, accessUserId,sessionInformationId, sessionInformationUserId,isNew,created_on, updated_on);\n        let concept = new Concept(id, userId, typeId, categoryId, referentId, referent, accessId, isNew, created_on, updated_on, typeCharacter);\n        ConceptsData.AddConcept(concept);\n        CreateTheConceptApi([concept]);\n        //SyncData.AddConcept(concept);\n        return concept;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CreateTextData } from \"../Api/Create/CreateTheTextData\";\nimport { GetConceptByCharacterAndType } from \"../Api/GetConceptByCharacterAndType\";\nimport { MakeTheNameInBackend } from \"../Api/MakeTheNameInBackend\";\nimport { TheTexts } from \"../DataStructures/TheTexts\";\nimport { MakeTheTypeConceptApi } from \"../app\";\nimport { CreateDefaultConcept } from \"./CreateDefaultConcept\";\nimport CreateTheConcept, { CreateTheConceptImmediate } from \"./CreateTheConcept\";\n/**\n * This is the basic function of the concept connection system. This function let's you create a concept within the constraints of the\n * concept connection system. This function is the building block of the concept connection system.\n * @param type this is the type of the concept. You can also think of this as the key of concept. first_name, last_name etc.\n * @param referent the actual value of the concept. The actual name of value of the concept.\n * @param composition this is a boolean that defines if the concept is a composition or not. If this is a composition then other things are also\n * connected internally with this concept. If composition is true then always a new concept is created otherwise it checks if the concept already exists\n * and creates only in the case that the concept does not already exists with its type and value as its unique identifier.\n * @param userId the userId of the creator.\n * @param passedAccessId this is the accessId of the creator. By default should be 4.\n * @param passedSessionId this is the session that is created by the system.\n * @param referentId In case we need this concept to refer to any other concept.\n * @returns a concept which is either newly created or an older concept that already exists.\n */\nexport default function MakeTheInstanceConcept(type_1, referent_1) {\n    return __awaiter(this, arguments, void 0, function* (type, referent, composition = false, userId, passedAccessId = 4, passedSessionId = 999, referentId = 0) {\n        let sessionInformationId = passedSessionId;\n        let categoryId = 4;\n        let categoryUserId = userId;\n        let referentUserId = 999;\n        let securityId = 999;\n        let securityUserId = userId;\n        let sessionInformationUserId = userId;\n        // change this\n        let accessId = passedAccessId;\n        let accessUserId = userId;\n        let stringToCheck = \"\";\n        let stringLength = referent.length;\n        let typeConcept = CreateDefaultConcept();\n        let concept;\n        let startsWithThe = type.startsWith(\"the_\");\n        if (startsWithThe) {\n            stringToCheck = type;\n        }\n        else {\n            stringToCheck = \"the_\" + type;\n        }\n        if (composition) {\n            let typeConceptString = yield MakeTheTypeConceptApi(type, userId);\n            typeConcept = typeConceptString;\n            let conceptString = yield CreateTheConcept(referent, userId, categoryId, typeConcept.id, referentId, accessId, type);\n            concept = conceptString;\n        }\n        else if (stringLength > 255) {\n            let typeConceptString = yield MakeTheTypeConceptApi(stringToCheck, userId);\n            typeConcept = typeConceptString;\n            let conceptString = yield CreateTheConcept(referent, userId, categoryId, typeConcept.id, referentId, accessId, stringToCheck);\n            concept = conceptString;\n            let TheTextsData = new TheTexts(userId, referent, securityId, securityUserId, accessId, accessUserId, sessionInformationId, sessionInformationUserId, Date.now().toString(), true);\n            CreateTextData(TheTextsData);\n        }\n        else {\n            let typeConceptString = yield MakeTheTypeConceptApi(stringToCheck, userId);\n            typeConcept = typeConceptString;\n            let conceptByCharTypeString = yield GetConceptByCharacterAndType(referent, typeConcept.id);\n            let conceptTypeCharacter = conceptByCharTypeString;\n            concept = conceptTypeCharacter;\n            if (conceptTypeCharacter.id == 0 && conceptTypeCharacter.userId == 0) {\n                // let makeTheNameString = await MakeTheName(referent,userId, securityId, securityUserId, accessId, accessUserId, sessionInformationId, sessionInformationUserId,typeConcept.id, typeConcept.userId,conceptTypeCharacter );\n                // let makeTheNameConcept = makeTheNameString as Concept;\n                // concept = conceptTypeCharacter;\n                let conceptString = yield CreateTheConceptImmediate(referent, userId, categoryId, typeConcept.id, 12, accessId, stringToCheck);\n                concept = conceptString;\n                MakeTheNameInBackend(concept.id, `${referent}`, typeConcept.id, userId);\n            }\n        }\n        // if(concept){\n        //     if(concept.type == null){\n        //         let conceptType = ConceptsData.GetConcept(concept.typeId);\n        //         if(conceptType == null && concept.typeId != null && concept.typeId != undefined){\n        //             let typeConceptStringNew = await GetConcept(concept.typeId);\n        //             let newTypeConcept = typeConceptStringNew as Concept;\n        //             concept.type = newTypeConcept;\n        //         }\n        //     }\n        // }\n        concept.type = typeConcept;\n        return concept;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CreateDefaultConcept } from \"./CreateDefaultConcept\";\nimport { createTheConnection } from \"./CreateTheConnection\";\nimport MakeTheInstanceConcept from \"./MakeTheInstanceConcept\";\nexport default function CreateTheComposition(json_1) {\n    return __awaiter(this, arguments, void 0, function* (json, ofTheConceptId = null, ofTheConceptUserId = null, mainKey = null, userId = null, accessId = null, sessionInformationId = null) {\n        let localUserId = userId !== null && userId !== void 0 ? userId : 999;\n        let localAccessId = accessId !== null && accessId !== void 0 ? accessId : 4;\n        let localSessionId = sessionInformationId !== null && sessionInformationId !== void 0 ? sessionInformationId : 999;\n        let MainKeyLocal = mainKey !== null && mainKey !== void 0 ? mainKey : 0;\n        let MainConcept = CreateDefaultConcept();\n        for (const key in json) {\n            if ((typeof json[key] != 'string' && typeof json[key] != 'number')) {\n                if (ofTheConceptId == null && ofTheConceptUserId == null) {\n                    let localMainKey = MainKeyLocal;\n                    let conceptString = yield MakeTheInstanceConcept(key, \"\", true, localUserId, localAccessId, localSessionId);\n                    let concept = conceptString;\n                    MainConcept = concept;\n                    localMainKey = concept.id;\n                    MainKeyLocal = concept.id;\n                    yield CreateTheComposition(json[key], concept.id, concept.userId, localMainKey, userId, accessId, sessionInformationId);\n                }\n                else {\n                    let ofThe = ofTheConceptId !== null && ofTheConceptId !== void 0 ? ofTheConceptId : 999;\n                    let ofTheUser = ofTheConceptUserId !== null && ofTheConceptUserId !== void 0 ? ofTheConceptUserId : 999;\n                    let localMainKey = MainKeyLocal;\n                    let conceptString = yield MakeTheInstanceConcept(key, \"\", true, localUserId, localAccessId, localSessionId);\n                    let concept = conceptString;\n                    MainConcept = concept;\n                    yield createTheConnection(ofThe, ofTheUser, concept.id, localMainKey);\n                    yield CreateTheComposition(json[key], concept.id, concept.userId, localMainKey, userId, accessId, sessionInformationId);\n                }\n            }\n            else {\n                let ofThe = ofTheConceptId !== null && ofTheConceptId !== void 0 ? ofTheConceptId : 999;\n                let ofTheUser = ofTheConceptUserId !== null && ofTheConceptUserId !== void 0 ? ofTheConceptUserId : 10267;\n                let localMainKey = MainKeyLocal;\n                let conceptString = yield MakeTheInstanceConcept(key, json[key].toString(), false, localUserId, localAccessId, localSessionId);\n                let concept = conceptString;\n                yield createTheConnection(ofThe, ofTheUser, concept.id, localMainKey);\n            }\n        }\n        return MainConcept;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { IdentifierFlags } from \"../../DataStructures/IdentifierFlags\";\nimport { LocalConceptsData } from \"../../DataStructures/Local/LocalConceptData\";\nimport { LocalId } from \"../../DataStructures/Local/LocalId\";\nimport { getObjectsFromLocalIndexDb, UpdateToDatabase } from \"../../Database/indexdblocal\";\nimport { BaseUrl, DelayFunctionExecution } from \"../../app\";\n/**\n * This will create a binary tree of local concepts that is saved from the indexdb.\n */\nexport default function CreateLocalBinaryTreeFromIndexDb() {\n    return __awaiter(this, void 0, void 0, function* () {\n        console.log(\"this is trying to create local binary tree\");\n        try {\n            let conceptList = yield getObjectsFromLocalIndexDb(\"localconcept\");\n            if (Array.isArray(conceptList)) {\n                for (let i = 0; i < conceptList.length; i++) {\n                    let concept = conceptList[i];\n                    LocalConceptsData.AddConceptToMemory(concept);\n                }\n            }\n            IdentifierFlags.isLocalDataLoaded = true;\n            IdentifierFlags.isLocalTypeLoaded = true;\n            IdentifierFlags.isLocalCharacterLoaded = true;\n        }\n        catch (error) {\n            yield DelayFunctionExecution(2000, CreateLocalBinaryTreeFromIndexDb());\n            let errorObject = {\n                \"message\": \"Cannot create local binary tree from index db\",\n                \"data\": error,\n                \"ok\": false,\n                \"status\": 400\n            };\n            throw errorObject;\n        }\n    });\n}\n/**\n * We have designed our system to use local concepts and connections with its own local ids(negative ids) that\n * is only valid for the browser that creates this. We have a translator in our node server.\n * We cannot keep on using the indexdb to get the new data so we populate the data from indexdb to our memory\n * then we use these ids from memory and update the indexdb with the latest id frequently.\n * This function does this process in initlization from indexdb to memory.\n *\n * Here we have locked this function so that other processes cannot access this process in the case that this process is ongoing\n *\n *\n */\nexport function PopulateTheLocalConceptsToMemory() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            // put a lock on the indexdb for the domain so that no two things do this same process.\n            yield navigator.locks.request(\"dblock\", (lock) => __awaiter(this, void 0, void 0, function* () {\n                // get the last local concept id(-ve) from the indexdb\n                let idList = yield getObjectsFromLocalIndexDb(\"localid\");\n                // if the list is valid then.\n                if (Array.isArray(idList)) {\n                    // if the zeroth component that is the concept component is present\n                    if (idList[0]) {\n                        // if the zeroth component (concept component) has a valid value;\n                        let localConceptIdValue = idList[0].value;\n                        if (localConceptIdValue) {\n                            // add the new concept id to the memory\n                            LocalId.AddConceptId(idList[0]);\n                            // update the indexdb with the new concept value that other programs can use and\n                            // reserve the 10 ids for this program.\n                            //   await UpdateToDatabase(\"localid\", {\"id\": 0, \"value\": localConceptIdValue - 10});\n                        }\n                        else {\n                            // incase there is invalid id then choose a random id .\n                            localConceptIdValue = -Math.floor(Math.random() * 100000000);\n                            let object = { \"id\": 0, \"value\": localConceptIdValue };\n                            let newObject = { \"id\": 0, \"value\": localConceptIdValue - 10 };\n                            LocalId.AddConceptId(object);\n                            yield UpdateToDatabase(\"localid\", newObject);\n                        }\n                    }\n                    if (idList[2]) {\n                        BaseUrl.BASE_RANDOMIZER = idList[2].value;\n                    }\n                }\n            }));\n        }\n        catch (error) {\n            let errorObject = {\n                \"message\": \"Cannot populate Local Ids from the Index Db\",\n                \"data\": error,\n                \"ok\": false,\n                \"status\": 400\n            };\n            throw errorObject;\n        }\n    });\n}\n/**\n* We have designed our system to use local concepts and connections with its own local ids(negative ids) that\n* is only valid for the browser that creates this. We have a translator in our node server.\n* We cannot keep on using the indexdb to get the new data so we populate the data from indexdb to our memory\n* then we use these ids from memory and update the indexdb with the latest id frequently.\n* This function does this process in initlization from indexdb to memory.\n*\n* This function locked so that no two parallel process can access this functionality at the same time.\n* That might cause some ids to be repeated.\n*\n*\n*/\nexport function PopulateTheLocalConnectionToMemory() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            // put a lock on the indexdb for the domain so that no two things do this same process.\n            yield navigator.locks.request(\"dblock\", (lock) => __awaiter(this, void 0, void 0, function* () {\n                let idList = yield getObjectsFromLocalIndexDb(\"localid\");\n                if (Array.isArray(idList)) {\n                    if (idList[1]) {\n                        let localConnectionId = idList[1].value;\n                        if (localConnectionId) {\n                            LocalId.AddConnectionId(idList[1]);\n                            yield UpdateToDatabase(\"localid\", { \"id\": 1, \"value\": localConnectionId - 10 });\n                        }\n                        else {\n                            // incase there is invalid id then choose a random id .\n                            localConnectionId = -Math.floor(Math.random() * 100000000);\n                            let object = { \"id\": 0, \"value\": localConnectionId };\n                            let newObject = { \"id\": 0, \"value\": localConnectionId - 10 };\n                            LocalId.AddConnectionId(object);\n                            yield UpdateToDatabase(\"localid\", newObject);\n                        }\n                    }\n                    if (idList[2]) {\n                        BaseUrl.BASE_RANDOMIZER = idList[2].value;\n                    }\n                }\n            }));\n        }\n        catch (error) {\n            let errorObject = {\n                \"message\": \"Cannot populate Local Ids from the Index Db\",\n                \"data\": error,\n                \"ok\": false,\n                \"status\": 400\n            };\n            throw errorObject;\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { UpdateToDatabase } from \"../../Database/indexdblocal\";\nimport { PopulateTheLocalConceptsToMemory, PopulateTheLocalConnectionToMemory } from \"../../Services/Local/CreateLocalBinaryTreeFromData\";\nexport class LocalId {\n    static AddConceptId(id) {\n        this.localId = id.value;\n        UpdateToDatabase(\"localid\", id);\n    }\n    /**\n     *\n     * This function will get the local concept id from the indexdb\n     * @returns the local concept id\n     */\n    static getConceptId() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                if (this.localId) {\n                    if (this.ReservedLocalId.length < 5) {\n                        yield PopulateTheLocalConceptsToMemory().then(() => {\n                            let finalLocalId = this.localId;\n                            for (let j = 1; j < 10; j++) {\n                                let localId = this.localId - j;\n                                this.ReservedLocalId.push(localId);\n                                finalLocalId = localId;\n                            }\n                            this.AddConceptId({ \"id\": 0, \"value\": finalLocalId });\n                        }).catch((event) => {\n                            console.log(\" getid: cannot get the id from indexdb\");\n                            return -Math.floor(Math.random() * 100000000);\n                        });\n                        let id = this.ReservedLocalId[0];\n                        this.ReservedLocalId.shift();\n                        return id;\n                    }\n                    else {\n                        let id = this.ReservedLocalId[0];\n                        this.ReservedLocalId.shift();\n                        return id;\n                    }\n                }\n                else {\n                    yield PopulateTheLocalConceptsToMemory().then(() => {\n                        let finalLocalId = this.localId;\n                        for (let j = 1; j < 10; j++) {\n                            let localId = this.localId - j;\n                            this.ReservedLocalId.push(localId);\n                            finalLocalId = localId;\n                        }\n                        this.AddConceptId({ \"id\": 0, \"value\": finalLocalId });\n                    });\n                    return this.getConceptId();\n                }\n            }\n            catch (error) {\n                console.log(\" getid: this is the eror in concept\", error);\n                return -Math.floor(Math.random() * 100000000);\n            }\n        });\n    }\n    /**\n     *\n     * @param object This is the object that needs to be updated\n     */\n    static AddConnectionId(object) {\n        this.localConnectionId = object.value;\n        //UpdateToDatabase(\"localid\", id);\n    }\n    static getConnectionId() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                if (this.localConnectionId) {\n                    if (this.ReservedConnectionId.length < 5) {\n                        yield PopulateTheLocalConnectionToMemory().then(() => {\n                            let finalLocalId = this.localConnectionId;\n                            for (let j = 1; j < 10; j++) {\n                                let localConId = this.localConnectionId - j;\n                                this.ReservedConnectionId.push(localConId);\n                                finalLocalId = localConId;\n                            }\n                        }).catch((event) => {\n                            console.log(\"this is the new event\", event);\n                            return -Math.floor(Math.random() * 100000000);\n                        });\n                        let id = this.ReservedConnectionId[0];\n                        this.ReservedConnectionId.shift();\n                        return id;\n                    }\n                    else {\n                        let id = this.ReservedConnectionId[0];\n                        this.ReservedConnectionId.shift();\n                        return id;\n                    }\n                }\n                else {\n                    yield PopulateTheLocalConnectionToMemory().then(() => {\n                        let finalLocalId = this.localConnectionId;\n                        for (let j = 1; j < 10; j++) {\n                            let localConId = this.localConnectionId - j;\n                            this.ReservedConnectionId.push(localConId);\n                            finalLocalId = localConId;\n                        }\n                        this.AddConnectionId({ \"id\": 1, \"value\": finalLocalId });\n                    });\n                    return this.getConnectionId();\n                }\n            }\n            catch (error) {\n                return -Math.floor(Math.random() * 100000000);\n            }\n        });\n    }\n}\nLocalId.ReservedLocalId = [];\nLocalId.ReservedConnectionId = [];\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Connection } from \"../../DataStructures/Connection\";\nimport { LocalConnectionData } from \"../../DataStructures/Local/LocalConnectionData\";\nimport { LocalId } from \"../../DataStructures/Local/LocalId\";\nimport { LocalSyncData } from \"../../app\";\n/**\n * This function creates a connection for the concept connection system. This connection will only be created in real sense\n * once the data is synced using LocalSyncData.SyncDataOnline()\n * Here id and ghostId are created which are negative(these are virtual ids). After they are synced then they become real ids\n * The real ids are then associated with these ghost ids in node server (backend) and also in the local memory.\n * @param ofTheConceptId Of the concept Id for the connection\n * @param toTheConceptId To the concept Id for the connection\n * @param typeId Type of the connection, should be the composition id for internal connection and type concept in case\n * of external connection.\n * @param orderId current context is that for internal connections the order id is less than 3 and for external connections greater than 999\n * @param typeString this is the typeString in the case of external connections.\n * @returns a connection that is created and stored in the local system.\n */\nexport function CreateTheConnectionLocal(ofTheConceptId_1, toTheConceptId_1, typeId_1) {\n    return __awaiter(this, arguments, void 0, function* (ofTheConceptId, toTheConceptId, typeId, orderId = 1, typeString = \"\", userId = 999) {\n        try {\n            let accessId = 4;\n            // let randomid = -Math.floor(Math.random() * 100000000);\n            let randomid = yield LocalId.getConnectionId();\n            let realOfTheConceptId = 0;\n            let realToTheConceptId = 0;\n            let realTypeId = 0;\n            realOfTheConceptId = ofTheConceptId;\n            realToTheConceptId = toTheConceptId;\n            realTypeId = typeId;\n            let connection = new Connection(0, 0, 0, 0, 0, 0, 0);\n            if (ofTheConceptId != toTheConceptId) {\n                connection = new Connection(randomid, realOfTheConceptId, realToTheConceptId, userId, typeId, orderId, accessId);\n                connection.isTemp = true;\n                connection.typeCharacter = typeString;\n                yield LocalSyncData.AddConnection(connection);\n                LocalConnectionData.AddConnection(connection);\n                //storeToDatabase(\"localconnection\", connection);\n            }\n            return connection;\n        }\n        catch (error) {\n            throw error;\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Concept } from \"../../DataStructures/Concept\";\nimport { LocalConceptsData } from \"../../DataStructures/Local/LocalConceptData\";\nimport { LocalId } from \"../../DataStructures/Local/LocalId\";\n/**\n * This function creates the concept in the local system (Local memory and IndexDb) but not in the backend database\n * To create this concept in the backend database you need to sync the local data to the backend by LocalSyncData class.\n *\n * This function creates a id and ghost id which are equal to each other.\n * These id and ghostId are negative which means that they are virtual concepts. After these concepts have been synced with the backend\n * they are converted to real id. After returning from the backend the id changes to positive(+) and real id while the ghostId remains the same\n *\n * The system then saves this relation between -ve id and real id in the backend server and also in the local memory.\n *\n * @param referent This is the string that is the actual value of the concept.\n * @param typecharacter The string that defines the type of the concept.\n * @param userId This is the userId of the creator.\n * @param categoryId This is the category Id of the concept.\n * @param typeId This is the type Id of the concept that relates to the typecharacter passed above.\n * @param accessId This is the accessId of the concept(most probably is the accessId of the user)\n * @param isComposition This is set in the case that the composition needs to be created.\n * @param referentId if this concept refers to any other concept then this needs to be passed.\n * @returns\n */\nexport default function CreateTheConceptLocal(referent_1, typecharacter_1, userId_1, categoryId_1, typeId_1, accessId_1) {\n    return __awaiter(this, arguments, void 0, function* (referent, typecharacter, userId, categoryId, typeId, accessId, isComposition = false, referentId = 0) {\n        try {\n            //let id = -Math.floor(Math.random() * 100000000);\n            let id = yield LocalId.getConceptId();\n            console.log(\"this is the getting id type connection\", id);\n            let isNew = true;\n            let created_on = new Date();\n            let updated_on = new Date();\n            if (referent == \"the\") {\n                let concept = new Concept(1, 999, 5, 5, referentId, referent, accessId, isNew, created_on, updated_on, typecharacter);\n                return concept;\n            }\n            let concept = new Concept(id, userId, typeId, categoryId, referentId, referent, accessId, isNew, created_on, updated_on, typecharacter);\n            concept.isTemp = true;\n            concept.isComposition = isComposition;\n            LocalConceptsData.AddConcept(concept);\n            //storeToDatabase(\"localconcept\",concept);\n            return concept;\n        }\n        catch (error) {\n            throw error;\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { LocalConceptsData } from \"../../DataStructures/Local/LocalConceptData\";\nimport CreateTheConceptLocal from \"./CreateTheConceptLocal\";\nexport default function MakeTheConceptLocal(referent, typeCharacter, userId, categoryId, typeId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let conceptString = yield LocalConceptsData.GetConceptByCharacterAndTypeLocal(referent, typeId);\n        let concept = conceptString;\n        let accessId = 4;\n        if (typeCharacter == \"the\") {\n            categoryId = 1;\n        }\n        if (concept.id == 0) {\n            conceptString = yield CreateTheConceptLocal(referent, typeCharacter, userId, categoryId, typeId, accessId);\n            concept = conceptString;\n        }\n        return concept;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport CreateTheConceptLocal from \"./CreateTheConceptLocal\";\nimport { GetConceptByCharacterAndCategoryLocal } from \"./GetConceptByCharacterLocal\";\nimport { SplitStrings } from \"../SplitStrings\";\nimport MakeTheConceptLocal from \"./MakeTheConceptLocal\";\n/**\n * There are two types of concepts. One type of concept is a type concept. These concepts have no actual value and do not mean\n * anything unless they are associated with other values. These are placeholders like first_name, last_name, age etc that are required in the system.\n * These types need to be created seperately.\n *\n *\n * @param typeString type of the concept that needs to be created.\n * @param sessionId SessionId of the user\n * @param sessionUserId Not required pass 999\n * @param userId UserId of the user creating this concept\n * @returns\n */\nexport function MakeTheTypeConceptLocal(typeString, sessionId, sessionUserId, userId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let accessId = 4;\n        let existingConcept = yield GetConceptByCharacterAndCategoryLocal(typeString);\n        if (existingConcept) {\n            if (existingConcept.id == 0 || existingConcept.userId == 0) {\n                let splittedStringArray = SplitStrings(typeString);\n                if (splittedStringArray[0] == typeString) {\n                    let concept = yield MakeTheConceptLocal(typeString, \"the\", userId, 1, 51);\n                    existingConcept = concept;\n                }\n                else {\n                    // var categoryConcept = await MakeTheTypeConceptLocal(splittedStringArray[0], sessionId, sessionUserId, userId);\n                    // var typeConcept = await MakeTheTypeConceptLocal(splittedStringArray[1], sessionId, sessionUserId, userId );\n                    // if(typeConcept){\n                    let categoryConcept = yield MakeTheTypeConceptLocal(splittedStringArray[0], sessionId, sessionUserId, userId);\n                    let typeConcept = yield MakeTheTypeConceptLocal(splittedStringArray[1], sessionId, sessionUserId, userId);\n                    let concept = yield CreateTheConceptLocal(typeString, splittedStringArray[1], userId, categoryConcept.id, typeConcept.id, accessId);\n                    existingConcept = concept;\n                    //   }\n                }\n            }\n        }\n        // LocalSyncData.AddConcept(existingConcept);\n        return existingConcept;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport CreateTheConceptLocal from \"./CreateTheConceptLocal\";\nimport { MakeTheTypeConceptLocal } from \"./MakeTheTypeLocal\";\nimport { LocalConceptsData } from \"../../DataStructures/Local/LocalConceptData\";\nimport { LocalSyncData } from \"../../app\";\n/**\n * This is the basic function of the concept connection system. This function let's you create a concept within the constraints of the\n * concept connection system. This function is the building block of the concept connection system.\n * This function automatically passes the concept to be synced to the background. Next time you sync the data this concept will also be created in the backend.\n * @param type this is the type of the concept. You can also think of this as the key of concept. first_name, last_name etc.\n * @param referent the actual value of the concept. The actual name of value of the concept.\n * @param composition this is a boolean that defines if the concept is a composition or not. If this is a composition then other things are also\n * connected internally with this concept. If composition is true then always a new concept is created otherwise it checks if the concept already exists\n * and creates only in the case that the concept does not already exists with its type and value as its unique identifier.\n * @param userId the userId of the creator.\n * @param accessId this is the accessId of the creator. By default should be 4.\n * @param sessionInformationId this is the session that is created by the system.\n * @param referentId In case we need this concept to refer to any other concept.\n * @returns a concept which is either newly created or an older concept that already exists.\n */\nexport function MakeTheInstanceConceptLocal(type_1, referent_1) {\n    return __awaiter(this, arguments, void 0, function* (type, referent, composition = false, userId, accessId, sessionInformationId = 999, referentId = 0) {\n        try {\n            let sessionInformationId = 999;\n            let categoryId = 4;\n            let sessionInformationUserId = userId;\n            // change this\n            let accessId = 4;\n            let stringToCheck = \"\";\n            let stringLength = referent.length;\n            let typeConcept;\n            let concept;\n            let startsWithThe = type.startsWith(\"the_\");\n            if (startsWithThe) {\n                stringToCheck = type;\n            }\n            else {\n                stringToCheck = \"the_\" + type;\n            }\n            if (composition) {\n                let typeConceptString = yield MakeTheTypeConceptLocal(type, sessionInformationId, userId, userId);\n                typeConcept = typeConceptString;\n                let conceptString = yield CreateTheConceptLocal(referent, type, userId, categoryId, typeConcept.id, accessId, true, referentId);\n                concept = conceptString;\n            }\n            else if (stringLength > 255) {\n                let typeConceptString = yield MakeTheTypeConceptLocal(stringToCheck, sessionInformationId, sessionInformationUserId, userId);\n                typeConcept = typeConceptString;\n                let conceptString = yield CreateTheConceptLocal(referent, stringToCheck, userId, categoryId, typeConcept.id, accessId);\n                concept = conceptString;\n            }\n            else {\n                let typeConceptString = yield MakeTheTypeConceptLocal(stringToCheck, sessionInformationId, sessionInformationUserId, userId);\n                typeConcept = typeConceptString;\n                let conceptByCharTypeString = yield LocalConceptsData.GetConceptByCharacterAndTypeLocal(referent, typeConcept.id);\n                let conceptTypeCharacter = conceptByCharTypeString;\n                concept = conceptTypeCharacter;\n                if (conceptTypeCharacter.id == 0 && conceptTypeCharacter.userId == 0) {\n                    let conceptString = yield CreateTheConceptLocal(referent, stringToCheck, userId, categoryId, typeConcept.id, accessId);\n                    concept = conceptString;\n                }\n            }\n            concept.type = typeConcept;\n            LocalSyncData.AddConcept(concept);\n            return concept;\n        }\n        catch (error) {\n            throw error;\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CreateDefaultLConcept } from \"../Local/CreateDefaultLConcept\";\nimport { CreateTheConnectionLocal } from \"./CreateTheConnectionLocal\";\nimport { MakeTheInstanceConceptLocal } from \"./MakeTheInstanceConceptLocal\";\n/**\n * This function converts a json data to concept connection and also preserves its relation.\n * @param json The json data that needs to be converted to the concept connection system\n * @param ofTheConceptId If in case that this composition is part of other composition then this must be the connecting concept.\n * @param ofTheConceptUserId If in case that this composition is part of other composition then this must be the user Id of the  connecting concept.\n * @param mainKey If in case that this composition is part of other composition then this must be the main composition\n * @param userId The user Id of the user creating the composition.\n * @param accessId The accessId of the user creating the composition.\n * @param sessionInformationId Session of the user.\n * @param automaticSync for future use.\n * @returns the main concept of this composition.\n */\nexport function CreateTheCompositionLocal(json_1) {\n    return __awaiter(this, arguments, void 0, function* (json, ofTheConceptId = null, ofTheConceptUserId = null, mainKey = null, userId = null, accessId = null, sessionInformationId = null, automaticSync = false) {\n        let localUserId = userId !== null && userId !== void 0 ? userId : 999;\n        let localAccessId = accessId !== null && accessId !== void 0 ? accessId : 999;\n        let localSessionId = sessionInformationId !== null && sessionInformationId !== void 0 ? sessionInformationId : 999;\n        let MainKeyLocal = mainKey !== null && mainKey !== void 0 ? mainKey : 0;\n        let MainConcept = CreateDefaultLConcept();\n        for (const key in json) {\n            if (typeof json[key] != 'string' && typeof json[key] != 'number') {\n                if (ofTheConceptId == null && ofTheConceptUserId == null) {\n                    let localMainKey = MainKeyLocal;\n                    let conceptString = yield MakeTheInstanceConceptLocal(key, \"\", true, localUserId, localAccessId, localSessionId);\n                    let concept = conceptString;\n                    MainConcept = concept;\n                    localMainKey = concept.id;\n                    MainKeyLocal = concept.id;\n                    yield CreateTheCompositionLocal(json[key], concept.id, concept.userId, localMainKey, userId, accessId, sessionInformationId);\n                }\n                else {\n                    let ofThe = ofTheConceptId !== null && ofTheConceptId !== void 0 ? ofTheConceptId : 999;\n                    let ofTheUser = ofTheConceptUserId !== null && ofTheConceptUserId !== void 0 ? ofTheConceptUserId : 999;\n                    let localMainKey = MainKeyLocal;\n                    let conceptString = yield MakeTheInstanceConceptLocal(key, \"\", true, localUserId, localAccessId, localSessionId);\n                    let concept = conceptString;\n                    yield CreateTheConnectionLocal(ofThe, concept.id, localMainKey);\n                    yield CreateTheCompositionLocal(json[key], concept.id, concept.userId, localMainKey, userId, accessId, sessionInformationId);\n                }\n            }\n            else {\n                let ofThe = ofTheConceptId !== null && ofTheConceptId !== void 0 ? ofTheConceptId : 999;\n                let ofTheUser = ofTheConceptUserId !== null && ofTheConceptUserId !== void 0 ? ofTheConceptUserId : 999;\n                let localMainKey = MainKeyLocal;\n                let conceptString = yield MakeTheInstanceConceptLocal(key, json[key].toString(), false, localUserId, localAccessId, localSessionId);\n                let concept = conceptString;\n                yield CreateTheConnectionLocal(ofThe, concept.id, localMainKey);\n            }\n        }\n        return MainConcept;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { GetRequestHeader } from \"../Services/Security/GetRequestHeader\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nexport function GetConnectionOfTheConcept(typeId_1, ofTheConceptId_1, userId_1) {\n    return __awaiter(this, arguments, void 0, function* (typeId, ofTheConceptId, userId, inpage = 10, page = 1) {\n        let connectionList = [];\n        try {\n            let urlencoded = new URLSearchParams();\n            urlencoded.append(\"typeId\", `${typeId}`);\n            urlencoded.append(\"ofTheConceptId\", `${ofTheConceptId}`);\n            urlencoded.append(\"userId\", `${userId}`);\n            urlencoded.append(\"inpage\", `${inpage}`);\n            urlencoded.append(\"page\", `${page}`);\n            let header = GetRequestHeader('application/x-www-form-urlencoded');\n            const response = yield fetch(BaseUrl.GetAllConnectionsOfConceptUrl(), {\n                method: 'POST',\n                headers: header,\n                body: urlencoded\n            });\n            if (response.ok) {\n                connectionList = (yield response.json());\n            }\n            else {\n                HandleHttpError(response);\n                console.log(\"Get connection of concept error\", response.status);\n            }\n            return connectionList;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Get connection of concept  error message: ', error.message);\n            }\n            else {\n                console.log('Get connection of concept unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetAllConnectionsOfConceptUrl());\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Connection } from \"../DataStructures/Connection\";\nimport { ReservedConnectionIds } from \"../DataStructures/ReservedIds\";\nimport { FreeSchemaResponse } from \"../DataStructures/Responses/ErrorResponse\";\nimport { SyncData } from \"../DataStructures/SyncData\";\nexport function CreateTheConnectionGeneral(ofTheConceptId_1, ofTheConceptUserId_1, toTheConceptId_1, typeId_1) {\n    return __awaiter(this, arguments, void 0, function* (ofTheConceptId, ofTheConceptUserId, toTheConceptId, typeId, orderId = 1, accessId = 4) {\n        if (ofTheConceptId > 0 && toTheConceptId > 0) {\n            var userId = ofTheConceptUserId;\n            var id = yield ReservedConnectionIds.getId();\n            var connection = new Connection(id, ofTheConceptId, toTheConceptId, userId, typeId, orderId, accessId);\n            if (ofTheConceptId == toTheConceptId) {\n                connection.ofTheConceptId = 0;\n                connection.toTheConceptId = 1;\n                return connection;\n            }\n            // this will cause the connection to go and update the existing with the reserved id\n            connection.toUpdate = true;\n            connection.isTemp = false;\n            SyncData.AddConnection(connection);\n            return connection;\n        }\n        else {\n            throw new FreeSchemaResponse(\"cannot create connection because id are negative \", false, 400, \"\");\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nimport { GetOnlyTokenHeader } from \"../Services/Security/GetRequestHeader\";\nexport default function DeleteTheConnection(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const formdata = new FormData();\n            formdata.append(\"id\", id.toString());\n            let header = GetOnlyTokenHeader();\n            const response = yield fetch(BaseUrl.DeleteTheConnectionUrl(), {\n                method: 'POST',\n                headers: header,\n                body: formdata,\n                redirect: \"follow\"\n            });\n            if (!response.ok) {\n                console.log('Delete connection error status: ', response.status);\n                HandleHttpError(response);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Delete connection error message: ', error.message);\n            }\n            else {\n                console.log('Delete connection unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.DeleteTheConnectionUrl());\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { ConnectionData } from \"../DataStructures/ConnectionData\";\nimport { GetRequestHeader } from \"../Services/Security/GetRequestHeader\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nexport function GetConnection(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let result = yield ConnectionData.GetConnection(id);\n        try {\n            if (result.id != 0) {\n                return result;\n            }\n            else {\n                let header = GetRequestHeader('application/x-www-form-urlencoded');\n                const formdata = new FormData();\n                formdata.append(\"id\", id.toString());\n                const response = yield fetch(BaseUrl.GetConnectionUrl(), {\n                    method: 'POST',\n                    headers: header,\n                    body: formdata\n                });\n                if (response.ok) {\n                    result = (yield response.json());\n                    ConnectionData.AddConnection(result);\n                }\n                else {\n                    HandleHttpError(response);\n                    console.log(\"Get Connection Error\", response.status);\n                }\n                return result;\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Get Connection error message: ', error.message);\n            }\n            else {\n                console.log('Get Connection unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetConnectionUrl());\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetConnection } from \"../Api/GetConnection\";\nimport { ConnectionData } from \"../DataStructures/ConnectionData\";\nexport function GetConnectionById(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let connection = yield ConnectionData.GetConnection(id);\n        if ((connection == null || connection.id == 0) && id != null && id != undefined) {\n            let connectionString = yield GetConnection(id);\n            connection = connectionString;\n        }\n        return connection;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport DeleteTheConnection from \"../Api/DeleteTheConnection\";\nimport { ConnectionBinaryTree } from \"../DataStructures/ConnectionBinaryTree/ConnectionBinaryTree\";\nimport { LocalConnectionData } from \"../DataStructures/Local/LocalConnectionData\";\nimport { GetConnectionById } from \"./GetConnections\";\nexport function DeleteConnectionById(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (id > 0) {\n            let connection = yield GetConnectionById(id);\n            yield DeleteTheConnection(id);\n            //removeFromDatabase(\"connection\",id);\n            ConnectionBinaryTree.removeNodeFromTree(id);\n        }\n        else {\n            LocalConnectionData.RemoveConnectionById(id);\n        }\n        //ConnectionTypeTree.removeTypeConcept(connection.typeId,id);\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetConcept } from \"../Api/GetConcept\";\nimport { convertFromLConceptToConcept, GetUserGhostId } from \"../app\";\nimport { ConceptsData } from \"../DataStructures/ConceptData\";\nimport { CreateDefaultConcept } from \"./CreateDefaultConcept\";\n/**\n *\n * @param id this is the id that can be used to get the concept.\n * @param userId This is the user that calls the concept\n * @returns Concept if it exists\n */\nexport default function GetTheConcept(id_1) {\n    return __awaiter(this, arguments, void 0, function* (id, userId = 999) {\n        try {\n            let concept = CreateDefaultConcept();\n            if (id < 0) {\n                let lconcept = yield GetUserGhostId(userId, id);\n                concept = convertFromLConceptToConcept(lconcept);\n                return concept;\n            }\n            concept = yield ConceptsData.GetConcept(id);\n            if ((concept == null || concept.id == 0) && id != null && id != undefined) {\n                let conceptString = yield GetConcept(id);\n                concept = conceptString;\n            }\n            if (concept.id != 0) {\n                if (concept.type == null) {\n                    let conceptType = yield ConceptsData.GetConcept(concept.typeId);\n                    if (conceptType == null && concept.typeId != null && concept.typeId != undefined) {\n                        let typeConceptString = yield GetConcept(concept.typeId);\n                        let typeConcept = typeConceptString;\n                        concept.type = typeConcept;\n                    }\n                }\n            }\n            return concept;\n        }\n        catch (err) {\n            console.error(\"this is the error in the getting concept\", err);\n            throw err;\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetConnectionOfTheConcept } from \"../Api/GetConnectionOfTheConcept\";\nimport { Connection } from \"../DataStructures/Connection\";\nimport { SyncData } from \"../DataStructures/SyncData\";\nimport { CreateDefaultConcept } from \"./CreateDefaultConcept\";\nimport { CreateTheConnectionGeneral } from \"./CreateTheConnectionGeneral\";\nimport { DeleteConnectionById } from \"./DeleteConnection\";\nimport GetTheConcept from \"./GetTheConcept\";\nimport MakeTheInstanceConcept from \"./MakeTheInstanceConcept\";\nexport function CreateConnectionBetweenTwoConcepts(ofTheConcept_1, toTheConcept_1, linker_1) {\n    return __awaiter(this, arguments, void 0, function* (ofTheConcept, toTheConcept, linker, both = false, count = false) {\n        var _a, _b;\n        let userId = ofTheConcept.userId;\n        let accessId = 4;\n        if (both) {\n            let prefix1 = ((_a = toTheConcept.type) === null || _a === void 0 ? void 0 : _a.characterValue) + \"_s\";\n            let linkerAdd1 = linker + \"_by\";\n            let backwardLinker = prefix1 + \"_\" + linkerAdd1;\n            if (count) {\n                yield CountRelationship(linkerAdd1, toTheConcept, userId);\n            }\n            let connectionConceptReverse = yield MakeTheInstanceConcept(\"connection\", backwardLinker, false, 999, 999, 999);\n            let newConnection = new Connection(0, toTheConcept.id, ofTheConcept.id, userId, connectionConceptReverse.id, 1000, accessId);\n            SyncData.AddConnection(newConnection);\n        }\n        let prefix = ((_b = ofTheConcept.type) === null || _b === void 0 ? void 0 : _b.characterValue) + \"_s\";\n        let linkerAdd = linker + \"_s\";\n        let forwardLinker = prefix + \"_\" + linkerAdd;\n        if (count) {\n            yield CountRelationship(linkerAdd, ofTheConcept, userId);\n        }\n        let connectionConcept = yield MakeTheInstanceConcept(\"connection\", forwardLinker, false, 999, 999, 999);\n        let newConnection = new Connection(0, ofTheConcept.id, toTheConcept.id, userId, connectionConcept.id, 1000, accessId);\n        SyncData.AddConnection(newConnection);\n        return newConnection;\n    });\n}\nexport function CountRelationship(linker_1, concept_1) {\n    return __awaiter(this, arguments, void 0, function* (linker, concept, passedUserId = null) {\n        var _a;\n        let concept1 = concept;\n        let userId = passedUserId !== null && passedUserId !== void 0 ? passedUserId : concept.userId;\n        let accessId = 4;\n        let sessionInformationId = 999;\n        let forwardLinkerCount = linker + \"_count\";\n        let forwardLinkerCountString = ((_a = concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) + \"_s\" + \"_\" + forwardLinkerCount;\n        let forwardLinkerCountConcept = yield MakeTheInstanceConcept(\"connection\", forwardLinkerCountString, false, userId, accessId, sessionInformationId);\n        let connectionsString = yield GetConnectionOfTheConcept(forwardLinkerCountConcept.id, concept.id, userId, 10, 1);\n        let connections = connectionsString;\n        let countConceptList = [];\n        let countConcept = CreateDefaultConcept();\n        for (let i = 0; i < connections.length; i++) {\n            let toConcept = yield GetTheConcept(connections[i].toTheConceptId);\n            countConceptList.push(toConcept);\n        }\n        if (countConceptList.length < 1) {\n            countConcept = yield MakeTheInstanceConcept(\"count\", \"1\", false, userId, accessId, sessionInformationId);\n        }\n        else {\n            let oldcountConcept = countConceptList[0];\n            let count = 0;\n            try {\n                count = Number(oldcountConcept.characterValue);\n            }\n            catch (ex) {\n                count = 0;\n            }\n            count = count + 1;\n            countConcept = yield MakeTheInstanceConcept(\"count\", count.toString(), false, userId, accessId, sessionInformationId);\n            for (let i = 0; i < connections.length; i++) {\n                DeleteConnectionById(connections[i].id);\n            }\n        }\n        let newConnection = new Connection(0, concept1.id, countConcept.id, concept1.userId, forwardLinkerCountConcept.id, 1000, accessId);\n        yield SyncData.AddConnection(newConnection);\n    });\n}\nexport function CreateConnectionBetweenTwoConceptsGeneral(ofTheConcept_1, toTheConcept_1, linker_1) {\n    return __awaiter(this, arguments, void 0, function* (ofTheConcept, toTheConcept, linker, both = false, count = false) {\n        var _a, _b;\n        let userId = ofTheConcept.userId;\n        let accessId = 4;\n        if (both) {\n            let prefix1 = ((_a = toTheConcept.type) === null || _a === void 0 ? void 0 : _a.characterValue) + \"_s\";\n            let linkerAdd1 = linker + \"_by\";\n            let backwardLinker = prefix1 + \"_\" + linkerAdd1;\n            if (count) {\n                yield CountRelationship(linkerAdd1, toTheConcept, userId);\n            }\n            let connectionConceptReverse = yield MakeTheInstanceConcept(\"connection\", backwardLinker, false, 999, 999, 999);\n            let newConnection = new Connection(0, toTheConcept.id, ofTheConcept.id, userId, connectionConceptReverse.id, 1000, accessId);\n            SyncData.AddConnection(newConnection);\n        }\n        let prefix = ((_b = ofTheConcept.type) === null || _b === void 0 ? void 0 : _b.characterValue) + \"_s\";\n        let linkerAdd = linker + \"_s\";\n        let forwardLinker = prefix + \"_\" + linkerAdd;\n        if (count) {\n            yield CountRelationship(linkerAdd, ofTheConcept, userId);\n        }\n        let connectionConcept = yield MakeTheInstanceConcept(\"connection\", forwardLinker, false, 999, 999, 999);\n        let newConnection = yield CreateTheConnectionGeneral(ofTheConcept.id, ofTheConcept.userId, toTheConcept.id, connectionConcept.id, 1000, accessId);\n        return newConnection;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { SettingData } from \"../DataStructures/SettingData\";\nimport { IndexDb } from \"./indexeddb\";\nexport function openDatabase(databaseName) {\n    return IndexDb.db;\n}\nexport function storeToDatabase(databaseName, object) {\n}\nexport function GetStatsFromDatabase() {\n    var settingsData = new SettingData(true);\n    return settingsData;\n}\nexport function AiUpdateFlag(object) {\n}\nexport function getFromDatabaseWithType(databaseName, type, id) {\n    return __awaiter(this, void 0, void 0, function* () {\n    });\n}\nexport function getObjectsFromIndexDb(databaseName) {\n    return __awaiter(this, void 0, void 0, function* () {\n    });\n}\nexport function removeFromDatabase(databaseName, id) {\n}\nexport function getAllFromLocalDb(databaseName) {\n    return __awaiter(this, void 0, void 0, function* () {\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetConceptByCharacterAndType } from \"../Api/GetConceptByCharacterAndType\";\nimport { GetConnectionOfTheConcept } from \"../Api/GetConnectionOfTheConcept\";\nimport { GetCompositionWithIdAndDateFromMemory } from \"./GetComposition\";\nimport GetTheConcept from \"./GetTheConcept\";\nimport { GetAllConnectionsOfCompositionBulk } from \"../Api/GetAllConnectionsOfCompositionBulk\";\nexport function GetLink(id_1, linker_1) {\n    return __awaiter(this, arguments, void 0, function* (id, linker, inpage = 10, page = 1) {\n        var _a;\n        let output = [];\n        let concept = yield GetTheConcept(id);\n        let linkString = ((_a = concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) + \"_s\" + \"_\" + linker;\n        let relatedConceptString = yield GetConceptByCharacterAndType(linkString, 16);\n        let relatedConcept = relatedConceptString;\n        if (relatedConcept.id > 0) {\n            let connectionsString = yield GetConnectionOfTheConcept(relatedConcept.id, concept.id, concept.userId, inpage, page);\n            let connections = connectionsString;\n            let prefetch = [];\n            for (let i = 0; i < connections.length; i++) {\n                prefetch.push(connections[i].toTheConceptId);\n            }\n            yield GetAllConnectionsOfCompositionBulk(prefetch);\n            for (let i = 0; i < connections.length; i++) {\n                let toConceptId = connections[i].toTheConceptId;\n                let toConcept = yield GetTheConcept(toConceptId);\n                let newComposition = yield GetCompositionWithIdAndDateFromMemory(toConcept.id);\n                output.push(newComposition);\n            }\n        }\n        return output;\n    });\n}\nexport function GetLinkRaw(id_1, linker_1) {\n    return __awaiter(this, arguments, void 0, function* (id, linker, inpage = 10, page = 1) {\n        var _a;\n        let output = [];\n        let concept = yield GetTheConcept(id);\n        let linkString = ((_a = concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) + \"_s\" + \"_\" + linker;\n        let relatedConceptString = yield GetConceptByCharacterAndType(linkString, 16);\n        let relatedConcept = relatedConceptString;\n        if (relatedConcept.id > 0) {\n            let connectionsString = yield GetConnectionOfTheConcept(relatedConcept.id, concept.id, concept.userId, inpage, page);\n            let connections = connectionsString;\n            let prefetch = [];\n            for (let i = 0; i < connections.length; i++) {\n                prefetch.push(connections[i].toTheConceptId);\n            }\n            for (let i = 0; i < connections.length; i++) {\n                let toConceptId = connections[i].toTheConceptId;\n                let toConcept = yield GetTheConcept(toConceptId);\n                output.push(toConcept);\n            }\n        }\n        return output;\n    });\n}\n","export class TheCharacter {\n    constructor(userId, data, securityId, securityUserId, accessId, accessUserId, sessionId, sessionUserId, entryTimestamp, isNew) {\n        this.id = 0;\n        this.isNew = false;\n        this.userId = userId;\n        this.data = `${data}`;\n        this.securityId = securityId;\n        this.securityUserId = securityUserId;\n        this.accessId = accessId;\n        this.accessUserId = accessUserId;\n        this.sessionId = sessionId;\n        this.sessionUserId = sessionUserId;\n        this.isNew = isNew;\n    }\n}\n","import { TheCharacter } from \"./TheCharacter\";\nexport class CharacterRepository {\n    constructor() {\n        this.name = \"character Repository\";\n    }\n    static AddCharacter(character) {\n        this.characterData[character.id] = character;\n    }\n    static GetCharacter(value) {\n        var theCharacter = new TheCharacter(0, \"0\", 0, 0, 0, 0, 0, 0, \"0\", false);\n        for (var i = 0; i < this.characterData.length; i++) {\n            if (this.characterData[i].data == value) {\n                theCharacter = this.characterData[i];\n            }\n        }\n        return theCharacter;\n    }\n}\nCharacterRepository.characterData = [];\n","export class Returner {\n    constructor(id, userId, referentId, isNew) {\n        this.id = id;\n        this.userId = userId;\n        this.referentId = referentId;\n        this.isNew = isNew;\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CharacterRepository } from \"../../DataStructures/CharacterRepository\";\nimport { Returner } from \"../../DataStructures/Returner\";\nimport { TheCharacter } from \"../../DataStructures/TheCharacter\";\nimport { BaseUrl } from \"../../DataStructures/BaseUrl\";\nimport { GetRequestHeader } from \"../../Services/Security/GetRequestHeader\";\nimport { HandleHttpError } from \"../../Services/Common/ErrorPosting\";\nexport function CreateTheCharacter(characterData) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var characterData;\n        try {\n            characterData = CharacterRepository.GetCharacter(characterData.data);\n            if (characterData.id == 0) {\n                var header = GetRequestHeader();\n                const response = yield fetch(BaseUrl.CreateTheCharacterDataUrl(), {\n                    method: 'POST',\n                    headers: header,\n                    body: JSON.stringify(characterData),\n                });\n                if (!response.ok) {\n                    HandleHttpError(response);\n                    throw new Error(`Error! status: ${response.status}`);\n                }\n                const resultString = yield response.json();\n                const result = resultString;\n                var savingCharacter = new TheCharacter(result.userId, characterData.data, 0, 0, 4, 4, 999, 999, \"\", false);\n                savingCharacter.id = result.id;\n                CharacterRepository.AddCharacter(savingCharacter);\n                return result;\n            }\n            else {\n                var returningData = new Returner(characterData.id, characterData.userId, 0, false);\n                return returningData;\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('create the character error message: ', error.message);\n            }\n            else {\n                console.log('create the character unexpected error: ', error);\n            }\n            throw error;\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CreateTheCharacter } from \"../Api/Create/CreateTheCharacter\";\nimport { TheCharacter } from \"../DataStructures/TheCharacter\";\nexport default function MakeTheCharacterData(the_character_data, userId, securityId, accessId, sessionId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var categoryUserId = userId;\n        var accessUserId = userId;\n        var securityUserId = userId;\n        var sessionInformationUserId = userId;\n        var theCharacter = new TheCharacter(userId, the_character_data, securityId, securityUserId, accessId, accessUserId, sessionId, sessionInformationUserId, \"\", false);\n        var output = yield CreateTheCharacter(theCharacter);\n        var returner = output;\n        return returner;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetConceptByCharacterAndType } from \"../Api/GetConceptByCharacterAndType\";\nimport CreateTheConcept from \"./CreateTheConcept\";\nexport default function MakeTheConcept(referent, userId, categoryId, typeId, referentId, accessId, typeCharacter) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let conceptString = yield GetConceptByCharacterAndType(referent, typeId);\n        let concept = conceptString;\n        if (concept.id == 0) {\n            conceptString = yield CreateTheConcept(referent, userId, categoryId, typeId, referentId, accessId, typeCharacter);\n            concept = conceptString;\n        }\n        return concept;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport MakeTheCharacterData from \"./MakeTheCharacterData\";\nimport MakeTheConcept from \"./MakeTheConcept\";\nexport default function MakeTheCharacter(the_character_data, userId, securityId, accessId, accessUserId, sessionId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let categoryUserId = userId;\n        let securityUserId = userId;\n        let categoryId = 4;\n        let typeId = 51;\n        let typeUserId = userId;\n        let sessionUserId = userId;\n        let referentUserId = userId;\n        let lengthOfCharacters = the_character_data.length;\n        let concept;\n        if (lengthOfCharacters == 1) {\n            let referentId = the_character_data.charCodeAt(0);\n            let typeIdForCharacter = 49;\n            let characterDataString = yield MakeTheCharacterData(the_character_data, userId, securityId, accessId, sessionId);\n            concept = MakeTheConcept(the_character_data, userId, categoryId, typeIdForCharacter, referentId, accessId, \"the_character\");\n        }\n        else {\n            let characterDataString = yield MakeTheCharacterData(the_character_data, userId, securityId, accessId, sessionId);\n            let characterData = characterDataString;\n            if (characterData.isNew) {\n                let conceptString = yield MakeTheConcept(the_character_data, userId, categoryId, typeId, characterData.id, accessId, \"the_characters\");\n                concept = conceptString;\n            }\n            else {\n                let conceptString = yield MakeTheConcept(the_character_data, userId, categoryId, typeId, characterData.id, accessId, \"the_characters\");\n                concept = conceptString;\n            }\n        }\n        return concept;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CreateTheConceptImmediate } from \"./CreateTheConcept\";\nimport GetConceptByCharacter from \"./GetConceptByCharacter\";\nimport MakeTheCharacter from \"./MakeTheCharacter\";\nimport { SplitStrings } from \"./SplitStrings\";\nexport function MakeTheTypeConcept(typeString, sessionId, sessionUserId, userId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let referentId = 999;\n        let securityId = 999;\n        let accessId = 999;\n        let accessUserId = userId;\n        let existingConcept = yield GetConceptByCharacter(typeString);\n        if (existingConcept) {\n            if (existingConcept.id == 0 || existingConcept.userId == 0) {\n                let splittedStringArray = SplitStrings(typeString);\n                if (splittedStringArray.length > 0) {\n                    if (splittedStringArray[0] == typeString) {\n                        let conceptString = yield MakeTheCharacter(typeString, userId, securityId, accessId, accessUserId, sessionId);\n                        existingConcept = conceptString;\n                    }\n                    else {\n                        let categoryId = 1;\n                        let categoryConcept = yield MakeTheTypeConcept(splittedStringArray[0], sessionId, sessionUserId, userId);\n                        let typeConcept = yield MakeTheTypeConcept(splittedStringArray[1], sessionId, sessionUserId, userId);\n                        if (typeConcept) {\n                            let concept = yield CreateTheConceptImmediate(typeString, userId, categoryConcept.id, typeConcept.id, referentId, accessId, splittedStringArray[1]);\n                            existingConcept = concept;\n                        }\n                    }\n                }\n            }\n        }\n        return existingConcept;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConceptsData } from \"./../../DataStructures/ConceptData\";\nimport { BaseUrl } from \"../../DataStructures/BaseUrl\";\nimport { GetRequestHeader } from \"../../Services/Security/GetRequestHeader\";\nimport { CreateDefaultConcept } from \"../../app\";\nimport { HandleHttpError, HandleInternalError } from \"../../Services/Common/ErrorPosting\";\nexport function GetConceptByCharacterAndCategoryDirectApi(characterValue, category_id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let concept = CreateDefaultConcept();\n        try {\n            var header = GetRequestHeader('application/x-www-form-urlencoded');\n            const response = yield fetch(BaseUrl.GetConceptByCharacterAndCategoryDirectUrl(), {\n                method: 'POST',\n                headers: header,\n                body: `character_value=${characterValue}&category_id=${category_id}`,\n            });\n            if (response.ok) {\n                let conceptString = yield response.json();\n                concept = conceptString;\n                ConceptsData.AddConcept(concept);\n            }\n            else {\n                //  throw new Error(`Error! status: ${response.status}`);\n                console.log(\"This is the concept by category and character error\", response.status);\n                HandleHttpError(response);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log(' This is the concept by category and character error message: ', error.message);\n            }\n            else {\n                console.log(' This is the concept by category and character unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetConceptByCharacterAndCategoryDirectUrl());\n        }\n        return concept;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetConceptByCharacterValue } from \"../../Api/GetConceptByCharacterValue\";\nimport { GetConceptByCharacterAndCategoryDirectApi } from \"../../Api/SearchConcept/GetConceptByCharacterAndCategoryDirect\";\nimport { ConceptsData, CreateDefaultConcept, SplitStrings } from \"../../app\";\nexport function GetConceptByCharacterAndCategory(character) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let concept = CreateDefaultConcept();\n        if (character == \"the\") {\n            concept.id = 1;\n            concept.typeId = 5;\n            concept.characterValue = \"the\";\n            return concept;\n        }\n        let splittedStringArray = SplitStrings(character);\n        if (splittedStringArray.length > 1) {\n            let category = 1;\n            let prefix = yield GetConceptByCharacterAndCategory(splittedStringArray[0]);\n            if (prefix.id != 0) {\n                category = prefix.id;\n            }\n            concept = yield GetConceptByCharacterAndCategoryFromMemory(character, category);\n        }\n        else if (splittedStringArray[0] == character) {\n            concept = yield GetConceptByCharacter(character);\n        }\n        return concept;\n    });\n}\nexport function GetConceptByCharacter(characterValue) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let concept = yield ConceptsData.GetConceptByCharacterAndTypeLocal(characterValue, 51);\n        if (concept.id == 0) {\n            concept = yield GetConceptByCharacterValue(characterValue);\n        }\n        return concept;\n    });\n}\nexport function GetConceptByCharacterAndCategoryFromMemory(character, category) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let concept = yield ConceptsData.GetConceptByCharacterAndCategoryLocal(character, category);\n        if (concept.id == 0) {\n            concept = yield GetConceptByCharacterAndCategoryDirectApi(character, category);\n        }\n        return concept;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { GetRequestHeader } from \"../Services/Security/GetRequestHeader\";\nimport { CreateDefaultConcept } from \"../Services/CreateDefaultConcept\";\nimport { GetConceptByCharacterAndCategory } from \"../Services/ConceptFinding/GetConceptByCharacterAndCategory\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\n/**\n *  This function is used to check the type concpet of a passed string\n *  if the text is \"the_person\" then the function finds the related concept\n * @param type This is the type of the concept that needs to be created.\n * @param userId This is the userId of the creator.\n * @returns the concept created.\n */\nexport function MakeTheTypeConceptApi(type, userId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // create  a default concept with all defaulting to zero\n        let concept = CreateDefaultConcept();\n        try {\n            // get the concept by character and category from the api\n            concept = yield GetConceptByCharacterAndCategory(type);\n            if (concept.id == 0 || concept.typeId == 4) {\n                let header = GetRequestHeader('application/x-www-form-urlencoded');\n                const response = yield fetch(BaseUrl.MakeTheTypeConceptUrl(), {\n                    method: 'POST',\n                    headers: header,\n                    body: `type=${type}`\n                });\n                if (!response.ok) {\n                    HandleHttpError(response);\n                    throw new Error(`Error! status: ${response.status}`);\n                }\n                let result = yield response.json();\n                concept = result;\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Make The Type Concept Api error : ', error.message);\n            }\n            else {\n                console.log('Make The Type Concept Api error : ', error);\n            }\n            HandleInternalError(error, BaseUrl.MakeTheTypeConceptUrl());\n        }\n        return concept;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nimport { GetRequestHeader } from \"../Services/Security/GetRequestHeader\";\nimport { BaseUrl } from \"../app\";\nexport function GetAllLinkerConnectionsFromTheConcept(conceptId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var connections = [];\n        try {\n            const start = new Date().getTime();\n            var header = GetRequestHeader('application/x-www-form-urlencoded');\n            const response = yield fetch(BaseUrl.GetAllLinkerConnectionOfConceptUrl() + `?conceptId=${conceptId}`, {\n                method: 'GET',\n                headers: header,\n            });\n            if (response.ok) {\n                const result = yield response.json();\n                for (var i = 0; i < result.length; i++) {\n                    var connection = result[i];\n                    connections.push(connection);\n                }\n            }\n            else {\n                console.log(\"Get all linker connection from the concepts error\", \"cannot get respone\");\n                HandleHttpError(response);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Get all linker connection from the concepts error: ', error.message);\n            }\n            else {\n                console.log('Get all linker connection from the concepts error(Unexpected): ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetAllLinkerConnectionOfConceptUrl());\n        }\n        return connections;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nimport { GetRequestHeader } from \"../Services/Security/GetRequestHeader\";\nimport { BaseUrl } from \"../app\";\nexport function GetAllLinkerConnectionsToTheConcept(conceptId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var connections = [];\n        try {\n            const start = new Date().getTime();\n            var header = GetRequestHeader('application/x-www-form-urlencoded');\n            const response = yield fetch(BaseUrl.GetAllLinkerConnectionToConceptUrl() + `?conceptId=${conceptId}`, {\n                method: 'GET',\n                headers: header,\n            });\n            if (response.ok) {\n                const result = yield response.json();\n                for (var i = 0; i < result.length; i++) {\n                    var connection = result[i];\n                    connections.push(connection);\n                }\n            }\n            else {\n                console.log(\"Get all linker connection To the concepts error\", \"cannot get respone\");\n                HandleHttpError(response);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Get all linker connection To the concepts error: ', error.message);\n            }\n            else {\n                console.log('Get all linker connection To the concepts error(Unexpected): ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetAllLinkerConnectionToConceptUrl());\n        }\n        return connections;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetAllLinkerConnectionsFromTheConcept } from \"../Api/GetAllLinkerConnectionsFromTheConcept\";\nimport { GetAllLinkerConnectionsToTheConcept } from \"../Api/GetAllLinkerConnectionsToTheConcept\";\nimport GetTheConcept from \"./GetTheConcept\";\nexport function GetLinkerConnectionFromConcepts(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let connections = yield GetAllLinkerConnectionsFromTheConcept(id);\n        for (let i = 0; i < connections.length; i++) {\n            let localConnection = connections[i];\n            let connectionIdentifier = localConnection.typeId;\n            let concept = yield GetTheConcept(connectionIdentifier);\n            localConnection.type = concept;\n        }\n        return connections;\n    });\n}\nexport function GetLinkerConnectionToConcepts(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let connections = yield GetAllLinkerConnectionsToTheConcept(id);\n        for (let i = 0; i < connections.length; i++) {\n            let localConnection = connections[i];\n            let connectionIdentifier = localConnection.typeId;\n            let concept = yield GetTheConcept(connectionIdentifier);\n            localConnection.type = concept;\n        }\n        return connections;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nimport { GetOnlyTokenHeader } from \"../Services/Security/GetRequestHeader\";\nexport default function DeleteTheConcept(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const formdata = new FormData();\n            formdata.append(\"id\", id.toString());\n            let header = GetOnlyTokenHeader();\n            const response = yield fetch(BaseUrl.DeleteConceptUrl(), {\n                method: 'POST',\n                headers: header,\n                body: formdata\n            });\n            if (!response.ok) {\n                // throw new Error(`Error! status: ${response.status}`);\n                console.log(\"Delete concept error\", response.status);\n                HandleHttpError(response);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Delete concept error message: ', error.message);\n            }\n            else {\n                console.log('Delete concept unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.DeleteConceptUrl());\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport DeleteTheConcept from \"../Api/DeleteTheConcept\";\nimport { BinaryCharacterTree } from \"../DataStructures/BinaryCharacterTree\";\nimport { BinaryTree } from \"../DataStructures/BinaryTree\";\nimport { BinaryTypeTree } from \"../DataStructures/BinaryTypeTree\";\nimport { ConnectionOfTheTree } from \"../DataStructures/ConnectionBinaryTree/ConnectionOfTheTree\";\nimport { LocalConceptsData } from \"../app\";\nimport GetTheConcept from \"./GetTheConcept\";\nexport function DeleteConceptById(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (id > 0) {\n            var concept = yield GetTheConcept(id);\n            var typeId = concept.typeId;\n            var character = concept.characterValue;\n            yield BinaryTypeTree.removeTypeConcept(typeId, id);\n            yield BinaryCharacterTree.removeNodeByCharacter(character, id);\n            //removeFromDatabase(\"concept\",id);\n            yield DeleteTheConcept(id);\n            yield BinaryTree.removeNodeFromTree(id);\n            yield ConnectionOfTheTree.removeNodeFromTree(id);\n        }\n        else {\n            LocalConceptsData.RemoveConceptById(id);\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../../DataStructures/BaseUrl\";\nimport { HandleHttpError, HandleInternalError } from \"../../Services/Common/ErrorPosting\";\nexport function TrashTheConcept(id, token) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const myHeaders = new Headers();\n            myHeaders.append('Authorization', 'Bearer ' + token);\n            const formdata = new FormData();\n            formdata.append('id', id.toString());\n            const response = yield fetch(BaseUrl.DeleteConceptUrl(), {\n                method: 'POST',\n                body: formdata,\n                headers: myHeaders,\n            });\n            if (!response.ok) {\n                HandleHttpError(response);\n                throw new Error(`Delete composition Error! status: ${response.status}`);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Delete composition error message: ', error.message);\n            }\n            else {\n                console.log('Delete composition unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.DeleteConceptUrl());\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { MakeTheTypeConceptApi } from \"../app\";\nimport { CreateDefaultConcept } from \"./CreateDefaultConcept\";\nimport MakeTheConcept from \"./MakeTheConcept\";\nexport function MakeTheTimestamp(type_1, referent_1, userId_1) {\n    return __awaiter(this, arguments, void 0, function* (type, referent, userId, accessId = 4, sessionInformationId = 999) {\n        let categoryId = 4;\n        let referentId = 0;\n        // change this\n        let stringToCheck = \"\";\n        let startsWithThe = type.startsWith(\"the_\");\n        let typeConcept = CreateDefaultConcept();\n        let concept;\n        if (startsWithThe) {\n            stringToCheck = type;\n        }\n        else {\n            stringToCheck = \"the_\" + type;\n        }\n        let typeConceptString = yield MakeTheTypeConceptApi(stringToCheck, userId);\n        typeConcept = typeConceptString;\n        let conceptString = yield MakeTheConcept(referent, userId, categoryId, typeConcept.id, referentId, accessId, stringToCheck);\n        concept = conceptString;\n        return concept;\n    });\n}\n","export class SearchQuery {\n    constructor() {\n        this.composition = 0;\n        this.type = \"\";\n        this.linker = \"\";\n        this.inpage = 10;\n        this.page = 1;\n        this.listLinkers = [];\n        this.fullLinkers = [];\n        this.textSearch = \"\";\n        this.logic = \"or\";\n        this.reverse = false;\n        this.doFilter = false;\n        this.filterSearches = [];\n        this.selectors = [];\n        this.ofCompositions = [];\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConnectionData } from \"./../DataStructures/ConnectionData\";\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { FindConceptsFromConnections } from \"../Services/FindConeceptsFromConnection\";\nimport { GetRequestHeader } from \"../Services/Security/GetRequestHeader\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\n/**\n * After fetching these connections it is saved in the local static ConnectionBinaryTree so it can be reused without being fetched\n * @param connectionIds array of connection ids that need to fetched by the local system\n * @returns the list of  connections that have been fetched\n */\nexport function GetConnectionBulk() {\n    return __awaiter(this, arguments, void 0, function* (connectionIds = []) {\n        let connectionList = [];\n        try {\n            if (connectionIds.length > 0) {\n                let bulkConnectionFetch = [];\n                // if the connections are already present in the local memory then take it from there \n                //else put it in a list called bulkConnectionFetch which will be used to call and api.\n                for (let i = 0; i < connectionIds.length; i++) {\n                    let conceptUse = yield ConnectionData.GetConnection(connectionIds[i]);\n                    if (conceptUse.id == 0) {\n                        bulkConnectionFetch.push(connectionIds[i]);\n                    }\n                    else {\n                        connectionList.push(conceptUse);\n                    }\n                }\n                // let remainingIds:any = {};\n                // await ConnectionData.GetConnectionBulkData(connectionIds, connectionList, remainingIds );\n                //bulkConnectionFetch = connectionIds;\n                // if the case that bulkConnectionFetch does not have any elements then we just return everything we have\n                if (bulkConnectionFetch.length == 0) {\n                    return connectionList;\n                }\n                else {\n                    // if the connection could not be found in the local memory then fetch from the api.\n                    let header = GetRequestHeader();\n                    const response = yield fetch(BaseUrl.GetConnectionBulkUrl(), {\n                        method: 'POST',\n                        headers: header,\n                        body: JSON.stringify(bulkConnectionFetch)\n                    });\n                    if (response.ok) {\n                        const result = yield response.json();\n                        if (result.length > 0) {\n                            for (let i = 0; i < result.length; i++) {\n                                let connection = result[i];\n                                connectionList.push(connection);\n                                ConnectionData.AddConnection(connection);\n                            }\n                        }\n                    }\n                    else {\n                        HandleHttpError(response);\n                        console.log(\"Get Connection Bulk error\", response.status);\n                    }\n                }\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Get Connection Bulk error message: ', error);\n            }\n            else {\n                console.log('Get Connection Bulk unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetConnectionBulkUrl());\n        }\n        yield FindConceptsFromConnections(connectionList);\n        return connectionList;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetAllConnectionsOfCompositionBulk } from \"../Api/GetAllConnectionsOfCompositionBulk\";\nimport { GetConnectionBulk } from \"../Api/GetConnectionBulk\";\nimport { ConnectionData, GetConceptBulk } from \"../app\";\nimport { FindConnectionsOfCompositionsBulkInMemory } from \"./FindConnectionsOfCompositionBulkInMemory\";\nimport { GetCompositionFromMemory, GetCompositionFromMemoryNormal, GetCompositionWithIdFromMemory, GetCompositionWithIdFromMemoryNew } from \"./GetComposition\";\n/**\n * ## Format JUSTDATA ##\n * Function converts the conceptIds to json (compositions)\n * This function takes in the conceptIds and returns a list of compositions related to those concepts.\n * @param conceptIds  list of concept ids that are compositions.\n * @returns compositions\n */\nexport function GetCompositionBulk() {\n    return __awaiter(this, arguments, void 0, function* (conceptIds = []) {\n        yield GetAllConnectionsOfCompositionBulk(conceptIds);\n        let compositions = [];\n        for (let i = 0; i < conceptIds.length; i++) {\n            let comp = yield GetCompositionFromMemory(conceptIds[i]);\n            compositions.push(comp);\n        }\n        return compositions;\n    });\n}\n/**\n * ## FORMAT DATAIDDATE ##\n * Function converts the conceptIds to json (compositions)\n * @param conceptIds this is the list of concept ids that should be converted to compostions in data - id format.\n * @returns list of compositions in the data - id format.\n */\nexport function GetCompositionBulkWithDataId() {\n    return __awaiter(this, arguments, void 0, function* (conceptIds = []) {\n        yield GetAllConnectionsOfCompositionBulk(conceptIds);\n        let compositions = [];\n        for (let i = 0; i < conceptIds.length; i++) {\n            let comp = yield GetCompositionWithIdFromMemory(conceptIds[i]);\n            compositions.push(comp);\n        }\n        return compositions;\n    });\n}\n/**\n * ## FORMAT DATAIDDATE ##\n * This function converts the conceptIds and internal connectionIds to compositions in data-Id format.\n * @param conceptIds This is the list of concept ids that need to be converted to compositions.\n * @param connectionIds These are the internal connectionIds that need to be passed to create the compositions.\n * @returns list of compositions created from the passed conceptIds and connectionIds.\n */\nexport function GetCompositionFromConnectionsWithDataId() {\n    return __awaiter(this, arguments, void 0, function* (conceptIds = [], connectionIds = []) {\n        let newConnections = yield GetConnectionBulk(connectionIds);\n        let oldConnections = yield FindConnectionsOfCompositionsBulkInMemory(conceptIds);\n        //CheckForConnectionDeletionWithIds(connectionIds,oldConnections);\n        let compositions = [];\n        for (let i = 0; i < conceptIds.length; i++) {\n            let comp = yield GetCompositionWithIdFromMemory(conceptIds[i]);\n            compositions.push(comp);\n        }\n        return compositions;\n    });\n}\n/**\n * ## Format DATAIDDATE ##\n * This function converts the conceptIds and internal connectionIds to compositions in data-Id format with index(conceptId).\n * @param conceptIds This is the list of concept ids that need to be converted to compositions.\n * @param connectionIds These are the internal connectionIds that need to be passed to create the compositions.\n * @returns dictionary of compositions created from the passed conceptIds and connectionIds with conceptId as its index .\n */\nexport function GetCompositionFromConnectionsWithDataIdIndex() {\n    return __awaiter(this, arguments, void 0, function* (conceptIds = [], connectionIds = []) {\n        let newConnections = yield GetConnectionBulk(connectionIds);\n        let myNewConnections = newConnections;\n        let oldConnections = yield FindConnectionsOfCompositionsBulkInMemory(conceptIds);\n        //CheckForConnectionDeletionWithIds(connectionIds,oldConnections);\n        let compositions = {};\n        for (let i = 0; i < conceptIds.length; i++) {\n            let comp = yield GetCompositionWithIdFromMemory(conceptIds[i]);\n            compositions[conceptIds[i]] = comp;\n        }\n        return compositions;\n    });\n}\n/**\n * ## Format is dictionary with key as concept id and value as data (json) ##\n * This function converts the conceptIds and internal connectionIds to compositions format with index(conceptId).\n * @param conceptIds This is the list of concept ids that need to be converted to compositions.\n * @param connectionIds These are the internal connectionIds that need to be passed to create the compositions.\n * @returns dictionary of compositions created from the passed conceptIds and connectionIds with conceptId as its index .\n */\nexport function GetCompositionFromConnectionsWithIndex() {\n    return __awaiter(this, arguments, void 0, function* (conceptIds = [], connectionIds = []) {\n        let newConnections = yield GetConnectionBulk(connectionIds);\n        let myNewConnections = newConnections;\n        let oldConnections = yield FindConnectionsOfCompositionsBulkInMemory(conceptIds);\n        //CheckForConnectionDeletionWithIds(connectionIds,oldConnections);\n        let compositions = {};\n        for (let i = 0; i < conceptIds.length; i++) {\n            let comp = yield GetCompositionFromMemory(conceptIds[i]);\n            compositions[conceptIds[i]] = comp;\n        }\n        return compositions;\n    });\n}\n/**\n * Used to prefetch all the connections and their related concepts.\n * @param connectionIds these are the connection ids that are used to fetch all the connections and also their related concepts.\n * @returns all the connections that are passed as ids.\n */\nexport function GetConnectionDataPrefetch(connectionIds) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let remainingConnections = [];\n        let connectionsAll = [];\n        let remainingIds = {};\n        for (let i = 0; i < connectionIds.length; i++) {\n            let connection = yield ConnectionData.GetConnection(connectionIds[i]);\n            // console.log(\"this is the connection fetch\", connection);\n            if (connection.id == 0) {\n                remainingConnections.push(connectionIds[i]);\n            }\n            else {\n                connectionsAll.push(connection);\n            }\n        }\n        for (let i = 0; i < connectionIds.length; i++) {\n            remainingIds[connectionIds[i]] = false;\n        }\n        //await ConnectionData.GetConnectionBulkData(connectionIds, connectionsAll, remainingIds);\n        // for(let key in remainingIds){\n        //     if(remainingIds[key] == false){\n        //         remainingConnections.push(Number(key));\n        //     }\n        // }\n        // remainingConnections = connectionIds;\n        let prefetchConcepts = [];\n        let connectionsAllLocal = yield GetConnectionBulk(remainingConnections);\n        connectionsAll = [...connectionsAll, ...connectionsAllLocal];\n        for (let j = 0; j < connectionsAll.length; j++) {\n            prefetchConcepts.push(connectionsAll[j].ofTheConceptId);\n            prefetchConcepts.push(connectionsAll[j].toTheConceptId);\n        }\n        yield GetConceptBulk(prefetchConcepts);\n        return connectionsAll;\n    });\n}\n/**\n * ## Format DATAIDDATE ##\n * This function converts the conceptIds and internal connections to create compositions.\n * Format is of a dictionary with ids as the key and value is the composition data.\n * @param conceptIds these are the concept ids that need to be fetched to create their compositions\n * @param connections these are the connections that are used to create the structure.\n * @returns a dictionary / object that has key as their conceptId and the value as their composition object.\n */\nexport function GetCompositionFromConnectionsWithDataIdInObject() {\n    return __awaiter(this, arguments, void 0, function* (conceptIds = [], connections = []) {\n        // get all the connections that are not available in memory from the api.\n        yield GetConnectionBulk(connections);\n        // create a list of compositions from the fetched concepts and connections.\n        let compositions = {};\n        for (let i = 0; i < conceptIds.length; i++) {\n            let comp = yield GetCompositionWithIdFromMemory(conceptIds[i]);\n            compositions[conceptIds[i]] = comp;\n        }\n        return compositions;\n    });\n}\n/**\n * ## Format DATAIDDATE ##\n * ## duplicate ##\n * This function converts the conceptIds and internal connections to create compositions.\n * @param conceptIds these are the concept ids that need to be fetched to create their compositions\n * @param connections these are the connections that are used to create the structure.\n * @returns a dictionary / object that has key as their conceptId and the value as their composition object.\n */\nexport function GetCompositionFromConnectionsWithDataIdInObjectNew() {\n    return __awaiter(this, arguments, void 0, function* (conceptIds = [], connections = []) {\n        // get all the connections that are not available in memory from the api.\n        yield GetConnectionBulk(connections);\n        // create a list of compositions from the fetched concepts and connections.\n        let compositions = {};\n        for (let i = 0; i < conceptIds.length; i++) {\n            let comp = yield GetCompositionWithIdFromMemoryNew(conceptIds[i]);\n            compositions[conceptIds[i]] = comp;\n        }\n        return compositions;\n    });\n}\n/**\n * ## Format justdata ##\n * This function converts the conceptIds and internal connections to create compositions.\n * @param conceptIds these are the concept ids that need to be fetched to create their compositions\n * @param connections these are the connections that are used to create the structure.\n * @returns a dictionary / object that has key as their conceptId and the value as their composition object.\n */\nexport function GetCompositionFromConnectionsInObject() {\n    return __awaiter(this, arguments, void 0, function* (conceptIds = [], connections = []) {\n        // get all the connections that are not available in memory from the api.\n        yield GetConnectionBulk(connections);\n        // create a list of compositions from the fetched concepts and connections.\n        let compositions = {};\n        for (let i = 0; i < conceptIds.length; i++) {\n            let comp = yield GetCompositionFromMemory(conceptIds[i]);\n            compositions[conceptIds[i]] = comp;\n        }\n        return compositions;\n    });\n}\n/**\n * ## Format Normal ##\n * This function converts the conceptIds and internal connections to create compositions.\n * @param conceptIds these are the concept ids that need to be fetched to create their compositions\n * @param connections these are the connections that are used to create the structure.\n * @returns a dictionary / object that has key as their conceptId and the value as their composition object.\n */\nexport function GetCompositionFromConnectionsInObjectNormal() {\n    return __awaiter(this, arguments, void 0, function* (conceptIds = [], connections = []) {\n        // get all the connections that are not available in memory from the api.\n        yield GetConnectionBulk(connections);\n        // create a list of compositions from the fetched concepts and connections.\n        let compositions = {};\n        for (let i = 0; i < conceptIds.length; i++) {\n            let comp = yield GetCompositionFromMemoryNormal(conceptIds[i]);\n            compositions[conceptIds[i]] = comp;\n        }\n        return compositions;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { SearchQuery } from \"../DataStructures/SearchQuery\";\nimport { GetCompositionFromConnectionsWithDataId } from \"../Services/GetCompositionBulk\";\nimport { GetRequestHeader } from \"../Services/Security/GetRequestHeader\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nexport function RecursiveSearchApi() {\n    return __awaiter(this, arguments, void 0, function* (composition = 0, listLinkers = [], textSearch = \"\") {\n        let concepts = [];\n        try {\n            let searchQuery = new SearchQuery();\n            searchQuery.composition = composition;\n            searchQuery.listLinkers = listLinkers;\n            searchQuery.textSearch = textSearch;\n            let raw = JSON.stringify(searchQuery);\n            let Connections = [];\n            let myHeaders = GetRequestHeader();\n            const response = yield fetch(BaseUrl.RecursiveSearchUrl(), {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw\n            });\n            if (response.ok) {\n                const result = yield response.json();\n                let conceptIds = result.compositionIds;\n                let connections = result.internalConnections;\n                let externalConnections = result.externalConnections;\n                concepts = yield GetCompositionFromConnectionsWithDataId(conceptIds, connections);\n            }\n            else {\n                console.log(\"recursive search error \", response.status);\n                HandleHttpError(response);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('recursive search error message: ', error.message);\n            }\n            else {\n                console.log('recursive search unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.RecursiveSearchUrl());\n        }\n        return concepts;\n    });\n}\nexport function RecursiveSearchApiRaw() {\n    return __awaiter(this, arguments, void 0, function* (composition = 0, listLinkers = [], textSearch = \"\") {\n        let concepts = [];\n        try {\n            let searchQuery = new SearchQuery();\n            searchQuery.composition = composition;\n            searchQuery.listLinkers = listLinkers;\n            searchQuery.textSearch = textSearch;\n            let raw = JSON.stringify(searchQuery);\n            let Connections = [];\n            let myHeaders = GetRequestHeader();\n            const response = yield fetch(BaseUrl.RecursiveSearchUrl(), {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw\n            });\n            if (response.ok) {\n                const result = yield response.json();\n                let conceptIds = result.compositionIds;\n                let connections = result.internalConnections;\n                let externalConnections = result.externalConnections;\n                return result;\n            }\n            else {\n                console.log(\"recursive search error \", response.status);\n                HandleHttpError(response);\n            }\n            return [];\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('recursive search error message: ', error.message);\n            }\n            else {\n                console.log('recursive search unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.RecursiveSearchUrl());\n        }\n    });\n}\nexport function RecursiveSearchApiRawFullLinker() {\n    return __awaiter(this, arguments, void 0, function* (composition = 0, fullLinkers = [], textSearch = \"\") {\n        let concepts = [];\n        try {\n            let searchQuery = new SearchQuery();\n            searchQuery.composition = composition;\n            searchQuery.fullLinkers = fullLinkers;\n            searchQuery.textSearch = textSearch;\n            let raw = JSON.stringify(searchQuery);\n            let Connections = [];\n            let myHeaders = GetRequestHeader();\n            const response = yield fetch(BaseUrl.RecursiveSearchUrl(), {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw\n            });\n            if (response.ok) {\n                const result = yield response.json();\n                let conceptIds = result.compositionIds;\n                let connections = result.internalConnections;\n                let externalConnections = result.externalConnections;\n                return result;\n            }\n            else {\n                console.log(\"recursive search error \", response.status);\n                HandleHttpError(response);\n            }\n            return [];\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('recursive search error message: ', error.message);\n            }\n            else {\n                console.log('recursive search unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.RecursiveSearchUrl());\n        }\n    });\n}\nexport function RecursiveSearchApiNewRawFullLinker() {\n    return __awaiter(this, arguments, void 0, function* (composition = 0, fullLinkers = [], textSearch = \"\") {\n        let concepts = [];\n        try {\n            let searchQuery = new SearchQuery();\n            searchQuery.composition = composition;\n            searchQuery.fullLinkers = fullLinkers;\n            searchQuery.textSearch = textSearch;\n            let raw = JSON.stringify(searchQuery);\n            let Connections = [];\n            let myHeaders = GetRequestHeader();\n            const response = yield fetch(BaseUrl.RecursiveSearchUrl(), {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw\n            });\n            if (response.ok) {\n                const result = yield response.json();\n                let conceptIds = result.compositionIds;\n                let connections = result.internalConnections;\n                let externalConnections = result.externalConnections;\n                return result;\n            }\n            else {\n                console.log(\"recursive search error \", response.status);\n                HandleHttpError(response);\n            }\n            return [];\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('recursive search error message: ', error.message);\n            }\n            else {\n                console.log('recursive search unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.RecursiveSearchUrl());\n        }\n    });\n}\nexport function RecursiveSearchLocal(composition_1) {\n    return __awaiter(this, arguments, void 0, function* (composition, listLinkers = [], textSearch = \"\") {\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { TokenStorage } from '../DataStructures/Security/TokenStorage';\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nexport function LoginToBackend(email, password) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let object = {\n                'email': email,\n                'password': password\n            };\n            let myHeaders = new Headers();\n            myHeaders.append(\"Content-Type\", \"application/json\");\n            let requestObject = JSON.stringify(object);\n            const response = yield fetch(BaseUrl.LoginUrl(), {\n                method: 'POST',\n                headers: myHeaders,\n                body: requestObject\n            });\n            if (response.ok) {\n                const result = yield response.json();\n                console.log(result.data);\n                TokenStorage.BearerAccessToken = result.data.token;\n                console.log(\"this is the token\", TokenStorage.BearerAccessToken);\n                return result;\n            }\n            else {\n                console.log('Login tsccs error message: ', response.status);\n                HandleHttpError(response);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Login tsccs error message: ', error.message);\n            }\n            else {\n                console.log(' Login tsccs  unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.LoginUrl());\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nimport { BaseUrl } from \"../app\";\nexport default function Signup(signupModel) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const signupResponse = yield postData(BaseUrl.SignupUrl(), signupModel);\n        return signupResponse;\n    });\n}\nfunction postData() {\n    return __awaiter(this, arguments, void 0, function* (url = '', data = {}) {\n        let freeschemaRes = {\n            message: 'success',\n            status: false,\n            statusCode: 200,\n            data: '',\n        };\n        // Default options are marked with *\n        try {\n            const response = yield fetch(url, {\n                method: 'POST', // *GET, POST, PUT, DELETE, etc.\n                mode: 'cors', // no-cors, *cors, same-origin\n                cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n                credentials: 'same-origin', // include, *same-origin, omit\n                headers: {\n                    'Content-Type': 'application/json',\n                    // 'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                redirect: 'follow', // manual, *follow, error\n                referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n                body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n            });\n            const output = yield response.json();\n            if (response.ok) {\n                freeschemaRes = {\n                    message: 'success',\n                    status: true,\n                    statusCode: 200,\n                    data: output,\n                };\n            }\n            else {\n                HandleHttpError(response);\n            }\n            return freeschemaRes;\n        }\n        catch (error) {\n            console.log('Signup Error: ', error);\n            HandleInternalError(error, url);\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nimport { BaseUrl } from \"../app\";\nexport default function Signin(signinInfo) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const raw = JSON.stringify({\n            email: signinInfo.email,\n            password: signinInfo.password,\n        });\n        let freeschemaRes = {\n            message: 'success',\n            status: false,\n            statusCode: 200,\n            data: '',\n        };\n        const myHeaders = new Headers();\n        myHeaders.append('Content-Type', 'application/json');\n        const url = BaseUrl.LoginUrl();\n        try {\n            const response = yield fetch(url, {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow',\n            });\n            const output = yield response.json();\n            if (response.ok) {\n                const dataObject = output === null || output === void 0 ? void 0 : output.data;\n                freeschemaRes = {\n                    message: 'success',\n                    status: true,\n                    statusCode: 200,\n                    data: dataObject,\n                };\n            }\n            else {\n                HandleHttpError(response);\n            }\n            return freeschemaRes;\n        }\n        catch (error) {\n            console.log('Sign in api error', error);\n            HandleInternalError(error, url);\n        }\n    });\n}\n","export default function InsertUniqueNumber(Array, toInsert) {\n    if (Array.indexOf(toInsert) === -1) {\n        Array.push(toInsert);\n    }\n    return Array;\n}\n","import { Connection } from \"../DataStructures/Connection\";\nimport { CreateDefaultConcept } from \"../Services/CreateDefaultConcept\";\nexport function CheckIfConceptsExistsInArray(conceptList = [], concept) {\n    let foundConcept = CreateDefaultConcept();\n    if (Array.isArray(conceptList)) {\n        const check = conceptList.find(c => c.id === concept.id);\n        if (check) {\n            foundConcept = check;\n        }\n    }\n    return foundConcept;\n}\n// export function CheckIfTypeConceptExistsInArray(\n//   conceptList: Concept[] = [],\n//   concept: Concept,\n// ) {\n//   let newConceptType = concept.type?.characterValue;\n//   if(!newConceptType?.startsWith(\"the_\")){\n//     newConceptType = \"the_\" + newConceptType;\n//   }\n//   let startsWith = conceptList[i].type?.characterValue;\n//   if(!startsWith?.startsWith(\"the_\")){\n//     startsWith = \"the_\" + startsWith;\n//   }\n//   let foundConcept = CreateDefaultConcept()\n//   if (Array.isArray(conceptList)) {\n//     const check = conceptList.find(c => c.typeId == concept.typeId)\n//     if (check) {\n//       foundConcept = check\n//     }\n//   }\n//   return foundConcept\n// }\nexport function CheckIfTypeConceptsExistsInArray(conceptList = [], concept) {\n    var _a, _b;\n    let foundConcepts = [];\n    let newConceptType = (_a = concept.type) === null || _a === void 0 ? void 0 : _a.characterValue;\n    if (!(newConceptType === null || newConceptType === void 0 ? void 0 : newConceptType.startsWith(\"the_\"))) {\n        newConceptType = \"the_\" + newConceptType;\n    }\n    if (Array.isArray(conceptList)) {\n        for (let i = 0; i < conceptList.length; i++) {\n            let startsWith = (_b = conceptList[i].type) === null || _b === void 0 ? void 0 : _b.characterValue;\n            if (!(startsWith === null || startsWith === void 0 ? void 0 : startsWith.startsWith(\"the_\"))) {\n                startsWith = \"the_\" + startsWith;\n            }\n            if (concept.typeId == conceptList[i].typeId || newConceptType == startsWith) {\n                foundConcepts.push(conceptList[i]);\n            }\n        }\n    }\n    return foundConcepts;\n}\nexport function CheckIfTypeLConceptsExistsInArray(conceptList = [], concept) {\n    let foundConcepts = [];\n    let newConceptType = concept.typeCharacter;\n    if (!(newConceptType === null || newConceptType === void 0 ? void 0 : newConceptType.startsWith(\"the_\"))) {\n        newConceptType = \"the_\" + newConceptType;\n    }\n    if (Array.isArray(conceptList)) {\n        for (let i = 0; i < conceptList.length; i++) {\n            let startsWith = conceptList[i].typeCharacter;\n            if (!(startsWith === null || startsWith === void 0 ? void 0 : startsWith.startsWith(\"the_\"))) {\n                startsWith = \"the_\" + startsWith;\n            }\n            if (concept.typeId == conceptList[i].typeId || newConceptType == startsWith) {\n                foundConcepts.push(conceptList[i]);\n            }\n        }\n    }\n    return foundConcepts;\n}\nexport function CheckIfConnectionExistsInArray(connectionList = [], connection) {\n    let foundConnection = new Connection(0, 0, 0, 0, 0, 0, 0);\n    if (Array.isArray(connectionList)) {\n        const check = connectionList.find(c => c.id === connection.id);\n        if (check) {\n            foundConnection = check;\n        }\n    }\n    return foundConnection;\n}\nexport function CheckIfToTheConceptExistsInConnectionArray(connectionList = [], conceptId) {\n    let foundConnection = new Connection(0, 0, 0, 0, 0, 0, 0);\n    if (Array.isArray(connectionList)) {\n        const check = connectionList.find(c => c.toTheConceptId === conceptId);\n        if (check) {\n            foundConnection = check;\n        }\n        const toCheck = connectionList.find(c => c.ofTheConceptId === conceptId);\n        if (toCheck) {\n            foundConnection = toCheck;\n        }\n    }\n    return foundConnection;\n}\nexport function CheckAllConnectionsConnectedInConnectionArray(connectionList = [], conceptId) {\n    let foundConnections = [];\n    if (Array.isArray(connectionList)) {\n        const check = connectionList.find(c => c.toTheConceptId == conceptId);\n        if (check) {\n            foundConnections.push(check);\n        }\n        const toCheck = connectionList.find(c => c.ofTheConceptId == conceptId);\n        if (toCheck) {\n            foundConnections.push(toCheck);\n        }\n    }\n    return foundConnections;\n}\nexport function CheckAllConnectionsConnectedInLConnectionArray(connectionList = [], conceptId) {\n    let foundConnections = [];\n    if (Array.isArray(connectionList)) {\n        const check = connectionList.find(c => c.toTheConceptId == conceptId);\n        if (check) {\n            foundConnections.push(check);\n        }\n        const toCheck = connectionList.find(c => c.ofTheConceptId == conceptId);\n        if (toCheck) {\n            foundConnections.push(toCheck);\n        }\n    }\n    return foundConnections;\n}\n","export function RemoveConceptFromList(conceptList = [], concept) {\n    if (Array.isArray(conceptList)) {\n        conceptList.splice(conceptList.findIndex(function (i) {\n            return i.id === concept.id;\n        }), 1);\n    }\n}\nexport function RemoveConnectionFromList(connectionList = [], connection) {\n    if (Array.isArray(connectionList)) {\n        connectionList.splice(connectionList.findIndex(function (i) {\n            return i.id === connection.id;\n        }), 1);\n    }\n}\nexport function RemoveLConnectionFromList(connectionList = [], connection) {\n    if (Array.isArray(connectionList)) {\n        connectionList.splice(connectionList.findIndex(function (i) {\n            return i.id === connection.id;\n        }), 1);\n    }\n}\n","import { CompositionBinaryTree } from './CompositionBinaryTree';\nexport class CompositionNode {\n    constructor(key, value, leftNode, rightNode) {\n        this.expiryTime = new Date(Date.now() + 10 * 60 * 1000);\n        this.height = 1;\n        this.key = key;\n        this.value = value;\n        this.leftNode = leftNode;\n        this.rightNode = rightNode;\n    }\n    isValid() {\n        const currentTime = new Date(Date.now());\n        if (this.expiryTime < currentTime) {\n            CompositionBinaryTree.removeNodeFromTree(this.key);\n            return false;\n        }\n        return true;\n    }\n    saveToCache(data) {\n        this.value.cached = data;\n    }\n    addNode(passedNode, node, height) {\n        if (node == null) {\n            node = passedNode;\n            return node;\n        }\n        const LeftNode = node.leftNode;\n        const RightNode = node.rightNode;\n        if (node.key > passedNode.key) {\n            node.leftNode = this.addNode(passedNode, LeftNode, height);\n        }\n        else if (node.key < passedNode.key) {\n            node.rightNode = this.addNode(passedNode, RightNode, height);\n        }\n        // else if (node.key == passedNode.key && node.key != \"\"){\n        //     node.currentNode = passedNode;\n        // }\n        else {\n            this.isValid();\n            node = passedNode;\n            return node;\n        }\n        node.height =\n            1 +\n                Math.max(this.getHeight(node.leftNode), this.getHeight(node.rightNode));\n        const balancingFactor = this.getBalanceFactor(node);\n        if (balancingFactor > 1) {\n            if (node.leftNode) {\n                if (passedNode.key < node.leftNode.key) {\n                    return this.rightRotate(node);\n                }\n                else if (passedNode.key > node.leftNode.key) {\n                    node.leftNode = this.leftRotate(node.leftNode);\n                    return this.rightRotate(node);\n                }\n            }\n        }\n        if (balancingFactor < -1) {\n            if (node.rightNode) {\n                if (passedNode.key > node.rightNode.key) {\n                    return this.leftRotate(node);\n                }\n                else if (passedNode.key < node.rightNode.key) {\n                    node.rightNode = this.rightRotate(node.rightNode);\n                    return this.leftRotate(node);\n                }\n            }\n        }\n        this.isValid();\n        return node;\n    }\n    rightRotate(y) {\n        if (y) {\n            const x = y.leftNode;\n            if (x) {\n                const T2 = x.rightNode;\n                y.leftNode = T2;\n                x.rightNode = y;\n                y.height =\n                    Math.max(this.getHeight(y.leftNode), this.getHeight(y.rightNode)) + 1;\n                x.height =\n                    Math.max(this.getHeight(x.leftNode), this.getHeight(x.rightNode)) + 1;\n                return x;\n            }\n            // return x;\n        }\n        return y;\n    }\n    leftRotate(x) {\n        if (x) {\n            const y = x.rightNode;\n            if (y) {\n                const T2 = y.leftNode;\n                y.leftNode = x;\n                x.rightNode = T2;\n                x.height = Math.max(this.getHeight(x.leftNode), this.getHeight(x.rightNode) + 1);\n                y.height = Math.max(this.getHeight(y.leftNode), this.getHeight(x.rightNode) + 1);\n                return y;\n            }\n            //return y;\n        }\n        return x;\n    }\n    getHeight(node) {\n        if (node) {\n            return node.height;\n        }\n        return 0;\n    }\n    getBalanceFactor(N) {\n        if (N == null) {\n            return 0;\n        }\n        return this.getHeight(N.leftNode) - this.getHeight(N.rightNode);\n    }\n    getFromNode(id, node) {\n        if (node) {\n            if (id == node.key && node.isValid()) {\n                return node;\n            }\n            else if (id < node.key) {\n                return this.getFromNode(id, node.leftNode);\n            }\n            else if (id > node.key) {\n                return this.getFromNode(id, node.rightNode);\n            }\n            return node;\n        }\n        return node;\n    }\n    removeNode(passedNode, id) {\n        if (passedNode == null) {\n            return passedNode;\n        }\n        if (passedNode.key > id) {\n            passedNode.leftNode = this.removeNode(passedNode.leftNode, id);\n            return passedNode;\n        }\n        else if (passedNode.key < id) {\n            passedNode.rightNode = this.removeNode(passedNode.rightNode, id);\n            return passedNode;\n        }\n        if (passedNode.leftNode == null) {\n            const temp = passedNode.rightNode;\n            passedNode = null;\n            return temp;\n        }\n        else if (passedNode.rightNode == null) {\n            const temp = passedNode.leftNode;\n            passedNode = null;\n            return temp;\n        }\n        else {\n            // passing the rightNode to the inOrderSuccessor gives the immediate successor of the node\n            const immediateSuccessor = this.inOrderSuccessor(passedNode.rightNode);\n            passedNode.value = immediateSuccessor.value;\n            passedNode.key = immediateSuccessor.key;\n            passedNode.rightNode = this.removeNode(passedNode.rightNode, immediateSuccessor.key);\n            return passedNode;\n        }\n    }\n    countNodeBelow(root) {\n        if (root == null) {\n            return 0;\n        }\n        //recursive call to left child and right child and\n        // add the result of these with 1 ( 1 for counting the root)\n        return (1 +\n            this.countNodeBelow(root.leftNode) +\n            this.countNodeBelow(root.rightNode));\n    }\n    inOrderSuccessor(root) {\n        while (root.leftNode != null) {\n            root = root.leftNode;\n        }\n        return root;\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CompositionNode } from './CompositionNode';\nexport class CompositionBinaryTree {\n    static addNodeToTree(node) {\n        if (this.root == null) {\n            this.root = node;\n            return this.root;\n        }\n        else {\n            this.root = this.root.addNode(node, this.root, this.root.height);\n        }\n    }\n    static addCompositionToTree(composition) {\n        const node = new CompositionNode(composition.id, composition, null, null);\n        this.addNodeToTree(node);\n    }\n    static getNodeFromTree(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.root) {\n                const Node = this.root.getFromNode(id, this.root);\n                return Node;\n            }\n            return null;\n        });\n    }\n    static removeNodeFromTree(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.root) {\n                this.root = this.root.removeNode(this.root, id);\n            }\n        });\n    }\n    static countNumberOfNodes() {\n        if (this.root) {\n            return this.root.countNodeBelow(this.root);\n        }\n        return 0;\n    }\n}\n// this is a binary tree to hold compositions in it\nCompositionBinaryTree.root = null;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConceptsData } from '../../DataStructures/ConceptData';\nimport { CreateDefaultConcept } from '../../Services/CreateDefaultConcept';\nimport { default as GetTheConcept } from '../../Services/GetTheConcept';\n// this is a different type of recurisve fetch because here all the concepts and connections are passed as it is\n// so there is no need to query the connections and concepts from outside\n// if the concept connection is not found then it will go to the backend to fetch it\nexport function recursiveFetchNew(id_1, connectionList_1, conceptList_1, compositionList_1) {\n    return __awaiter(this, arguments, void 0, function* (id, connectionList, conceptList, compositionList, visitedConcepts = []) {\n        var _a, _b;\n        let output = {};\n        const arroutput = [];\n        if (id == 0) {\n            return '';\n        }\n        // get concept from a list of concepts\n        let concept = getConceptFromList(conceptList, id);\n        // if we cannot find the concept from the concept list then find it from the backend\n        if ((concept == null || concept.id == 0) && id != null && id != undefined) {\n            // get the concepts tries to find it from the binary tree else from the backend if cannot find it then\n            // it will become null\n            const conceptString = yield GetTheConcept(id);\n            concept = conceptString;\n        }\n        if (concept.id != 0) {\n            // if the concept type is non existent then you have to get the type from the backend\n            if (concept.type == null) {\n                // get the concept type id from the concept which is stored in typeId\n                const toConceptTypeId = concept.typeId;\n                //\n                let toConceptType = getConceptFromList(conceptList, toConceptTypeId);\n                concept.type = toConceptType;\n                if (toConceptType == null &&\n                    toConceptTypeId != null &&\n                    toConceptTypeId != undefined) {\n                    const conceptString = yield GetTheConcept(toConceptTypeId);\n                    toConceptType = conceptString;\n                    concept.type = toConceptType;\n                }\n            }\n        }\n        //let mainString = concept?.type?.characterValue ?? ''\n        if (!compositionList.includes(id)) {\n            return concept === null || concept === void 0 ? void 0 : concept.characterValue;\n        }\n        else {\n            if (visitedConcepts.includes(id)) {\n                return \"\";\n            }\n            else {\n                visitedConcepts.push(id);\n            }\n            // loop over all the connections\n            for (let i = 0; i < connectionList.length; i++) {\n                // if the connection has the id that has been passed in the recursion\n                // oftheconceptId -----> toTheConceptId\n                // this only gives the valid concept id that are inside of this id\n                if (connectionList[i].ofTheConceptId == id) {\n                    // then take out the toTheConceptId from the connection\n                    const toConceptId = connectionList[i].toTheConceptId;\n                    if (compositionList.includes(id)) {\n                        // convert the toTheConceptId to a real Concept Object\n                        let toConcept = getConceptFromList(conceptList, toConceptId);\n                        // get the concept\n                        if ((toConcept == null || toConcept.id == 0) &&\n                            toConceptId != null &&\n                            toConceptId != undefined) {\n                            const conceptString = yield GetTheConcept(toConceptId);\n                            toConcept = conceptString;\n                        }\n                        // if the toConcept is valid\n                        if (toConcept.id != 0) {\n                            if ((toConcept === null || toConcept === void 0 ? void 0 : toConcept.type) == null) {\n                                // get the type in casee type is not defined\n                                const toConceptTypeId = toConcept.typeId;\n                                let toConceptType = yield ConceptsData.GetConcept(toConceptTypeId);\n                                toConcept.type = toConceptType;\n                                if (toConceptType == null &&\n                                    toConceptTypeId != null &&\n                                    toConceptTypeId != undefined) {\n                                    const conceptString = yield GetTheConcept(toConceptTypeId);\n                                    toConceptType = conceptString;\n                                    toConcept.type = toConceptType;\n                                }\n                            }\n                        }\n                        // the regex to filter out the the_ from the type concepts\n                        const regex = 'the_';\n                        // then create the key of the key value pair that is the type of the concept\n                        const localmainString = (_b = (_a = toConcept === null || toConcept === void 0 ? void 0 : toConcept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : '';\n                        // replace the the_ with an empty string\n                        const localKey = localmainString.replace(regex, '');\n                        // if the  type  is a number then put it inside of an object\n                        if (isNaN(Number(localKey))) {\n                            if (localKey) {\n                                const result = yield recursiveFetchNew(toConceptId, connectionList, conceptList, compositionList, visitedConcepts);\n                                output[localKey] = result;\n                            }\n                        }\n                        else {\n                            // if the type is a number then put it inside an array\n                            const result = yield recursiveFetchNew(toConceptId, connectionList, conceptList, compositionList, visitedConcepts);\n                            arroutput[localKey] = result;\n                            output = arroutput;\n                        }\n                    }\n                }\n            }\n        }\n        return output;\n    });\n}\n// gets the concept from the list of concepts using the conceptId\nfunction getConceptFromList(conceptList, conceptId) {\n    let concept = CreateDefaultConcept();\n    for (let i = 0; i < conceptList.length; i++) {\n        if (conceptId == conceptList[i].id) {\n            concept = conceptList[i];\n            return concept;\n        }\n    }\n    return concept;\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { recursiveFetchNew } from '../../Services/Composition/BuildComposition';\nimport { CreateDefaultConcept } from '../../Services/CreateDefaultConcept';\nimport { publishMessage } from '../../Services/Mqtt/publishMessage';\nexport class Composition {\n    constructor() {\n        // we can build a composition using this class\n        this.id = 0;\n        this.mainConcept = CreateDefaultConcept();\n        this.connections = [];\n        this.concepts = [];\n        this.subcompositions = [];\n        this.cached = {};\n    }\n    updateCache() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.mainConcept.id == 0)\n                for (let i = 0; i < this.concepts.length; i++) {\n                    if (this.concepts[i].id == this.id) {\n                        this.mainConcept = this.concepts[i];\n                    }\n                }\n            let visitedConcepts = [];\n            this.cached = yield recursiveFetchNew(this.id, this.connections, this.concepts, this.subcompositions, visitedConcepts);\n        });\n    }\n    UpdateAcrossDistributedSystem() {\n        var _a;\n        try {\n            if (this.id != 0) {\n                publishMessage('compositionUpdate', (_a = this.id) === null || _a === void 0 ? void 0 : _a.toString());\n            }\n        }\n        catch (ex) {\n            console.log('Error while publishing message', ex);\n        }\n    }\n    isUpdating() {\n        this.UpdateAcrossDistributedSystem();\n    }\n    GetDataCache() {\n        var _a, _b, _c;\n        const returnOutput = {};\n        const mainString = (_c = (_b = (_a = this.mainConcept) === null || _a === void 0 ? void 0 : _a.type) === null || _b === void 0 ? void 0 : _b.characterValue) !== null && _c !== void 0 ? _c : '';\n        returnOutput[mainString] = this.cached;\n        const FinalReturn = {};\n        FinalReturn['data'] = returnOutput;\n        FinalReturn['id'] = this.id;\n        return FinalReturn;\n    }\n}\n","import { BaseUrl } from \"../../DataStructures/BaseUrl\";\nexport function publishMessage(topic, message) {\n    if (BaseUrl.MQTT_CONNECTION) {\n        BaseUrl.MQTT_CONNECTION.publish(topic, message);\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CreateDefaultConcept } from '../CreateDefaultConcept';\nimport { Composition } from '../../DataStructures/Composition/Composition';\nimport MakeTheInstanceConcept from '../MakeTheInstanceConcept';\nimport { createTheConnection } from '../../Services/CreateTheConnection';\n// create a composition with caching mechanism\nexport function CreateTheCompositionWithCache(json_1) {\n    return __awaiter(this, arguments, void 0, function* (json, ofTheConceptId = null, ofTheConceptUserId = null, mainKey = null, userId = null, accessId = null, sessionInformationId = null, composition = null) {\n        const localUserId = userId !== null && userId !== void 0 ? userId : 999;\n        const localAccessId = accessId !== null && accessId !== void 0 ? accessId : 4;\n        const localSessionId = sessionInformationId !== null && sessionInformationId !== void 0 ? sessionInformationId : 999;\n        let MainKeyLocal = mainKey !== null && mainKey !== void 0 ? mainKey : 0;\n        let MainConcept = CreateDefaultConcept();\n        if (composition == null) {\n            // if no composition is passed then create a new composition\n            composition = new Composition();\n        }\n        for (const key in json) {\n            if (typeof json[key] == 'object' || Array.isArray(json[key])) {\n                const conceptString = yield MakeTheInstanceConcept(key, '', true, localUserId, localAccessId, localSessionId);\n                const concept = conceptString;\n                // if (typeof json[key] != 'string' && typeof json[key] != 'number') {\n                if (ofTheConceptId == null && ofTheConceptUserId == null) {\n                    // if there is no parent conceptId and conceptUserId passed then we know this is the main concept\n                    // everything is related to this concept.\n                    let localMainKey = MainKeyLocal;\n                    MainConcept = concept;\n                    localMainKey = concept.id;\n                    MainKeyLocal = concept.id;\n                    composition.concepts.push(concept);\n                    composition.id = concept.id;\n                    yield CreateTheCompositionWithCache(json[key], concept.id, concept.userId, localMainKey, userId, accessId, sessionInformationId, composition);\n                }\n                else {\n                    // this is the concept which has parent passed onto it and this is a subcomposition\n                    const ofThe = ofTheConceptId !== null && ofTheConceptId !== void 0 ? ofTheConceptId : 999;\n                    const ofTheUser = ofTheConceptUserId !== null && ofTheConceptUserId !== void 0 ? ofTheConceptUserId : 999;\n                    const localMainKey = MainKeyLocal;\n                    MainConcept = concept;\n                    composition.concepts.push(concept);\n                    const connectionString = yield createTheConnection(ofThe, ofTheUser, concept.id, localMainKey);\n                    const connection = connectionString;\n                    composition.connections.push(connection);\n                    yield CreateTheCompositionWithCache(json[key], concept.id, concept.userId, localMainKey, userId, accessId, sessionInformationId, composition);\n                }\n                if (json[key] != null && json[key] != undefined) {\n                    composition.subcompositions.push(concept.id);\n                }\n            }\n            else {\n                // this is the part where the concept is now a key value pair and has the actual data\n                const ofThe = ofTheConceptId !== null && ofTheConceptId !== void 0 ? ofTheConceptId : 999;\n                const ofTheUser = ofTheConceptUserId !== null && ofTheConceptUserId !== void 0 ? ofTheConceptUserId : 999;\n                const localMainKey = MainKeyLocal;\n                const conceptString = yield MakeTheInstanceConcept(key, json[key], false, localUserId, localAccessId, localSessionId);\n                const concept = conceptString;\n                composition.concepts.push(concept);\n                const connectionString = yield createTheConnection(ofThe, ofTheUser, concept.id, localMainKey);\n                const connection = connectionString;\n                composition.connections.push(connection);\n            }\n        }\n        // return the main concept\n        return MainConcept;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport InsertUniqueNumber from '../Helpers/UniqueInsert';\nimport { CheckAllConnectionsConnectedInConnectionArray, CheckIfTypeConceptsExistsInArray, } from '../Helpers/CheckIfExists';\nimport { RemoveConceptFromList, RemoveConnectionFromList, } from '../Helpers/RemoveFromArray';\nimport { CreateDefaultConcept } from './CreateDefaultConcept';\nimport { GetAllConnectionsOfComposition } from '../Api/GetAllConnectionsOfComposition';\nimport GetTheConcept from './GetTheConcept';\nimport MakeTheInstanceConcept from './MakeTheInstanceConcept';\nimport { createTheConnection } from './CreateTheConnection';\nimport { DeleteConnectionById } from './DeleteConnection';\nimport { SyncData } from '../DataStructures/SyncData';\nimport { CompositionBinaryTree } from '../DataStructures/Composition/CompositionBinaryTree';\nimport { Composition } from '../DataStructures/Composition/Composition';\nimport { CreateTheCompositionWithCache } from './Composition/CreateCompositionCache';\n// function to update the cache composition\nexport default function UpdateComposition(patcherStructure) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // get all the default userId, sessionId, accessId passed by the patcherStructure\n        const userId = patcherStructure.userId;\n        const sessionId = patcherStructure.sessionId;\n        const accessId = patcherStructure.accessId;\n        let connectionList = [];\n        const conceptList = [];\n        let composition = CreateDefaultConcept();\n        let parentConcept = CreateDefaultConcept();\n        const toDeleteConcepts = [];\n        // the main composition Id that has the data that needs to be patched\n        let compositionId = patcherStructure.compositionId;\n        // if you want to edit the subcompositions of the composition then you have to pass to this\n        const ofTheConceptId = patcherStructure.ofTheCompositionId;\n        let toDeleteConnections = [];\n        if (compositionId < 0) {\n            let localConcept = yield GetTheConcept(compositionId, userId);\n            if (localConcept.id > 0) {\n                compositionId = localConcept.id;\n            }\n            else {\n                return null;\n            }\n        }\n        // get all connections from the backend because it needs latest data\n        const connectionListString = yield GetAllConnectionsOfComposition(compositionId);\n        connectionList = connectionListString;\n        const conceptIdList = [];\n        const compositionCache = new Composition();\n        const compositionList = [];\n        compositionCache.id = compositionId;\n        // put this in the upper section before updating because this will tell all other distributed\n        //servers to destroy the copy of the composition that they have as new composition is coming up\n        compositionCache.isUpdating();\n        // get all the connections that are inside of the composition and store them in\n        let allConcepts = [];\n        for (let i = 0; i < connectionList.length; i++) {\n            InsertUniqueNumber(compositionList, connectionList[i].ofTheConceptId);\n            InsertUniqueNumber(conceptIdList, connectionList[i].ofTheConceptId);\n            InsertUniqueNumber(conceptIdList, connectionList[i].toTheConceptId);\n            allConcepts.push(connectionList[i].ofTheConceptId);\n        }\n        compositionCache.subcompositions = compositionList;\n        compositionCache.connections = connectionList;\n        // get all the concepts that are inside of the composition and store them in a conceptList\n        for (let i = 0; i < conceptIdList.length; i++) {\n            const conceptString = yield GetTheConcept(conceptIdList[i]);\n            const concept = conceptString;\n            if (compositionId == conceptIdList[i]) {\n                composition = concept;\n            }\n            if (ofTheConceptId == conceptIdList[i]) {\n                parentConcept = concept;\n            }\n            conceptList.push(concept);\n        }\n        // now trying to patch the new object into the composition\n        const object = patcherStructure.patchObject;\n        for (const key in object) {\n            let insertingConcept = CreateDefaultConcept();\n            const value = object[key];\n            let localConcept = composition;\n            // if the immedidate parent exists in the composition (i.e. for multilevel composition)\n            if (parentConcept.id > 0) {\n                localConcept = parentConcept;\n            }\n            if (Array.isArray(value) || typeof value == 'object') {\n                insertingConcept = yield MakeTheInstanceConcept(key, \"\", true, composition.userId, 4, 999);\n                compositionCache.subcompositions.push(insertingConcept.id);\n                // check if the concept exists in the concept list because if it exists then we have to delete old connection\n                const ExistingConcepts = CheckIfTypeConceptsExistsInArray(conceptList, insertingConcept);\n                // if the existing concept then start the process for deleting the concept in the list\n                for (let i = 0; i < ExistingConcepts.length; i++) {\n                    if (ExistingConcepts[i].id > 0) {\n                        const deletingConnections = CheckAllConnectionsConnectedInConnectionArray(compositionCache.connections, ExistingConcepts[i].id);\n                        toDeleteConnections = toDeleteConnections.concat(deletingConnections);\n                        toDeleteConcepts.push(ExistingConcepts[i]);\n                    }\n                }\n                yield CreateTheCompositionWithCache(object[key], insertingConcept.id, insertingConcept.userId, composition.id, composition.userId, 4, 999, compositionCache);\n            }\n            else {\n                // make the new concept in the object\n                insertingConcept = yield MakeTheInstanceConcept(key, value, false, userId, accessId, sessionId);\n                // check if the concept exists in the concept list because if it exists then we have to delete old connection\n                const ExistingConcepts = CheckIfTypeConceptsExistsInArray(conceptList, insertingConcept);\n                // if the existing concept then start the process for deleting the concept in the list\n                for (let i = 0; i < ExistingConcepts.length; i++) {\n                    if (ExistingConcepts[i].id > 0) {\n                        const deletingConnections = CheckAllConnectionsConnectedInConnectionArray(compositionCache.connections, ExistingConcepts[i].id);\n                        toDeleteConnections = toDeleteConnections.concat(deletingConnections);\n                        toDeleteConcepts.push(ExistingConcepts[i]);\n                    }\n                }\n            }\n            // create the connection between the new concept and the old composition\n            const connectionString = createTheConnection(localConcept.id, localConcept.userId, insertingConcept.id, composition.id);\n            const connection = connectionString;\n            conceptList.push(insertingConcept);\n            compositionCache.connections.push(connection);\n        }\n        // now you have to delete the connection in bulk\n        for (let j = 0; j < toDeleteConnections.length; j++) {\n            // remove from the cache list\n            RemoveConnectionFromList(compositionCache.connections, toDeleteConnections[j]);\n            // delete the connection in the backend\n            DeleteConnectionById(toDeleteConnections[j].id);\n        }\n        // also delete the existing concept from the cache.\n        for (let k = 0; k < toDeleteConcepts.length; k++) {\n            // remove concept from the cache concept list\n            RemoveConceptFromList(conceptList, toDeleteConcepts[k]);\n        }\n        // now create a composition cache object to cache it into node server\n        compositionCache.concepts = compositionCache.concepts.concat(conceptList);\n        compositionCache.mainConcept = composition;\n        compositionCache.id = composition.id;\n        // // create a cache\n        yield compositionCache.updateCache();\n        // update it the binary tree\n        CompositionBinaryTree.addCompositionToTree(compositionCache);\n        SyncData.SyncDataOnline();\n        let x = compositionCache.GetDataCache();\n        return x;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetRequestHeaderWithAuthorization } from \"../../Services/Security/GetRequestHeader\";\nimport { BaseUrl } from \"../../DataStructures/BaseUrl\";\nimport { HandleHttpError, HandleInternalError } from \"../../Services/Common/ErrorPosting\";\nexport function SearchAllConcepts(type_1, search_1, composition_1, token_1) {\n    return __awaiter(this, arguments, void 0, function* (type, search, composition, token, inpage = 10, page = 1) {\n        var header = GetRequestHeaderWithAuthorization('application/x-www-form-urlencoded', token);\n        var urlencoded = new URLSearchParams();\n        urlencoded.append(\"type\", type);\n        urlencoded.append(\"search\", search);\n        urlencoded.append(\"composition\", composition);\n        urlencoded.append(\"inpage\", inpage.toString());\n        urlencoded.append(\"page\", page.toString());\n        const queryUrl = BaseUrl.SearchCompositionsUrl() + \"?\" + urlencoded.toString();\n        try {\n            const response = yield fetch(queryUrl, {\n                method: 'GET',\n                headers: header\n            });\n            if (response.ok) {\n                let result = yield response.json();\n                return result;\n            }\n            else {\n                HandleHttpError(response);\n                return [];\n            }\n        }\n        catch (ex) {\n            console.log(\"This is the searching error\", ex);\n            HandleInternalError(ex, queryUrl);\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../../DataStructures/BaseUrl\";\nimport { HandleHttpError, HandleInternalError } from \"../../Services/Common/ErrorPosting\";\nimport { GetRequestHeaderWithAuthorization } from \"../../Services/Security/GetRequestHeader\";\nexport function SearchWithLinker(searchQuery_1) {\n    return __awaiter(this, arguments, void 0, function* (searchQuery, token = \"\") {\n        var header = GetRequestHeaderWithAuthorization(\"application/json\", token);\n        const queryUrl = BaseUrl.SearchLinkMultipleAll();\n        const body = JSON.stringify(searchQuery);\n        try {\n            const response = yield fetch(queryUrl, {\n                method: 'POST',\n                headers: header,\n                body: body\n            });\n            if (response.ok) {\n                let result = yield response.json();\n                return result;\n            }\n            else {\n                console.log(\"This is the searching error\", response.status);\n                HandleHttpError(response);\n                return [];\n            }\n        }\n        catch (ex) {\n            console.log(\"This is the searching error\", ex);\n            HandleInternalError(ex, queryUrl);\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConceptsData } from '../../DataStructures/ConceptData';\nimport { GetAllConnectionsOfComposition } from '../../Api/GetAllConnectionsOfComposition';\nimport { GetConnectionBulk } from '../../Api/GetConnectionBulk';\nimport { GetConcept } from '../../Api/GetConcept';\nimport { recursiveFetchNew } from './BuildComposition';\nimport { recursiveFetch } from '../GetComposition';\nimport { Composition } from '../../DataStructures/Composition/Composition';\nimport { CompositionBinaryTree } from '../../DataStructures/Composition/CompositionBinaryTree';\nimport { BulkConceptGetterApi } from '../../Api/GetConceptBulk';\n// get the composition with the passed id\n// here an optional parameter is passed which will pass the internal connections if given\n// else the function is designed to get the internal connections itself\nexport function GetCompositionWithCache(id_1) {\n    return __awaiter(this, arguments, void 0, function* (id, connectionListPassed = []) {\n        var _a, _b;\n        let connectionList = [];\n        const conceptIdList = [];\n        let returnOutput = {};\n        let output = {};\n        const x = yield CompositionBinaryTree.getNodeFromTree(id);\n        const compositionList = [];\n        let concept = yield ConceptsData.GetConcept(id);\n        if (concept.id == 0 && id != null && id != undefined) {\n            const conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        if (x == null) {\n            let connectionListString = [];\n            if (connectionListPassed.length > 0) {\n                connectionListString = getMyConnections(id, connectionListPassed);\n            }\n            else {\n                connectionListString = yield GetAllConnectionsOfComposition(id);\n            }\n            connectionList = connectionListString;\n            //connectionList = ConnectionData.GetConnectionsOfComposition(id);\n            for (let i = 0; i < connectionList.length; i++) {\n                if (!compositionList.includes(connectionList[i].ofTheConceptId)) {\n                    compositionList.push(connectionList[i].ofTheConceptId);\n                    conceptIdList.push(connectionList[i].ofTheConceptId);\n                }\n                if (!conceptIdList.includes(connectionList[i].toTheConceptId)) {\n                    conceptIdList.push(connectionList[i].toTheConceptId);\n                }\n            }\n            SaveToCompositionCache(concept, connectionList, conceptIdList, compositionList);\n            let visitedConcepts = [];\n            output = yield recursiveFetch(id, connectionList, compositionList, visitedConcepts);\n            const mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : '';\n            returnOutput[mainString] = output;\n        }\n        else {\n            output = x.value.GetDataCache();\n            returnOutput = output;\n        }\n        if (concept.id == 0) {\n            return '';\n        }\n        return returnOutput;\n    });\n}\n// this gets the list of connections of a composition from a list of bulk connection pull\nfunction getMyConnections(id, connectionList) {\n    const connections = [];\n    for (let i = 0; i < connectionList.length; i++) {\n        if (connectionList[i].typeId == id) {\n            connections.push(connectionList[i]);\n        }\n    }\n    return connections;\n}\n// get the composition with the passed id\n// here an optional parameter is passed which will pass the internal connections if given\n// else the function is designed to get the internal connections itself\n// this function has a  format of data -- id\nexport function GetCompositionWithDataIdWithCache(id_1) {\n    return __awaiter(this, arguments, void 0, function* (id, connectionListPassed = []) {\n        var _a, _b;\n        let FinalReturn = {};\n        let connectionList = [];\n        const conceptIdList = [];\n        let output;\n        const returnOutput = {};\n        const x = yield CompositionBinaryTree.getNodeFromTree(id);\n        const compositionList = [];\n        let concept = yield ConceptsData.GetConcept(id);\n        if (concept.id == 0 && id != null && id != undefined) {\n            const conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        if (x == null) {\n            let connectionListString = [];\n            if (connectionListPassed.length > 0) {\n                connectionListString = getMyConnections(id, connectionListPassed);\n            }\n            else {\n                connectionListString = yield GetAllConnectionsOfComposition(id);\n            }\n            connectionList = connectionListString;\n            //connectionList = ConnectionData.GetConnectionsOfComposition(id);\n            for (let i = 0; i < connectionList.length; i++) {\n                if (!compositionList.includes(connectionList[i].ofTheConceptId)) {\n                    compositionList.push(connectionList[i].ofTheConceptId);\n                    conceptIdList.push(connectionList[i].ofTheConceptId);\n                }\n                if (!conceptIdList.includes(connectionList[i].toTheConceptId)) {\n                    conceptIdList.push(connectionList[i].toTheConceptId);\n                }\n            }\n            SaveToCompositionCache(concept, connectionList, conceptIdList, compositionList);\n            output = yield recursiveFetch(id, connectionList, compositionList);\n            const mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : '';\n            returnOutput[mainString] = output;\n            FinalReturn[\"created_at\"] = concept.entryTimeStamp;\n            FinalReturn['data'] = returnOutput;\n            FinalReturn['id'] = id;\n        }\n        else {\n            output = x.value.GetDataCache();\n            FinalReturn = output;\n        }\n        if (concept.id == 0) {\n            return '';\n        }\n        return FinalReturn;\n    });\n}\n// this function needs to be passed with bulk compositions and bulk internal connections of them\n// so that i can conver them to actual list of compositions\nexport function GetCompositionWithDataIdBulk(ids, connections) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let connectionList = [];\n        const compositions = [];\n        const newConnections = yield GetConnectionBulk(connections);\n        connectionList = newConnections;\n        for (let i = 0; i < ids.length; i++) {\n            const output = yield GetCompositionWithDataIdWithCache(ids[i], connectionList);\n            if (output) {\n                compositions.push(output);\n            }\n        }\n        return compositions;\n    });\n}\nfunction SaveToCompositionCache(concept, connections, conceptIdList, numbers) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const composition = new Composition();\n        const concepts = yield BulkConceptGetter(conceptIdList);\n        composition.connections = connections;\n        composition.concepts = concepts;\n        composition.id = concept.id;\n        composition.subcompositions = numbers;\n        composition.mainConcept = concept;\n        let visitedConcepts = [];\n        const output = yield recursiveFetchNew(concept.id, connections, concepts, numbers, visitedConcepts);\n        composition.cached = output;\n        CompositionBinaryTree.addCompositionToTree(composition);\n    });\n}\nfunction BulkConceptGetter(conceptIds) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let conceptList = [];\n        const bulkConceptFetch = [];\n        for (let i = 0; i < (conceptIds === null || conceptIds === void 0 ? void 0 : conceptIds.length); i++) {\n            const conceptUse = yield ConceptsData.GetConcept(conceptIds[i]);\n            if (conceptUse.id == 0) {\n                bulkConceptFetch.push(conceptIds[i]);\n            }\n            else {\n                conceptList.push(conceptUse);\n            }\n        }\n        if ((bulkConceptFetch === null || bulkConceptFetch === void 0 ? void 0 : bulkConceptFetch.length) == 0) {\n            return conceptList;\n        }\n        else {\n            conceptList = yield BulkConceptGetterApi(bulkConceptFetch);\n        }\n        return conceptList;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetRequestHeader } from \"../../Services/Security/GetRequestHeader\";\nimport { BaseUrl } from \"../../DataStructures/BaseUrl\";\nimport { HandleHttpError, HandleInternalError } from \"../../Services/Common/ErrorPosting\";\nexport function CreateSession(sessionData) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            var header = GetRequestHeader();\n            const body = JSON.stringify(sessionData);\n            const response = yield fetch(BaseUrl.CreateSessionId(), {\n                method: 'POST',\n                headers: header,\n                body: body\n            });\n            if (response.ok) {\n                return response.json();\n            }\n            else {\n                console.log(\"Creating session failed\", yield response.json());\n                HandleHttpError(response);\n                return null;\n            }\n        }\n        catch (ex) {\n            console.log(\"Creating session failed\", ex);\n            HandleInternalError(ex, BaseUrl.CreateSessionId());\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../../DataStructures/BaseUrl\";\nimport { HandleHttpError, HandleInternalError } from \"../../Services/Common/ErrorPosting\";\nimport { GetRequestHeader } from \"../../Services/Security/GetRequestHeader\";\nexport function CreateSessionVisit(sessionId, url) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            var header = GetRequestHeader(\"application/x-www-form-urlencoded\");\n            const urlencoded = new URLSearchParams();\n            urlencoded.append(\"sessionId\", sessionId.toString());\n            urlencoded.append(\"url\", url);\n            const response = yield fetch(BaseUrl.CreateSessionVisitUrl(), {\n                method: 'POST',\n                headers: header,\n                body: urlencoded\n            });\n            if (response.ok) {\n                return response.json();\n            }\n            else {\n                console.log(\"Creating session url failed\", yield response.json());\n                HandleHttpError(response);\n                return null;\n            }\n        }\n        catch (ex) {\n            console.log(\"Creating session url failed\", ex);\n            HandleInternalError(ex, BaseUrl.CreateSessionVisitUrl());\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetConnectionOfTheConcept } from \"../Api/GetConnectionOfTheConcept\";\nimport { GetCompositionWithIdAndDateFromMemory } from \"./GetComposition\";\nimport GetTheConcept from \"./GetTheConcept\";\nimport { GetAllConnectionsOfCompositionBulk } from \"../Api/GetAllConnectionsOfCompositionBulk\";\nimport { GetConceptByCharacterAndCategory } from \"./ConceptFinding/GetConceptByCharacterAndCategory\";\nexport function GetRelation(id_1, relation_1) {\n    return __awaiter(this, arguments, void 0, function* (id, relation, inpage = 10, page = 1) {\n        let output = [];\n        let concept = yield GetTheConcept(id);\n        let relatedConceptString = yield GetConceptByCharacterAndCategory(relation);\n        let relatedConcept = relatedConceptString;\n        if (relatedConcept.id > 0) {\n            let connectionsString = yield GetConnectionOfTheConcept(relatedConcept.id, concept.id, concept.userId, inpage, page);\n            let connections = connectionsString;\n            let prefetch = [];\n            for (let i = 0; i < connections.length; i++) {\n                prefetch.push(connections[i].toTheConceptId);\n            }\n            yield GetAllConnectionsOfCompositionBulk(prefetch);\n            for (let i = 0; i < connections.length; i++) {\n                let toConceptId = connections[i].toTheConceptId;\n                let toConcept = yield GetTheConcept(toConceptId);\n                let newComposition = yield GetCompositionWithIdAndDateFromMemory(toConcept.id);\n                output.push(newComposition);\n            }\n        }\n        return output;\n    });\n}\nexport function GetRelationRaw(id_1, relation_1) {\n    return __awaiter(this, arguments, void 0, function* (id, relation, inpage = 10, page = 1) {\n        let output = [];\n        let concept = yield GetTheConcept(id);\n        let relatedConceptString = yield GetConceptByCharacterAndCategory(relation);\n        let relatedConcept = relatedConceptString;\n        if (relatedConcept.id > 0) {\n            let connectionsString = yield GetConnectionOfTheConcept(relatedConcept.id, concept.id, concept.userId, inpage, page);\n            let connections = connectionsString;\n            let prefetch = [];\n            for (let i = 0; i < connections.length; i++) {\n                prefetch.push(connections[i].toTheConceptId);\n            }\n            for (let i = 0; i < connections.length; i++) {\n                let toConceptId = connections[i].toTheConceptId;\n                let toConcept = yield GetTheConcept(toConceptId);\n                output.push(toConcept);\n            }\n        }\n        return output;\n    });\n}\n","export class UserNode {\n    constructor(key, value, leftNode, rightNode) {\n        this.value = [];\n        this.height = 1;\n        this.key = key;\n        this.value.push(value);\n        this.leftNode = leftNode;\n        this.rightNode = rightNode;\n    }\n    addNode(passedNode, node, height) {\n        if (node == null) {\n            node = passedNode;\n            return node;\n        }\n        var LeftNode = node.leftNode;\n        var RightNode = node.rightNode;\n        if (node.key > passedNode.key) {\n            node.leftNode = this.addNode(passedNode, LeftNode, height);\n        }\n        else if (node.key < passedNode.key) {\n            node.rightNode = this.addNode(passedNode, RightNode, height);\n        }\n        else {\n            node.value.push(...passedNode.value);\n            return node;\n        }\n        node.height = 1 + Math.max(this.getHeight(node.leftNode), this.getHeight(node.rightNode));\n        let balancingFactor = this.getBalanceFactor(node);\n        if (balancingFactor > 1) {\n            if (node.leftNode) {\n                if (passedNode.key < node.leftNode.key) {\n                    return this.rightRotate(node);\n                }\n                else if (passedNode.key > node.leftNode.key) {\n                    node.leftNode = this.leftRotate(node.leftNode);\n                    return this.rightRotate(node);\n                }\n            }\n        }\n        if (balancingFactor < -1) {\n            if (node.rightNode) {\n                if (passedNode.key > node.rightNode.key) {\n                    return this.leftRotate(node);\n                }\n                else if (passedNode.key < node.rightNode.key) {\n                    node.rightNode = this.rightRotate(node.rightNode);\n                    return this.leftRotate(node);\n                }\n            }\n        }\n        return node;\n    }\n    rightRotate(y) {\n        if (y) {\n            let x = y.leftNode;\n            if (x) {\n                let T2 = x.rightNode;\n                y.leftNode = T2;\n                x.rightNode = y;\n                y.height = Math.max(this.getHeight(y.leftNode), this.getHeight(y.rightNode)) + 1;\n                x.height = Math.max(this.getHeight(x.leftNode), this.getHeight(x.rightNode)) + 1;\n                return x;\n            }\n            // return x;\n        }\n        return y;\n    }\n    leftRotate(x) {\n        if (x) {\n            let y = x.rightNode;\n            if (y) {\n                let T2 = y.leftNode;\n                y.leftNode = x;\n                x.rightNode = T2;\n                x.height = Math.max(this.getHeight(x.leftNode), this.getHeight(x.rightNode) + 1);\n                y.height = Math.max(this.getHeight(y.leftNode), this.getHeight(x.rightNode) + 1);\n                return y;\n            }\n            //return y;\n        }\n        return x;\n    }\n    getHeight(node) {\n        if (node) {\n            return node.height;\n        }\n        return 0;\n    }\n    getBalanceFactor(N) {\n        if (N == null) {\n            return 0;\n        }\n        return this.getHeight(N.leftNode) - this.getHeight(N.rightNode);\n    }\n    getFromNode(id, node) {\n        if (node) {\n            if (id == node.key) {\n                return node;\n            }\n            else if (id < node.key) {\n                return this.getFromNode(id, node.leftNode);\n            }\n            else if (id > node.key) {\n                return this.getFromNode(id, node.rightNode);\n            }\n            return node;\n        }\n        return node;\n    }\n    removeNode(passedNode, id) {\n        if (passedNode == null) {\n            return passedNode;\n        }\n        if (passedNode.key > id) {\n            passedNode.leftNode = this.removeNode(passedNode.leftNode, id);\n            return passedNode;\n        }\n        else if (passedNode.key < id) {\n            passedNode.rightNode = this.removeNode(passedNode.rightNode, id);\n            return passedNode;\n        }\n        if (passedNode.leftNode == null) {\n            let temp = passedNode.rightNode;\n            passedNode = null;\n            return temp;\n        }\n        else if (passedNode.rightNode == null) {\n            let temp = passedNode.leftNode;\n            passedNode = null;\n            return temp;\n        }\n        else {\n            // passing the rightNode to the inOrderSuccessor gives the immediate successor of the node\n            var immediateSuccessor = this.inOrderSuccessor(passedNode.rightNode);\n            passedNode.value = immediateSuccessor.value;\n            passedNode.key = immediateSuccessor.key;\n            passedNode.rightNode = this.removeNode(passedNode.rightNode, immediateSuccessor.key);\n            return passedNode;\n        }\n    }\n    countNodeBelow(root) {\n        if (root == null) {\n            return 0;\n        }\n        //recursive call to left child and right child and\n        // add the result of these with 1 ( 1 for counting the root)\n        return 1 + this.countNodeBelow(root.leftNode) + this.countNodeBelow(root.rightNode);\n    }\n    inOrderSuccessor(root) {\n        while (root.leftNode != null) {\n            root = root.leftNode;\n        }\n        return root;\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { UserNode } from \"./UserNode\";\nimport { IdentifierFlags } from \"./../IdentifierFlags\";\nexport class UserBinaryTree {\n    static compositeKey(userId, sessionId) {\n        let userHex = ('0000' + userId.toString(16).toUpperCase()).slice(-4);\n        let sessionHex = ('0000' + sessionId.toString(16).toUpperCase()).slice(-4);\n        return userHex + sessionHex;\n    }\n    static addNodeToTree(node) {\n        if (this.root == null) {\n            this.root = node;\n            return this.root;\n        }\n        else {\n            this.root = this.root.addNode(node, this.root, this.root.height);\n        }\n    }\n    static waitForDataToLoad() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                this.checkFlag(resolve);\n                setTimeout(() => {\n                    reject(\"not\");\n                }, 25000);\n            });\n        });\n    }\n    static checkFlag(resolve) {\n        if (IdentifierFlags.isDataLoaded) {\n            return resolve(\"done\");\n        }\n        else {\n            setTimeout(UserBinaryTree.checkFlag, 1000, resolve);\n        }\n    }\n    ;\n    static addConceptToTree(concept, userId, sessionId = 999) {\n        let key = this.compositeKey(userId, sessionId);\n        var node = new UserNode(key, concept, null, null);\n        this.addNodeToTree(node);\n    }\n    static getNodeFromTree(userId, sessionId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                var data = yield this.waitForDataToLoad();\n            }\n            catch (exception) {\n                return null;\n            }\n            let key = this.compositeKey(userId, sessionId);\n            if (this.root) {\n                var Node = this.root.getFromNode(key, this.root);\n                return Node;\n            }\n            return null;\n        });\n    }\n    static removeNodeFromTree(userId_1) {\n        return __awaiter(this, arguments, void 0, function* (userId, sessionId = 999) {\n            if (this.root) {\n                let key = this.compositeKey(userId, sessionId);\n                this.root = this.root.removeNode(this.root, key);\n            }\n        });\n    }\n    static countNumberOfNodes() {\n        if (this.root) {\n            return this.root.countNodeBelow(this.root);\n        }\n        return 0;\n    }\n}\nUserBinaryTree.root = null;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CreateDefaultLConcept } from './../../Services/Local/CreateDefaultLConcept';\nimport { UserBinaryTree } from './../../DataStructures/User/UserBinaryTree';\nexport function GetUserGhostId(userId_1, ghostId_1) {\n    return __awaiter(this, arguments, void 0, function* (userId, ghostId, sessionId = 999) {\n        let userNode = yield UserBinaryTree.getNodeFromTree(userId, sessionId);\n        console.log(\"this is the ghost id\", userId, sessionId);\n        let realConcept = CreateDefaultLConcept();\n        if (userNode) {\n            for (let i = 0; i < userNode.value.length; i++) {\n                let testConcept = userNode.value[i];\n                if (testConcept.ghostId == ghostId) {\n                    realConcept = testConcept;\n                }\n            }\n        }\n        return realConcept;\n    });\n}\nexport function AddGhostConcept(concept_1, userId_1) {\n    return __awaiter(this, arguments, void 0, function* (concept, userId, sessionId = 999) {\n        UserBinaryTree.addConceptToTree(concept, userId, sessionId);\n    });\n}\n","export const NORMAL = 1;\nexport const DATAID = 2;\nexport const JUSTDATA = 3;\nexport const DATAIDDATE = 4;\nexport const RAW = 5;\nexport const ALLID = 6;\nexport const LISTNORMAL = 7;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetTheConcept } from \"../../app\";\n/**\n * ######### Format is normal ######### used for listing. This only provides type connections.\n * This is helpful in building a format that has multiple mainCompositions i.e. in the context of the list\n * The list format is helpful because you do not have to go over each individual query.\n * @param connections the type connections that need (external connections) to be passed\n * @param compositionData  this is a dictionary type of format that has all the build compositions {id: { actual data}}\n * @param mainComposition this is list of  ids of the main composition that builds the tree\n * @param reverse this is the list of connections ids that needs to go to the reverse direction (to---->from)\n * @returns\n */\nexport function FormatConceptsAndConnectionsNormalList(connections_1, compositionData_1, mainComposition_1) {\n    return __awaiter(this, arguments, void 0, function* (connections, compositionData, mainComposition, reverse = []) {\n        var _a, _b, _c, _d;\n        let mainData = [];\n        let myConcepts = [];\n        for (let i = 0; i < connections.length; i++) {\n            myConcepts.push(connections[i].toTheConceptId);\n            myConcepts.push(connections[i].ofTheConceptId);\n            myConcepts.push(connections[i].typeId);\n        }\n        connections.sort(function (x, y) {\n            return y.id - x.id;\n        });\n        for (let i = 0; i < connections.length; i++) {\n            let reverseFlag = false;\n            if (reverse.includes(connections[i].id)) {\n                reverseFlag = true;\n            }\n            let ofTheConcept = yield GetTheConcept(connections[i].ofTheConceptId);\n            let toTheConcept = yield GetTheConcept(connections[i].toTheConceptId);\n            if (reverseFlag == true) {\n                if (ofTheConcept.id != 0 && toTheConcept.id != 0) {\n                    let newData;\n                    let key = (_b = (_a = toTheConcept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"self\";\n                    if (connections[i].toTheConceptId in compositionData) {\n                        newData = compositionData[connections[i].toTheConceptId];\n                    }\n                    else {\n                        newData = {};\n                        newData[key] = {};\n                        compositionData[connections[i].toTheConceptId] = newData;\n                    }\n                    let linkerConcept = yield GetTheConcept(connections[i].typeId);\n                    try {\n                        let reverseCharater = linkerConcept.characterValue + \"_reverse\";\n                        if (Array.isArray(newData[key][reverseCharater])) {\n                            newData[key][reverseCharater].push(compositionData[connections[i].ofTheConceptId]);\n                        }\n                        else {\n                            if (linkerConcept.characterValue.includes(\"_s_\")) {\n                                newData[key][linkerConcept.characterValue] = [];\n                                newData[key][linkerConcept.characterValue].push(ofTheConcept.characterValue);\n                            }\n                            else {\n                                newData[key][linkerConcept.characterValue] = ofTheConcept.characterValue;\n                            }\n                        }\n                    }\n                    catch (ex) {\n                        console.log(\"this is error\", ex);\n                    }\n                }\n            }\n            else {\n                if (ofTheConcept.id != 0 && toTheConcept.id != 0) {\n                    let newData;\n                    let key = (_d = (_c = ofTheConcept.type) === null || _c === void 0 ? void 0 : _c.characterValue) !== null && _d !== void 0 ? _d : \"self\";\n                    if (connections[i].ofTheConceptId in compositionData) {\n                        newData = compositionData[connections[i].ofTheConceptId];\n                    }\n                    else {\n                        newData = {};\n                        newData[key] = {};\n                        compositionData[connections[i].ofTheConceptId] = newData;\n                    }\n                    let linkerConcept = yield GetTheConcept(connections[i].typeId);\n                    try {\n                        if (Array.isArray(newData[key][linkerConcept.characterValue])) {\n                            newData[key][linkerConcept.characterValue].push(toTheConcept.characterValue);\n                        }\n                        else {\n                            if (linkerConcept.characterValue.includes(\"_s_\")) {\n                                newData[key][linkerConcept.characterValue] = [];\n                                newData[key][linkerConcept.characterValue].push(toTheConcept.characterValue);\n                            }\n                            else {\n                                newData[key][linkerConcept.characterValue] = toTheConcept.characterValue;\n                            }\n                        }\n                    }\n                    catch (ex) {\n                        console.log(\"this is error\", ex);\n                    }\n                }\n            }\n        }\n        for (let i = 0; i < mainComposition.length; i++) {\n            let mymainData = compositionData[mainComposition[i]];\n            console.log(mainData, mymainData);\n            mainData.push(mymainData);\n        }\n        return mainData;\n    });\n}\n/**\n * ############ Format is data-id and is used for list. ############\n * This is helpful in building a format that has multiple mainCompositions i.e. in the context of the list\n * The list format is helpful because you do not have to go over each individual query.\n * @param connections the type connections that need (external connections) to be passed\n * @param compositionData  this is a dictionary type of format that has all the build compositions {id: { actual data}}\n * @param mainComposition this is list of  ids of the main composition that builds the tree\n * @param reverse this is the list of connections ids that needs to go to the reverse direction (to---->from)\n * @returns\n */\nexport function FormatFromConnectionsAlteredArrayExternal(connections_1, compositionData_1, mainComposition_1) {\n    return __awaiter(this, arguments, void 0, function* (connections, compositionData, mainComposition, reverse = []) {\n        var _a, _b, _c, _d;\n        let startTime = new Date().getTime();\n        let mainData = [];\n        let myConcepts = [];\n        for (let i = 0; i < connections.length; i++) {\n            myConcepts.push(connections[i].toTheConceptId);\n            myConcepts.push(connections[i].ofTheConceptId);\n            myConcepts.push(connections[i].typeId);\n        }\n        connections.sort(function (x, y) {\n            return y.id - x.id;\n        });\n        for (let i = 0; i < connections.length; i++) {\n            let reverseFlag = false;\n            let ofTheConcept = yield GetTheConcept(connections[i].ofTheConceptId);\n            let toTheConcept = yield GetTheConcept(connections[i].toTheConceptId);\n            if (reverse.includes(connections[i].id)) {\n                reverseFlag = true;\n            }\n            if (reverseFlag == true) {\n                if (ofTheConcept.id != 0 && toTheConcept.id != 0) {\n                    let mydata = compositionData[connections[i].toTheConceptId];\n                    let linkerConcept = yield GetTheConcept(connections[i].typeId);\n                    let newData = mydata === null || mydata === void 0 ? void 0 : mydata.data;\n                    let key = Object.keys(newData)[0];\n                    try {\n                        let reverseCharater = linkerConcept.characterValue + \"_reverse\";\n                        if (typeof newData === \"string\") {\n                            newData = {};\n                        }\n                        if (Array.isArray(newData[key][reverseCharater])) {\n                            newData[key][reverseCharater].push(compositionData[connections[i].ofTheConceptId]);\n                        }\n                        else {\n                            if (typeof newData[key] === \"string\") {\n                                newData[key] = {};\n                            }\n                            newData[key][reverseCharater] = [];\n                            newData[key][reverseCharater].push(compositionData[connections[i].ofTheConceptId]);\n                        }\n                    }\n                    catch (ex) {\n                        console.log(\"this is error\", ex);\n                    }\n                }\n            }\n            else {\n                if (ofTheConcept.id != 0 && toTheConcept.id != 0) {\n                    let newData;\n                    let linkerConcept = yield GetTheConcept(connections[i].typeId);\n                    let key = (_b = (_a = ofTheConcept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"self\";\n                    if (connections[i].ofTheConceptId in compositionData) {\n                        newData = compositionData[connections[i].ofTheConceptId];\n                    }\n                    else {\n                        newData = {};\n                        newData[key] = {};\n                        compositionData[connections[i].ofTheConceptId] = newData;\n                    }\n                    try {\n                        if (Array.isArray(newData[key][linkerConcept.characterValue])) {\n                            newData[key][linkerConcept.characterValue].push(compositionData[connections[i].toTheConceptId]);\n                        }\n                        else {\n                            let type = (_d = (_c = toTheConcept === null || toTheConcept === void 0 ? void 0 : toTheConcept.type) === null || _c === void 0 ? void 0 : _c.characterValue) !== null && _d !== void 0 ? _d : \"none\";\n                            let value = toTheConcept.characterValue;\n                            let data = {\n                                \"id\": toTheConcept.id,\n                                \"data\": {\n                                    type: value\n                                }\n                            };\n                            if (linkerConcept.characterValue.includes(\"_s_\")) {\n                                newData[key][linkerConcept.characterValue] = [];\n                                newData[key][linkerConcept.characterValue].push(data);\n                            }\n                            else {\n                                newData[key][linkerConcept.characterValue] = data;\n                            }\n                        }\n                    }\n                    catch (ex) {\n                        console.log(\"this is error\", ex);\n                    }\n                }\n            }\n        }\n        for (let i = 0; i < mainComposition.length; i++) {\n            let mymainData = compositionData[mainComposition[i]];\n            console.log(mainData, mymainData);\n            mainData.push(mymainData);\n        }\n        return mainData;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { SearchWithTypeAndLinkerApi } from '../../app';\nimport { GetCompositionFromConnectionsInObject, GetCompositionFromConnectionsInObjectNormal, GetCompositionFromConnectionsWithDataIdInObject, GetConnectionDataPrefetch } from '../GetCompositionBulk';\nimport { FormatConceptsAndConnectionsNormalList, FormatFromConnectionsAlteredArrayExternal } from './FormatData';\nimport { FormatConceptsAndConnections, FormatFromConnectionsAlteredArray } from './SearchLinkMultiple';\n/**\n * This function will help you search a concept by their type and also to query inside of it.\n * Put the number of compositions you want to get in the searchStructure which can be set by inpage and page\n * Then the type should be set in searchQuery for the compositionName.\n * Inside the searchQuery array this you can set the full linker / listLinker in the searchQuery.\n * This will give the id of the structures.\n */\nexport function SearchWithTypeAndLinkerDataId(searchStructure_1, searchQuery_1) {\n    return __awaiter(this, arguments, void 0, function* (searchStructure, searchQuery, token = \"\") {\n        let result = yield SearchWithTypeAndLinkerApi(searchStructure, searchQuery, token);\n        let conceptIds = result.compositionIds;\n        let connections = result.internalConnections;\n        let linkers = result.linkers;\n        let reverse = result.reverse;\n        let mainCompositionIds = result.mainCompositionIds;\n        let prefetchConnections = yield GetConnectionDataPrefetch(linkers);\n        let concepts = yield GetCompositionFromConnectionsWithDataIdInObject(conceptIds, connections);\n        let output = yield FormatFromConnectionsAlteredArray(prefetchConnections, concepts, conceptIds, mainCompositionIds, reverse);\n        return output;\n    });\n}\n/**\n * This function will help you search a concept by their type and also to query inside of it.\n * Put the number of compositions you want to get in the searchStructure which can be set by inpage and page\n * Then the type should be set in searchQuery for the compositionName.\n * Inside the searchQuery array this you can set the full linker / listLinker in the searchQuery.\n * This will not give the id of the structures.\n */\nexport function SearchWithTypeAndLinker(searchStructure_1, searchQuery_1) {\n    return __awaiter(this, arguments, void 0, function* (searchStructure, searchQuery, token = \"\") {\n        let result = yield SearchWithTypeAndLinkerApi(searchStructure, searchQuery, token);\n        let conceptIds = result.compositionIds;\n        let connections = result.internalConnections;\n        let linkers = result.linkers;\n        let reverse = result.reverse;\n        let mainCompositionIds = result.mainCompositionIds;\n        let prefetchConnections = yield GetConnectionDataPrefetch(linkers);\n        let concepts = yield GetCompositionFromConnectionsInObject(conceptIds, connections);\n        let output = yield FormatConceptsAndConnections(prefetchConnections, concepts, mainCompositionIds, reverse);\n        return output;\n    });\n}\n/**\n * ## Format dataid ##\n * @param linkers\n * @param conceptIds\n * @param connections\n * @param mainCompositionIds\n * @param reverse\n * @returns\n */\nexport function formatDataArrayDataId(linkers, conceptIds, connections, mainCompositionIds, reverse) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let prefetchConnections = yield GetConnectionDataPrefetch(linkers);\n        let concepts = yield GetCompositionFromConnectionsWithDataIdInObject(conceptIds, connections);\n        let output = yield FormatFromConnectionsAlteredArray(prefetchConnections, concepts, conceptIds, mainCompositionIds, reverse);\n        return output;\n    });\n}\n/**\n * ## Format Normal ##\n * @param linkers\n * @param conceptIds\n * @param connections\n * @param mainCompositionIds\n * @param reverse\n * @returns\n */\nexport function formatDataArrayNormal(linkers, conceptIds, connections, mainCompositionIds, reverse) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let prefetchConnections = yield GetConnectionDataPrefetch(linkers);\n        let concepts = yield GetCompositionFromConnectionsInObjectNormal(conceptIds, connections);\n        let output = yield FormatConceptsAndConnections(prefetchConnections, concepts, mainCompositionIds, reverse);\n        return output;\n    });\n}\n/**\n * ## Format Normal ##\n * @param linkers\n * @param conceptIds\n * @param connections\n * @param mainCompositionIds\n * @param reverse\n * @returns\n */\nexport function formatLinkersNormal(linkers, conceptIds, connections, mainCompositionIds, reverse) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let prefetchConnections = yield GetConnectionDataPrefetch(linkers);\n        let concepts = yield GetCompositionFromConnectionsInObjectNormal(conceptIds, connections);\n        let output = yield FormatConceptsAndConnections(prefetchConnections, concepts, mainCompositionIds, reverse);\n        return output;\n    });\n}\nexport function formatConnections(linkers, conceptIds, mainCompositionIds, reverse) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let prefetchConnections = yield GetConnectionDataPrefetch(linkers);\n        let compositionData = [];\n        let output = yield FormatConceptsAndConnectionsNormalList(prefetchConnections, compositionData, mainCompositionIds, reverse);\n        return output;\n    });\n}\nexport function formatConnectionsDataId(linkers, conceptIds, mainCompositionIds, reverse) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let prefetchConnections = yield GetConnectionDataPrefetch(linkers);\n        let compositionData = [];\n        let output = yield FormatFromConnectionsAlteredArrayExternal(prefetchConnections, compositionData, mainCompositionIds, reverse);\n        return output;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { SearchLinkMultipleApi } from \"../../Api/Search/SearchLinkMultipleApi\";\nimport { DATAID, JUSTDATA, LISTNORMAL, NORMAL } from \"../../Constants/FormatConstants\";\nimport { GetConceptBulk, GetConnectionBulk, GetTheConcept } from \"../../app\";\nimport { GetCompositionFromConnectionsInObject, GetCompositionFromConnectionsInObjectNormal, GetCompositionFromConnectionsWithDataIdInObject, GetCompositionFromConnectionsWithDataIdInObjectNew, GetConnectionDataPrefetch } from \"../GetCompositionBulk\";\nimport { formatDataArrayNormal } from \"./SearchWithTypeAndLinker\";\nexport function SearchLinkMultipleAll(searchQuery_1) {\n    return __awaiter(this, arguments, void 0, function* (searchQuery, token = \"\", caller = null, format = DATAID) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        let conceptIds = [];\n        let linkers = [];\n        let connections = [];\n        let reverse = [];\n        let mainCompositionId = searchQuery[0].composition;\n        let conceptsConnections = {};\n        let result = {};\n        try {\n            if (caller === null || caller === void 0 ? void 0 : caller.isDataLoaded) {\n                conceptsConnections.compositionIds = (_a = caller.conceptIds) === null || _a === void 0 ? void 0 : _a.slice();\n                conceptsConnections.internalConnections = (_b = caller.internalConnections) === null || _b === void 0 ? void 0 : _b.slice();\n                conceptsConnections.linkers = (_c = caller.linkers) === null || _c === void 0 ? void 0 : _c.slice();\n                conceptsConnections.reverse = (_d = caller.reverse) === null || _d === void 0 ? void 0 : _d.slice();\n                result = conceptsConnections;\n                conceptIds = result.compositionIds;\n                connections = result.internalConnections;\n                linkers = result.linkers;\n                reverse = result.reverse;\n            }\n            else {\n                conceptsConnections = yield SearchLinkMultipleApi(searchQuery, token);\n                if (caller) {\n                    caller.conceptIds = (_e = conceptsConnections.compositionIds) === null || _e === void 0 ? void 0 : _e.slice();\n                    caller.internalConnections = (_f = conceptsConnections.internalConnections) === null || _f === void 0 ? void 0 : _f.slice();\n                    caller.linkers = (_g = conceptsConnections.linkers) === null || _g === void 0 ? void 0 : _g.slice();\n                    caller.reverse = (_h = conceptsConnections.reverse) === null || _h === void 0 ? void 0 : _h.slice();\n                    caller.isDataLoaded = true;\n                }\n                result = conceptsConnections;\n                conceptIds = result.compositionIds;\n                connections = result.internalConnections;\n                linkers = result.linkers;\n                reverse = result.reverse;\n            }\n            let out = yield DataIdBuildLayer(linkers, conceptIds, connections, reverse, mainCompositionId, searchQuery[0], format);\n            return out;\n        }\n        catch (e) {\n            console.log(\"this is the error in the search link multiple\", e);\n            throw e;\n        }\n    });\n}\n/**\n * ######### This layer builds the data. Format is dataid ##########\n * @param linkers list of ids that help us\n * @param conceptIds this is all the concept ids that need  to be composited\n * @param connections these are the internal connections of the compositions that help in creating individual compositions\n * @param reverse this is the list of connection ids that need to show reverse connections(to->from)\n * @param mainCompositionId this is the main centre point of this data.\n * @returns\n */\nexport function DataIdBuildLayer(linkers_1, conceptIds_1, connections_1, reverse_1, mainCompositionId_1, searchQuery_1) {\n    return __awaiter(this, arguments, void 0, function* (linkers, conceptIds, connections, reverse, mainCompositionId, searchQuery, format = DATAID) {\n        let startTime = new Date().getTime();\n        let prefetchConnections = yield GetConnectionDataPrefetch(linkers);\n        let concepts;\n        let out;\n        if (format == JUSTDATA) {\n            concepts = yield GetCompositionFromConnectionsInObject(conceptIds, connections);\n            out = yield FormatFromConnections(linkers, concepts, mainCompositionId, reverse);\n        }\n        else if (format == NORMAL) {\n            concepts = yield GetCompositionFromConnectionsInObjectNormal(conceptIds, connections);\n            out = yield FormatFromConnections(linkers, concepts, mainCompositionId, reverse);\n        }\n        else if (format == 100) {\n            concepts = yield GetCompositionFromConnectionsWithDataIdInObjectNew(conceptIds, connections);\n            out = yield FormatFromConnectionsAltered(prefetchConnections, concepts, mainCompositionId, reverse);\n        }\n        else if (format == LISTNORMAL) {\n            out = yield formatDataArrayNormal(linkers, conceptIds, connections, searchQuery.ofCompositions, reverse);\n        }\n        else {\n            concepts = yield GetCompositionFromConnectionsWithDataIdInObject(conceptIds, connections);\n            out = yield FormatFromConnectionsAltered(prefetchConnections, concepts, mainCompositionId, reverse);\n        }\n        return out;\n    });\n}\n/**\n * ## Format is DATAID ##\n * This  is altered format and is different from others because it passes all the connections prebuilt/prefetched\n * This will not let the connections to be again fetched from the memory.\n * @param connections the type connections that need (external connections) to be passed\n * @param compositionData this is a dictionary type of format that has all the build compositions {id: { actual data}}\n * @param mainComposition this is the id of the main composition that builds the tree\n * @param reverse this is the list of connections ids that needs to go to the reverse direction (to---->from)\n * @returns\n */\nexport function FormatFromConnectionsAltered(connections_1, compositionData_1, mainComposition_1) {\n    return __awaiter(this, arguments, void 0, function* (connections, compositionData, mainComposition, reverse = []) {\n        let startTime = new Date().getTime();\n        let mainData = {};\n        let myConcepts = [];\n        for (let i = 0; i < connections.length; i++) {\n            myConcepts.push(connections[i].toTheConceptId);\n            myConcepts.push(connections[i].ofTheConceptId);\n            myConcepts.push(connections[i].typeId);\n        }\n        connections.sort(function (x, y) {\n            return y.id - x.id;\n        });\n        for (let i = 0; i < connections.length; i++) {\n            let reverseFlag = false;\n            if (reverse.includes(connections[i].id)) {\n                reverseFlag = true;\n            }\n            if (reverseFlag == true) {\n                if (compositionData[connections[i].ofTheConceptId] && compositionData[connections[i].toTheConceptId]) {\n                    let mydata = compositionData[connections[i].toTheConceptId];\n                    let linkerConcept = yield GetTheConcept(connections[i].typeId);\n                    let newData = mydata === null || mydata === void 0 ? void 0 : mydata.data;\n                    let key = Object.keys(newData)[0];\n                    try {\n                        let reverseCharater = linkerConcept.characterValue + \"_reverse\";\n                        if (typeof newData === \"string\") {\n                            newData = {};\n                        }\n                        if (Array.isArray(newData[key][reverseCharater])) {\n                            newData[key][reverseCharater].push(compositionData[connections[i].ofTheConceptId]);\n                        }\n                        else {\n                            if (typeof newData[key] === \"string\") {\n                                newData[key] = {};\n                            }\n                            newData[key][reverseCharater] = [];\n                            newData[key][reverseCharater].push(compositionData[connections[i].ofTheConceptId]);\n                        }\n                    }\n                    catch (ex) {\n                        console.log(\"this is error\", ex);\n                    }\n                }\n            }\n            else {\n                if (compositionData[connections[i].ofTheConceptId] && compositionData[connections[i].toTheConceptId]) {\n                    let mydata = compositionData[connections[i].ofTheConceptId];\n                    let linkerConcept = yield GetTheConcept(connections[i].typeId);\n                    let newData = mydata === null || mydata === void 0 ? void 0 : mydata.data;\n                    let key = Object.keys(newData)[0];\n                    try {\n                        if (typeof newData === \"string\") {\n                            newData = {};\n                        }\n                        if (Array.isArray(newData[key][linkerConcept.characterValue])) {\n                            newData[key][linkerConcept.characterValue].push(compositionData[connections[i].toTheConceptId]);\n                        }\n                        else {\n                            if (typeof newData[key] === \"string\") {\n                                newData[key] = {};\n                            }\n                            newData[key][linkerConcept.characterValue] = [];\n                            newData[key][linkerConcept.characterValue].push(compositionData[connections[i].toTheConceptId]);\n                        }\n                    }\n                    catch (ex) {\n                        console.log(\"this is error\", ex);\n                    }\n                }\n            }\n        }\n        mainData = compositionData[mainComposition];\n        return mainData;\n    });\n}\n/**\n * ######### Format is normal ######### used for listing.\n * This is helpful in building a format that has multiple mainCompositions i.e. in the context of the list\n * The list format is helpful because you do not have to go over each individual query.\n * @param connections the type connections that need (external connections) to be passed\n * @param compositionData  this is a dictionary type of format that has all the build compositions {id: { actual data}}\n * @param mainComposition this is list of  ids of the main composition that builds the tree\n * @param reverse this is the list of connections ids that needs to go to the reverse direction (to---->from)\n * @returns\n */\nexport function FormatConceptsAndConnections(connections_1, compositionData_1, mainComposition_1) {\n    return __awaiter(this, arguments, void 0, function* (connections, compositionData, mainComposition, reverse = []) {\n        let mainData = [];\n        let myConcepts = [];\n        for (let i = 0; i < connections.length; i++) {\n            myConcepts.push(connections[i].toTheConceptId);\n            myConcepts.push(connections[i].ofTheConceptId);\n            myConcepts.push(connections[i].typeId);\n        }\n        connections.sort(function (x, y) {\n            return y.id - x.id;\n        });\n        for (let i = 0; i < connections.length; i++) {\n            let reverseFlag = false;\n            if (reverse.includes(connections[i].id)) {\n                reverseFlag = true;\n            }\n            if (reverseFlag == true) {\n                if (compositionData[connections[i].ofTheConceptId] && compositionData[connections[i].toTheConceptId]) {\n                    let newData = compositionData[connections[i].toTheConceptId];\n                    let linkerConcept = yield GetTheConcept(connections[i].typeId);\n                    let key = Object.keys(newData)[0];\n                    try {\n                        let reverseCharater = linkerConcept.characterValue + \"_reverse\";\n                        if (typeof newData === \"string\") {\n                            newData = {};\n                        }\n                        if (Array.isArray(newData[key][reverseCharater])) {\n                            newData[key][reverseCharater].push(compositionData[connections[i].ofTheConceptId]);\n                        }\n                        else {\n                            if (typeof newData[key] === \"string\") {\n                                newData[key] = {};\n                            }\n                            newData[key][reverseCharater] = [];\n                            newData[key][reverseCharater].push(compositionData[connections[i].ofTheConceptId]);\n                        }\n                    }\n                    catch (ex) {\n                        console.log(\"this is error\", ex);\n                    }\n                }\n            }\n            else {\n                if (compositionData[connections[i].ofTheConceptId] && compositionData[connections[i].toTheConceptId]) {\n                    let newData = compositionData[connections[i].ofTheConceptId];\n                    let linkerConcept = yield GetTheConcept(connections[i].typeId);\n                    let key = Object.keys(newData)[0];\n                    try {\n                        if (typeof newData === \"string\") {\n                            newData = {};\n                        }\n                        if (Array.isArray(newData[key][linkerConcept.characterValue])) {\n                            newData[key][linkerConcept.characterValue].push(compositionData[connections[i].toTheConceptId]);\n                        }\n                        else {\n                            if (typeof newData[key] === \"string\") {\n                                newData[key] = {};\n                            }\n                            newData[key][linkerConcept.characterValue] = [];\n                            newData[key][linkerConcept.characterValue].push(compositionData[connections[i].toTheConceptId]);\n                        }\n                    }\n                    catch (ex) {\n                        console.log(\"this is error\", ex);\n                    }\n                }\n            }\n        }\n        for (let i = 0; i < mainComposition.length; i++) {\n            let mymainData = compositionData[mainComposition[i]];\n            mainData.push(mymainData);\n        }\n        return mainData;\n    });\n}\n/**\n * ############ Format is data-id and is used for list. ############\n * This is helpful in building a format that has multiple mainCompositions i.e. in the context of the list\n * The list format is helpful because you do not have to go over each individual query.\n * @param connections the type connections that need (external connections) to be passed\n * @param compositionData  this is a dictionary type of format that has all the build compositions {id: { actual data}}\n * @param mainComposition this is list of  ids of the main composition that builds the tree\n * @param reverse this is the list of connections ids that needs to go to the reverse direction (to---->from)\n * @returns\n */\nexport function FormatFromConnectionsAlteredArray(connections_1, compositionData_1, conceptIds_1, mainComposition_1) {\n    return __awaiter(this, arguments, void 0, function* (connections, compositionData, conceptIds, mainComposition, reverse = []) {\n        let startTime = new Date().getTime();\n        let mainData = [];\n        let myConcepts = [];\n        for (let i = 0; i < connections.length; i++) {\n            myConcepts.push(connections[i].toTheConceptId);\n            myConcepts.push(connections[i].ofTheConceptId);\n            myConcepts.push(connections[i].typeId);\n        }\n        connections.sort(function (x, y) {\n            return y.id - x.id;\n        });\n        for (let i = 0; i < connections.length; i++) {\n            let reverseFlag = false;\n            if (reverse.includes(connections[i].id)) {\n                reverseFlag = true;\n            }\n            if (reverseFlag == true) {\n                if (compositionData[connections[i].ofTheConceptId] && compositionData[connections[i].toTheConceptId]) {\n                    let mydata = compositionData[connections[i].toTheConceptId];\n                    let linkerConcept = yield GetTheConcept(connections[i].typeId);\n                    let newData = mydata === null || mydata === void 0 ? void 0 : mydata.data;\n                    let key = Object.keys(newData)[0];\n                    try {\n                        let reverseCharater = linkerConcept.characterValue + \"_reverse\";\n                        if (typeof newData === \"string\") {\n                            newData = {};\n                        }\n                        if (Array.isArray(newData[key][reverseCharater])) {\n                            newData[key][reverseCharater].push(compositionData[connections[i].ofTheConceptId]);\n                        }\n                        else {\n                            if (typeof newData[key] === \"string\") {\n                                newData[key] = {};\n                            }\n                            newData[key][reverseCharater] = [];\n                            newData[key][reverseCharater].push(compositionData[connections[i].ofTheConceptId]);\n                        }\n                    }\n                    catch (ex) {\n                        console.log(\"this is error\", ex);\n                    }\n                }\n            }\n            else {\n                if (compositionData[connections[i].ofTheConceptId] && compositionData[connections[i].toTheConceptId]) {\n                    let mydata = compositionData[connections[i].ofTheConceptId];\n                    let linkerConcept = yield GetTheConcept(connections[i].typeId);\n                    let newData = mydata === null || mydata === void 0 ? void 0 : mydata.data;\n                    let key = Object.keys(newData)[0];\n                    try {\n                        if (typeof newData === \"string\") {\n                            newData = {};\n                        }\n                        if (Array.isArray(newData[key][linkerConcept.characterValue])) {\n                            newData[key][linkerConcept.characterValue].push(compositionData[connections[i].toTheConceptId]);\n                        }\n                        else {\n                            if (typeof newData[key] === \"string\") {\n                                newData[key] = {};\n                            }\n                            newData[key][linkerConcept.characterValue] = [];\n                            newData[key][linkerConcept.characterValue].push(compositionData[connections[i].toTheConceptId]);\n                        }\n                    }\n                    catch (ex) {\n                        console.log(\"this is error\", ex);\n                    }\n                }\n            }\n        }\n        for (let i = 0; i < mainComposition.length; i++) {\n            let mymainData = compositionData[mainComposition[i]];\n            mainData.push(mymainData);\n        }\n        return mainData;\n    });\n}\n/**\n * ########## Format works with JUSTDATA / NORMAL ########### used for single origin concept\n * @param linkers this is the list of linkers that\n * @param compositionData\n * @param mainComposition\n * @param reverse list of connection ids that need to show reverse conneciton.\n * @returns\n */\nexport function FormatFromConnections(linkers_1, compositionData_1, mainComposition_1) {\n    return __awaiter(this, arguments, void 0, function* (linkers, compositionData, mainComposition, reverse = []) {\n        let mainData = {};\n        let connections = yield GetConnectionBulk(linkers);\n        let myConcepts = [];\n        for (let i = 0; i < connections.length; i++) {\n            myConcepts.push(connections[i].toTheConceptId);\n            myConcepts.push(connections[i].ofTheConceptId);\n            myConcepts.push(connections[i].typeId);\n        }\n        yield GetConceptBulk(myConcepts);\n        connections.sort(function (x, y) {\n            return y.id - x.id;\n        });\n        for (let i = 0; i < connections.length; i++) {\n            let reverseFlag = false;\n            if (reverse.includes(connections[i].id)) {\n                reverseFlag = true;\n            }\n            if (reverseFlag == true) {\n                if (compositionData[connections[i].ofTheConceptId] && compositionData[connections[i].toTheConceptId]) {\n                    let mydata = compositionData[connections[i].toTheConceptId];\n                    let linkerConcept = yield GetTheConcept(connections[i].typeId);\n                    let newData = mydata;\n                    let key = Object.keys(newData)[0];\n                    try {\n                        let reverseCharater = linkerConcept.characterValue + \"_reverse\";\n                        if (typeof newData === \"string\") {\n                            newData = {};\n                        }\n                        if (Array.isArray(newData[key][reverseCharater])) {\n                            newData[key][reverseCharater].push(compositionData[connections[i].ofTheConceptId]);\n                        }\n                        else {\n                            if (typeof newData[key] === \"string\") {\n                                newData[key] = {};\n                            }\n                            newData[key][reverseCharater] = [];\n                            newData[key][reverseCharater].push(compositionData[connections[i].ofTheConceptId]);\n                        }\n                    }\n                    catch (ex) {\n                        console.log(\"this is error\", ex);\n                    }\n                }\n            }\n            else {\n                if (compositionData[connections[i].ofTheConceptId] && compositionData[connections[i].toTheConceptId]) {\n                    let mydata = compositionData[connections[i].ofTheConceptId];\n                    let linkerConcept = yield GetTheConcept(connections[i].typeId);\n                    let newData = mydata;\n                    // console.log(\"this is the new data\", newData);\n                    let key = Object.keys(newData)[0];\n                    try {\n                        if (typeof newData === \"string\") {\n                            newData = {};\n                        }\n                        if (Array.isArray(newData[key][linkerConcept.characterValue])) {\n                            newData[key][linkerConcept.characterValue].push(compositionData[connections[i].toTheConceptId]);\n                        }\n                        else {\n                            if (typeof newData[key] === \"string\") {\n                                newData[key] = {};\n                            }\n                            newData[key][linkerConcept.characterValue] = [];\n                            newData[key][linkerConcept.characterValue].push(compositionData[connections[i].toTheConceptId]);\n                        }\n                    }\n                    catch (ex) {\n                        console.log(\"this is error\", ex);\n                    }\n                }\n            }\n        }\n        mainData = compositionData[mainComposition];\n        return mainData;\n    });\n}\n","import { Connection } from \"../../DataStructures/Connection\";\nimport { CreateDefaultConcept } from \"../CreateDefaultConcept\";\nimport { CreateDefaultLConcept } from \"../Local/CreateDefaultLConcept\";\nexport function convertFromConceptToLConcept(concept) {\n    var _a, _b;\n    const LConcept = CreateDefaultLConcept();\n    LConcept.id = concept.id;\n    LConcept.ghostId = concept.ghostId;\n    LConcept.userId = concept.userId;\n    LConcept.accessId = concept.accessId;\n    LConcept.categoryId = concept.categoryId;\n    LConcept.characterValue = concept.characterValue;\n    LConcept.entryTimeStamp = concept.entryTimeStamp;\n    LConcept.typeId = concept.typeId;\n    LConcept.type = concept.type;\n    LConcept.isTemp = false;\n    LConcept.typeCharacter = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n    return LConcept;\n}\nexport function convertFromLConceptToConcept(lconcept) {\n    const concept = CreateDefaultConcept();\n    concept.id = lconcept.id;\n    concept.ghostId = lconcept.ghostId;\n    concept.userId = lconcept.userId;\n    concept.accessId = lconcept.accessId;\n    concept.entryTimeStamp = lconcept.entryTimeStamp;\n    concept.typeId = lconcept.typeId;\n    concept.categoryId = lconcept.categoryId;\n    return concept;\n}\nexport function convertFromConnectionToLConnection(connection) {\n    const Lconnection = new Connection(0, 0, 0, 0, 0, 0, 0);\n    Lconnection.id = connection.id;\n    Lconnection.ghostId = connection.ghostId;\n    Lconnection.accessId = connection.accessId;\n    Lconnection.ofTheConceptId = connection.ofTheConceptId;\n    Lconnection.toTheConceptId = connection.toTheConceptId;\n    Lconnection.entryTimeStamp = connection.entryTimeStamp;\n    Lconnection.typeId = connection.typeId;\n    Lconnection.isTemp = false;\n    return Lconnection;\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { LocalConceptsData } from \"../../DataStructures/Local/LocalConceptData\";\nimport { LocalGhostIdTree } from \"../../DataStructures/Local/LocalGhostIdTree\";\nimport { CreateDefaultLConcept, GetTheConcept } from \"../../app\";\nimport { convertFromConceptToLConcept } from \"../Conversion/ConvertConcepts\";\n/**\n * This function converts any local/ virtual or real concept id to a LConcept.\n * In case that the id is virtual then it tries to find it from the local memory. This will return -ve id.\n * In case that the virtual id has already been synced to the backend then it gets this from the relational binary tree(LocalGhostIdTree). This will return +ve id.\n * In case that we pass real id then this will return real concept but formatted in LConcept form. This might have undefined ghostId.\n * @param id the id that you want to find out the concept of. This could be a negative (virtual id ) or a real concept id.\n * @returns LConcept with either (-ve or +ve id)\n */\nexport function GetTheConceptLocal(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let lconcept = CreateDefaultLConcept();\n            if (id < 0) {\n                lconcept = yield LocalConceptsData.GetConcept(id);\n                if (lconcept.id == 0) {\n                    let localNode = yield LocalGhostIdTree.getNodeFromTree(id);\n                    if (localNode === null || localNode === void 0 ? void 0 : localNode.value) {\n                        let returnedConcept = localNode.value;\n                        if (returnedConcept) {\n                            lconcept = returnedConcept;\n                        }\n                    }\n                }\n            }\n            else {\n                let concept = yield GetTheConcept(id);\n                lconcept = convertFromConceptToLConcept(concept);\n            }\n            return lconcept;\n        }\n        catch (error) {\n            throw error;\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport InsertUniqueNumber from '../../Helpers/UniqueInsert';\nimport { CheckAllConnectionsConnectedInLConnectionArray, CheckIfTypeLConceptsExistsInArray, } from '../../Helpers/CheckIfExists';\nimport { GetAllConnectionsOfComposition } from '../../Api/GetAllConnectionsOfComposition';\nimport GetTheConcept from './../GetTheConcept';\nimport { DeleteConnectionById } from './../DeleteConnection';\nimport { CreateTheCompositionLocal } from './CreateTheCompositionLocal';\nimport { MakeTheInstanceConceptLocal } from './MakeTheInstanceConceptLocal';\nimport { CreateDefaultLConcept, CreateTheConnectionLocal, LocalSyncData } from '../../app';\nimport { convertFromConceptToLConcept, convertFromConnectionToLConnection } from '../Conversion/ConvertConcepts';\n// function to update the cache composition\nexport function UpdateCompositionLocal(patcherStructure) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // get all the default userId, sessionId, accessId passed by the patcherStructure\n        const userId = patcherStructure.userId;\n        const sessionId = patcherStructure.sessionId;\n        const accessId = patcherStructure.accessId;\n        let connectionList = [];\n        const conceptList = [];\n        let composition = CreateDefaultLConcept();\n        let parentConcept = CreateDefaultLConcept();\n        const toDeleteConcepts = [];\n        // the main composition Id that has the data that needs to be patched\n        const compositionId = patcherStructure.compositionId;\n        // if you want to edit the subcompositions of the composition then you have to pass to this\n        const ofTheConceptId = patcherStructure.ofTheCompositionId;\n        let toDeleteConnections = [];\n        // get all connections from the backend because it needs latest data\n        const connectionListString = yield GetAllConnectionsOfComposition(compositionId);\n        let connectionListOriginal = connectionListString;\n        for (let i = 0; i < connectionListOriginal.length; i++) {\n            connectionList.push(convertFromConnectionToLConnection(connectionListOriginal[i]));\n        }\n        const conceptIdList = [];\n        const compositionList = [];\n        // put this in the upper section before updating because this will tell all other distributed\n        //servers to destroy the copy of the composition that they have as new composition is coming up\n        // get all the connections that are inside of the composition and store them in\n        let allConcepts = [];\n        for (let i = 0; i < connectionList.length; i++) {\n            InsertUniqueNumber(compositionList, connectionList[i].ofTheConceptId);\n            InsertUniqueNumber(conceptIdList, connectionList[i].ofTheConceptId);\n            InsertUniqueNumber(conceptIdList, connectionList[i].toTheConceptId);\n            allConcepts.push(connectionList[i].ofTheConceptId);\n        }\n        // get all the concepts that are inside of the composition and store them in a conceptList\n        for (let i = 0; i < conceptIdList.length; i++) {\n            const conceptString = yield GetTheConcept(conceptIdList[i]);\n            const concept = conceptString;\n            if (compositionId == conceptIdList[i]) {\n                composition = convertFromConceptToLConcept(concept);\n            }\n            if (ofTheConceptId == conceptIdList[i]) {\n                parentConcept = convertFromConceptToLConcept(concept);\n            }\n            conceptList.push(convertFromConceptToLConcept(concept));\n        }\n        // now trying to patch the new object into the composition\n        const object = patcherStructure.patchObject;\n        for (const key in object) {\n            let insertingConcept = CreateDefaultLConcept();\n            const value = object[key];\n            let localConcept = composition;\n            // if the immedidate parent exists in the composition (i.e. for multilevel composition)\n            if (parentConcept.id > 0) {\n                localConcept = parentConcept;\n            }\n            if (Array.isArray(value) || typeof value == 'object') {\n                insertingConcept = yield MakeTheInstanceConceptLocal(key, \"\", true, composition.userId, 4, 999);\n                yield CreateTheCompositionLocal(object[key], insertingConcept.id, insertingConcept.userId, composition.id, composition.userId, 4, 999);\n            }\n            else {\n                // make the new concept in the object\n                insertingConcept = yield MakeTheInstanceConceptLocal(key, value, false, userId, accessId, sessionId);\n            }\n            // check if the concept exists in the concept list because if it exists then we have to delete old connection\n            const ExistingConcepts = CheckIfTypeLConceptsExistsInArray(conceptList, insertingConcept);\n            // if the existing concept then start the process for deleting the concept in the list\n            for (let i = 0; i < ExistingConcepts.length; i++) {\n                if (ExistingConcepts[i].id > 0) {\n                    const deletingConnections = CheckAllConnectionsConnectedInLConnectionArray(connectionList, ExistingConcepts[i].id);\n                    toDeleteConnections = toDeleteConnections.concat(deletingConnections);\n                    toDeleteConcepts.push(ExistingConcepts[i]);\n                }\n            }\n            // create the connection between the new concept and the old composition\n            const connectionString = yield CreateTheConnectionLocal(localConcept.id, insertingConcept.id, composition.id, 2);\n            const connection = connectionString;\n            conceptList.push(insertingConcept);\n        }\n        // now you have to delete the connection in bulk\n        for (let j = 0; j < toDeleteConnections.length; j++) {\n            // remove from the cache list\n            // delete the connection in the backend\n            yield DeleteConnectionById(toDeleteConnections[j].id);\n        }\n        yield LocalSyncData.SyncDataOnline();\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { LocalConnectionData } from \"../../DataStructures/Local/LocalConnectionData\";\nexport function GetConnectionOfTheConceptLocal(ofTheConcept, typeId, userId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let connections = yield LocalConnectionData.GetConnectionOfCompositionAndTypeLocal(typeId, ofTheConcept);\n            return connections;\n        }\n        catch (error) {\n            throw error;\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetCompositionLocal, GetConceptByCharacterAndCategoryLocal } from \"../../app\";\nimport { GetConnectionOfTheConceptLocal } from \"./GetConnectionOfTheConceptLocal\";\nexport function GetRelationLocal(id, relation, userId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let typeConcept = yield GetConceptByCharacterAndCategoryLocal(relation);\n            let localConnections = [];\n            if (typeConcept.id != 0) {\n                localConnections = yield GetConnectionOfTheConceptLocal(id, typeConcept.id, userId);\n            }\n            let output = [];\n            for (let i = 0; i < localConnections.length; i++) {\n                let comp = yield GetCompositionLocal(localConnections[i].toTheConceptId);\n                output.push(comp);\n            }\n            return output;\n        }\n        catch (error) {\n            throw error;\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../../DataStructures/BaseUrl\";\nimport { HandleHttpError } from \"../../Services/Common/ErrorPosting\";\nimport { GetRequestHeader } from \"../../Services/Security/GetRequestHeader\";\nimport { GetConceptBulk } from \"../../app\";\nexport function ViewInternalDataApi(ids) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let connectionList = [];\n        try {\n            var header = GetRequestHeader();\n            const response = yield fetch(BaseUrl.ViewInternalDataUrl(), {\n                method: 'POST',\n                headers: header,\n                body: JSON.stringify(ids)\n            });\n            if (response.ok) {\n                let conceptString = yield response.json();\n                let connectionDictionary = {};\n                for (let i = 0; i < conceptString.length; i++) {\n                    let conceptList = conceptString[i].concepts;\n                    connectionList = conceptString[i].connections;\n                    let id = conceptString[i].id;\n                    GetConceptBulk(conceptList);\n                    connectionDictionary[id] = connectionList;\n                }\n                return connectionDictionary;\n            }\n            else {\n                //  throw new Error(`Error! status: ${response.status}`);\n                console.log(\"View Internal Data error\", response.status);\n                HandleHttpError(response);\n            }\n            return connectionList;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log(' This is the view internal data error message: ', error.message);\n            }\n            else {\n                console.log(' This is the view internal data unexpected error: ', error);\n            }\n            throw error;\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ViewInternalDataApi } from \"../../Api/View/ViewInternalDataApi\";\nimport { GetTheConcept, recursiveFetch } from \"../../app\";\nexport function ViewInternalData(ids) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a;\n        try {\n            let connections = yield ViewInternalDataApi(ids);\n            let output = [];\n            for (let i = 0; i < ids.length; i++) {\n                let id = ids[i];\n                let localConnections = connections[id];\n                if (id && localConnections) {\n                    let concepts = [];\n                    let formattedOutput = {};\n                    for (let j = 0; j < localConnections.length; j++) {\n                        if (!concepts.includes(localConnections[j].ofTheConceptId)) {\n                            concepts.push(localConnections[j].ofTheConceptId);\n                        }\n                    }\n                    let out = yield recursiveFetch(id, localConnections, concepts);\n                    formattedOutput.data = out;\n                    formattedOutput.id = id;\n                    output.push(formattedOutput);\n                }\n                else {\n                    let formattedOutput = {};\n                    formattedOutput.id = id;\n                    let concept = yield GetTheConcept(id);\n                    let noconn = {};\n                    if (concept.type) {\n                        noconn[(_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue] = concept.characterValue;\n                        formattedOutput.data = noconn;\n                        output.push(formattedOutput);\n                    }\n                }\n            }\n            return output;\n        }\n        catch (err) {\n            throw err;\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../../app\";\nimport { HandleHttpError, HandleInternalError } from \"../../Services/Common/ErrorPosting\";\nimport { GetRequestHeaderWithAuthorization } from \"../../Services/Security/GetRequestHeader\";\nexport function SearchInternalApi(search_1) {\n    return __awaiter(this, arguments, void 0, function* (search, token = \"\") {\n        var header = GetRequestHeaderWithAuthorization(\"application/json\", token);\n        let queryUrl = BaseUrl.SearchInternalWithAuthenticatedCcsUrl();\n        queryUrl = queryUrl + '?composition=' + search.composition + '&search=' + search.search + '&internalComposition=' + search.internalComposition + '&type=' + search.type + '&inpage=' + search.inpage + '&page=' + search.page;\n        try {\n            const response = yield fetch(queryUrl, {\n                method: 'GET',\n                headers: header\n            });\n            if (response.ok) {\n                let result = yield response.json();\n                return result;\n            }\n            else {\n                console.log(\"This is the searching internal error\", response.status);\n                HandleHttpError(response);\n                return [];\n            }\n        }\n        catch (ex) {\n            console.log(\"This is the searching internal error\", ex);\n            HandleInternalError(ex, queryUrl);\n        }\n    });\n}\nexport function SearchInternalAllApi(search) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var header = GetRequestHeaderWithAuthorization(\"application/json\", \"\");\n        let queryUrl = BaseUrl.SearchInternalWithCcsUrl();\n        queryUrl = queryUrl + '?composition=' + search.composition + '&search=' + search.search + '&internalComposition=' + search.internalComposition + '&type=' + search.type + '&inpage=' + search.inpage + '&page=' + search.page;\n        try {\n            const response = yield fetch(queryUrl, {\n                method: 'GET',\n                headers: header\n            });\n            if (response.ok) {\n                let result = yield response.json();\n                return result;\n            }\n            else {\n                console.log(\"This is the searching internal error\", response.status);\n                HandleHttpError(response);\n                return [];\n            }\n        }\n        catch (ex) {\n            console.log(\"This is the searching internal error\", ex);\n            HandleInternalError(ex, queryUrl);\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { SearchInternalAllApi, SearchInternalApi } from \"../../Api/Search/SearchInternalApi\";\nimport { ViewInternalData } from \"../../app\";\nexport function SearchLinkInternal(searchQuery_1) {\n    return __awaiter(this, arguments, void 0, function* (searchQuery, token = \"\") {\n        try {\n            let conceptsConnections = yield SearchInternalApi(searchQuery, token);\n            let out = yield ViewInternalData(conceptsConnections);\n            return out;\n        }\n        catch (ex) {\n            throw ex;\n        }\n    });\n}\nexport function SearchLinkInternalAll(searchQuery_1) {\n    return __awaiter(this, arguments, void 0, function* (searchQuery, token = \"\") {\n        try {\n            let conceptsConnections = yield SearchInternalAllApi(searchQuery);\n            let out = conceptsConnections;\n            return out;\n        }\n        catch (ex) {\n            throw ex;\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CreateTheConnectionLocal, MakeTheInstanceConceptLocal } from \"../../app\";\nexport function CreateConnectionBetweenTwoConceptsLocal(ofTheConcept_1, toTheConcept_1, linker_1) {\n    return __awaiter(this, arguments, void 0, function* (ofTheConcept, toTheConcept, linker, both = false) {\n        var _a, _b;\n        try {\n            var userId = ofTheConcept.userId;\n            if (both) {\n                let prefix1 = ((_a = toTheConcept.type) === null || _a === void 0 ? void 0 : _a.characterValue) + \"_s\";\n                let linkerAdd1 = linker + \"_by\";\n                let backwardLinker = prefix1 + \"_\" + linkerAdd1;\n                // if(count){\n                //    await CountRelationship(linkerAdd1, toTheConcept, userId);\n                //   }\n                var connectionConceptReverse = yield MakeTheInstanceConceptLocal(\"connection\", backwardLinker, false, 999, 999, 999);\n                let pewCon = yield CreateTheConnectionLocal(toTheConcept.id, ofTheConcept.id, connectionConceptReverse.id, 1000);\n            }\n            let prefix = ((_b = ofTheConcept.type) === null || _b === void 0 ? void 0 : _b.characterValue) + \"_s\";\n            let linkerAdd = linker + \"_s\";\n            let forwardLinker = prefix + \"_\" + linkerAdd;\n            // if(count){\n            // // await CountRelationship(linkerAdd, ofTheConcept, userId);\n            // }\n            var connectionConcept = yield MakeTheInstanceConceptLocal(\"connection\", forwardLinker, false, 999, 999, 999);\n            let newConnection = yield CreateTheConnectionLocal(ofTheConcept.id, toTheConcept.id, connectionConcept.id, 1000);\n            return newConnection;\n        }\n        catch (ex) {\n            throw ex;\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { LocalConceptsData } from \"../../DataStructures/Local/LocalConceptData\";\nimport { GetTheConceptLocal } from \"./GetTheConceptLocal\";\nexport function DeleteConceptLocal(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let concept = yield GetTheConceptLocal(id);\n        LocalConceptsData.RemoveConcept(concept);\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConnectionData } from \"../DataStructures/ConnectionData\";\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nexport function GetCompositionConnectionsBetweenTwoConcepts(ofConceptId, toConcept, mainKey) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var connectionList = [];\n        try {\n            var formdata = new FormData();\n            formdata.append(\"ofConceptId\", ofConceptId.toString());\n            formdata.append(\"mainKey\", mainKey.toString());\n            formdata.append(\"toConceptId\", toConcept.toString());\n            const response = yield fetch(BaseUrl.GetCompositionConnectionBetweenTwoConceptsUrl(), {\n                method: 'POST',\n                body: formdata,\n                redirect: \"follow\"\n            });\n            if (response.ok) {\n                const result = yield response.json();\n                for (var i = 0; i < result.length; i++) {\n                    ConnectionData.AddConnection(result[i]);\n                    connectionList.push(result[i]);\n                }\n            }\n            else {\n                console.log(\"Get composition connection between two concepts\", response.status);\n                HandleHttpError(response);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Get composition connection between two concepts error message: ', error.message);\n            }\n            else {\n                console.log('Get composition connection between two concepts unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetCompositionConnectionBetweenTwoConceptsUrl());\n        }\n        return connectionList;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetCompositionConnectionsBetweenTwoConcepts } from \"../Api/GetCompositionConnectionsBetweenTwoConcepts\";\nimport { CreateDefaultConcept, MakeTheTypeConceptApi } from \"../app\";\nimport MakeTheInstanceConcept from \"./MakeTheInstanceConcept\";\n/**\n * This function will give you all the connections between two concepts by their linker or fullLinker\n * @param ofTheConcept start of the connecction\n * @param toTheConcept end of the connection\n * @param linker the primitive linkers with type connection (16) these are the old type of linkers (if you want full linker then put this as empty string)\n * @param fullLinker fullLinker is the modern linker (if you want linker then put this as empty string)\n * @param forward if you want to get the forward relation in the primitive linker put true else for backward linker false.\n * @returns list of connections\n */\nexport function GetConnectionBetweenTwoConceptsLinker(ofTheConcept_1, toTheConcept_1, linker_1, fullLinker_1) {\n    return __awaiter(this, arguments, void 0, function* (ofTheConcept, toTheConcept, linker, fullLinker, forward = true) {\n        var _a, _b;\n        let typeConcept = CreateDefaultConcept();\n        if (linker != \"\") {\n            let typeLinker = \"\";\n            if (forward) {\n                let prefix = ((_a = ofTheConcept.type) === null || _a === void 0 ? void 0 : _a.characterValue) + \"_s\";\n                let linkerAdd = linker + \"_s\";\n                let forwardLinker = prefix + \"_\" + linkerAdd;\n                typeLinker = forwardLinker;\n            }\n            else {\n                let prefix1 = ((_b = toTheConcept.type) === null || _b === void 0 ? void 0 : _b.characterValue) + \"_s\";\n                let linkerAdd1 = linker + \"_by\";\n                let backwardLinker = prefix1 + \"_\" + linkerAdd1;\n                typeLinker = backwardLinker;\n            }\n            typeConcept = yield MakeTheInstanceConcept(\"connection\", typeLinker, false, 999);\n        }\n        if (fullLinker != \"\") {\n            typeConcept = yield MakeTheTypeConceptApi(fullLinker, 999);\n        }\n        let connections = yield GetCompositionConnectionsBetweenTwoConcepts(ofTheConcept.id, toTheConcept.id, typeConcept.id);\n        return connections;\n    });\n}\n","/**\n *\n * @param ms The time required to wait before executing this function\n * @param callback This is the function that needs to be executed\n * @returns returns a promise for the resolve\n */\nexport function DelayFunctionExecution(ms, callback) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve(callback);\n        }, ms);\n    });\n}\n","export const ADMIN = 3;\nexport const PRIVATE = 4;\nexport const PUBLIC = 5;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../../app\";\nimport { HandleHttpError, HandleInternalError } from \"../../Services/Common/ErrorPosting\";\nimport { GetRequestHeaderWithAuthorization } from \"../../Services/Security/GetRequestHeader\";\nexport function SearchWithTypeAndLinkerApi(searchStructure_1, searchQuery_1) {\n    return __awaiter(this, arguments, void 0, function* (searchStructure, searchQuery, token = \"\") {\n        let queryUrl = BaseUrl.SearchAllTypeWithLinker(searchStructure.auth);\n        var header = GetRequestHeaderWithAuthorization(\"application/json\", token);\n        queryUrl = queryUrl + '?search=' + searchStructure.search + '&type=' + searchStructure.type + '&inpage=' + searchStructure.inpage + '&page=' + searchStructure.page;\n        const body = JSON.stringify(searchQuery);\n        try {\n            const response = yield fetch(queryUrl, {\n                method: 'POST',\n                headers: header,\n                body: body\n            });\n            if (response.ok) {\n                let result = yield response.json();\n                return result;\n            }\n            else {\n                HandleHttpError(response);\n                console.log(\"This is the searching multiple error\", response.status);\n                return [];\n            }\n        }\n        catch (ex) {\n            console.log(\"This is the searching SearchWithTypeAndLinker error\", ex);\n            HandleInternalError(ex, queryUrl);\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConnectionData } from \"../app\";\nimport { NORMAL } from \"../Constants/FormatConstants\";\n/**\n * This is the class that helps us observe anything that the function is doing\n * This wrapper will allow all the concepts and connections to be tracked inside of the called function\n * This function helps us manage state using the concept connection system.\n */\nexport class DependencyObserver {\n    constructor() {\n        this.subscribers = []; // this is the list of subscribers that are added to this observer.\n        this.mainConcept = 0;\n        this.compositionIds = [];\n        this.conceptIds = [];\n        this.internalConnections = [];\n        this.reverse = [];\n        this.linkers = [];\n        this.dependency = [];\n        this.isDataLoaded = false; // checks to see if the data has been loaded to the widget/ function\n        this.isUpdating = false; // this flag helps us check if the state is being updated while the connection updates.\n        this.fetched = false;\n        this.format = NORMAL;\n    }\n    /**\n     * This function will be called when there is a need to listen to a certain type of concept that will update\n     *  the ui.\n     * @param id this is the type id which needs to be tracked\n     */\n    listenToEventType(id) {\n        window.addEventListener(`${id}`, (event) => {\n            if (!this.isUpdating) {\n                this.isUpdating = true;\n                let that = this;\n                console.log(\"listening to event type\", event);\n                setTimeout(function () {\n                    return __awaiter(this, void 0, void 0, function* () {\n                        let myEvent = event;\n                        if (!that.compositionIds.includes(myEvent === null || myEvent === void 0 ? void 0 : myEvent.detail)) {\n                            that.compositionIds.unshift(myEvent === null || myEvent === void 0 ? void 0 : myEvent.detail);\n                            that.listenToEvent(myEvent === null || myEvent === void 0 ? void 0 : myEvent.detail);\n                        }\n                        that.isUpdating = false;\n                        yield that.bind();\n                        that.notify();\n                    });\n                }, 200);\n            }\n            else {\n                console.log(\"rejected this\");\n            }\n        });\n    }\n    /**\n     * This is the of the concept id that needs to be listened . If this is called. All the connections that are\n     * created with of the concepts id with this passed id then the event is fired.\n     *\n     * @param id Of the concept id that needs to be listened.\n     */\n    listenToEvent(id) {\n        window.addEventListener(`${id}`, (event) => {\n            console.log(\"this is listening after the event is fired\", id, event);\n            if (!this.isUpdating) {\n                this.isUpdating = true;\n                let that = this;\n                setTimeout(function () {\n                    return __awaiter(this, void 0, void 0, function* () {\n                        let newConnection = yield ConnectionData.GetConnectionByOfTheConceptAndType(id, id);\n                        for (let i = 0; i < newConnection.length; i++) {\n                            yield ConnectionData.GetConnection(newConnection[i]).then((conn) => {\n                                if (conn.typeId == that.mainConcept) {\n                                    if (!that.internalConnections.includes(conn.id)) {\n                                        that.internalConnections.push(conn.id);\n                                    }\n                                }\n                                else {\n                                    if (!that.linkers.includes(conn.id)) {\n                                        that.linkers.push(conn.id);\n                                    }\n                                }\n                                if (!that.conceptIds.includes(conn.toTheConceptId)) {\n                                    that.conceptIds.push(conn.toTheConceptId);\n                                }\n                                if (!that.compositionIds.includes(conn.ofTheConceptId)) {\n                                    that.compositionIds.push(conn.ofTheConceptId);\n                                }\n                            });\n                        }\n                        that.isUpdating = false;\n                        yield that.bind();\n                        that.notify();\n                    });\n                }, 200);\n            }\n            else {\n                console.log(\"rejected this\");\n            }\n        });\n    }\n    /**\n     * This function will bind the actual data to the widget or the function.\n     */\n    bind() {\n        return __awaiter(this, void 0, void 0, function* () {\n            console.log(\"this is the old execute data\");\n        });\n    }\n    /**\n     *\n     * @param callback the function that needs to be called with the data.\n     * @returns returns the callback with this data as the state.\n     */\n    subscribe(callback) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.subscribers.push(callback);\n            console.log('again executing data');\n            yield this.bind();\n            return callback(this.data);\n        });\n    }\n    /**\n     *\n     * @param callback function that you need to remove from the subscribers list.\n     * @returns\n     */\n    unsubscribe(callback) {\n        this.subscribers.filter(fn => fn != callback);\n        return this.subscribers.length;\n    }\n    /**\n     * This function will call all the subscribers that are registered in this wrapper.\n     */\n    notify() {\n        console.log('notifiers', this.subscribers);\n        this.subscribers.map(subscriber => {\n            console.log('notify');\n            subscriber(this.data);\n        });\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { SearchLinkMultipleAll } from \"../app\";\nimport { DATAID } from \"../Constants/FormatConstants\";\nimport { DependencyObserver } from \"./DepenedencyObserver\";\nexport class SearchLinkMultipleAllObservable extends DependencyObserver {\n    constructor(searchQuery, token, format = DATAID) {\n        super();\n        this.searchQuery = [];\n        this.format = DATAID;\n        this.searchQuery = searchQuery;\n        this.format = format;\n    }\n    bind() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.data = yield SearchLinkMultipleAll(this.searchQuery, \"\", this, this.format);\n            this.mainConcept = this.searchQuery[0].composition;\n            this.listenToEvent(this.mainConcept);\n            console.log(\"this is the data\", this.data);\n            return this.data;\n        });\n    }\n}\n/**\n *\n * @param searchQueries Queries that need to be executed.\n * @param token token of the user.\n * @returns  returns the json format of the output.\n */\nexport function searchLinkMultipleListener(searchQueries, token, format = DATAID) {\n    return new SearchLinkMultipleAllObservable(searchQueries, token !== null && token !== void 0 ? token : \"\", format);\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConnectionData, DATAID, JUSTDATA, NORMAL } from \"../app\";\nimport { GetCompositionById, RecursiveFetchBuildLayer, RecursiveFetchBuildLayerDataId, RecursiveFetchBuildLayerNormal } from \"../Services/GetComposition\";\nimport { DependencyObserver } from \"./DepenedencyObserver\";\nexport class GetCompositionObservable extends DependencyObserver {\n    constructor(id, format = JUSTDATA) {\n        super();\n        this.id = id;\n        this.format = format;\n    }\n    bind() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.isDataLoaded) {\n                let conceptConnections = yield GetCompositionById(this.id);\n                this.mainConcept = this.id;\n                this.compositionIds = conceptConnections.compositionList;\n                let internalConnections = conceptConnections.connectionList;\n                for (let i = 0; i < internalConnections.length; i++) {\n                    this.internalConnections.push(internalConnections[i].id);\n                }\n                this.isDataLoaded = true;\n                this.listenToEvent(this.mainConcept);\n            }\n            return yield this.build();\n        });\n    }\n    build() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let latestConnectionList = [];\n            let latestConnectionIds = this.internalConnections;\n            for (let i = 0; i < latestConnectionIds.length; i++) {\n                latestConnectionList.push(yield ConnectionData.GetConnection(latestConnectionIds[i]));\n            }\n            if (this.format == JUSTDATA) {\n                console.log(\"this is the data for the build layer\", latestConnectionList, this.mainConcept, this.internalConnections, this.compositionIds);\n                this.data = yield RecursiveFetchBuildLayer(this.mainConcept, latestConnectionList, this.compositionIds);\n            }\n            else if (this.format == DATAID) {\n                this.data = yield RecursiveFetchBuildLayerDataId(this.mainConcept, latestConnectionList, this.compositionIds);\n            }\n            else if (this.format == NORMAL) {\n                this.data = yield RecursiveFetchBuildLayerNormal(this.mainConcept, latestConnectionList, this.compositionIds);\n            }\n            else {\n                this.data = yield RecursiveFetchBuildLayer(this.mainConcept, latestConnectionList, this.compositionIds);\n            }\n            return this.data;\n        });\n    }\n}\n/**\n *\n * @param id Id of the composition\n * @returns composition of the id given in the json form.\n */\nexport function GetCompositionListener(id, format = JUSTDATA) {\n    return new GetCompositionObservable(id, format);\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetAllConceptsByType } from \"../Api/GetAllConceptsByType\";\nimport { ConceptsData, DATAID, GetAllConnectionsOfCompositionBulk, GetConceptByCharacter, JUSTDATA, NORMAL } from \"../app\";\nimport { GetCompositionFromMemory, GetCompositionFromMemoryNormal, GetCompositionWithIdFromMemory } from \"../Services/GetComposition\";\nimport { DependencyObserver } from \"./DepenedencyObserver\";\n/**\n * This wrapper will wrap the listing function and then allow users to return the list.\n */\nexport class GetCompositionListObservable extends DependencyObserver {\n    constructor(compositionName, userId, inpage, page, format) {\n        super();\n        this.data = [];\n        this.startPage = 0;\n        this.compositionName = compositionName;\n        this.userId = userId;\n        this.inpage = inpage;\n        this.page = page;\n        this.format = format;\n    }\n    bind() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.isDataLoaded) {\n                console.log(\"again data loading mechanism\");\n                var concept = yield GetConceptByCharacter(this.compositionName);\n                if (concept) {\n                    yield GetAllConceptsByType(this.compositionName, this.userId);\n                    console.log(\"getting the user data\", concept.id, this.userId);\n                    let conceptList = yield ConceptsData.GetConceptsByTypeIdAndUser(concept.id, this.userId);\n                    console.log(\"this is the concept list\", conceptList);\n                    var startPage = this.inpage * (this.page - 1);\n                    for (var i = startPage; i < startPage + this.inpage; i++) {\n                        if (conceptList[i]) {\n                            this.compositionIds.push(conceptList[i].id);\n                        }\n                    }\n                }\n                yield GetAllConnectionsOfCompositionBulk(this.compositionIds);\n                this.isDataLoaded = true;\n                this.listenToEventType(concept.id);\n                for (let i = 0; i < this.compositionIds.length; i++) {\n                    console.log(\"list listen\", this.compositionIds[i]);\n                    this.listenToEvent(this.compositionIds[i]);\n                }\n            }\n            return yield this.build();\n        });\n    }\n    build() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.data = [];\n            console.log(\"this is building the data list\");\n            if (this.format == JUSTDATA) {\n                for (let i = this.startPage; i < this.startPage + this.inpage; i++) {\n                    if (this.compositionIds[i]) {\n                        let compositionJson = yield GetCompositionFromMemory(this.compositionIds[i]);\n                        this.data.push(compositionJson);\n                    }\n                }\n            }\n            else if (this.format == DATAID) {\n                for (let i = this.startPage; i < this.startPage + this.inpage; i++) {\n                    if (this.compositionIds[i]) {\n                        let compositionJson = yield GetCompositionWithIdFromMemory(this.compositionIds[i]);\n                        this.data.push(compositionJson);\n                    }\n                }\n            }\n            else if (this.format == NORMAL) {\n                for (let i = this.startPage; i < this.startPage + this.inpage; i++) {\n                    if (this.compositionIds[i]) {\n                        let compositionJson = yield GetCompositionFromMemoryNormal(this.compositionIds[i]);\n                        this.data.push(compositionJson);\n                    }\n                }\n            }\n            else {\n                for (let i = this.startPage; i < this.startPage + this.inpage; i++) {\n                    if (this.compositionIds[i]) {\n                        let compositionJson = yield GetCompositionFromMemory(this.compositionIds[i]);\n                        this.data.push(compositionJson);\n                    }\n                }\n            }\n            return this.data;\n        });\n    }\n}\n/**\n * This function will give you the list of the concepts by composition name with a listener to any data change.\n */\nexport function GetCompositionListListener(compositionName, userId, inpage, page, format = JUSTDATA) {\n    return new GetCompositionListObservable(compositionName, userId, inpage, page, format);\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetAllConnectionsOfCompositionBulk, GetCompositionWithIdAndDateFromMemory, GetConceptByCharacterAndType, GetConnectionBulk, GetConnectionOfTheConcept, GetTheConcept } from \"../app\";\nimport { DATAIDDATE, JUSTDATA, NORMAL } from \"../Constants/FormatConstants\";\nimport { GetCompositionFromMemory, GetCompositionWithIdFromMemory } from \"../Services/GetComposition\";\nimport { DependencyObserver } from \"./DepenedencyObserver\";\n/**\n * This is a class that will give you the observable for the links from a certain concept.\n */\nexport class GetLinkObservable extends DependencyObserver {\n    /**\n     *\n     * @param id this is the id whose links need to be found\n     * @param linker this is the type connection that is connected to the mainConcept(id)\n     * @param inpage number of outputs that has to be displayed\n     * @param page the page which needs to be displayed as per the inpage parameter\n     * @param format the format in which the output should be displayed (NORMAL, DATAID,JUSTDATA,DATAIDDATE)\n     */\n    constructor(id, linker, inpage, page, format) {\n        super();\n        this.connections = [];\n        this.data = [];\n        this.mainConcept = id;\n        this.linker = linker;\n        this.inpage = inpage;\n        this.page = page;\n        this.format = format;\n    }\n    bind() {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            if (!this.isDataLoaded) {\n                let concept = yield GetTheConcept(this.mainConcept);\n                let linkString = ((_a = concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) + \"_s\" + \"_\" + this.linker;\n                let relatedConceptString = yield GetConceptByCharacterAndType(linkString, 16);\n                let relatedConcept = relatedConceptString;\n                if (relatedConcept.id > 0) {\n                    let connectionsString = yield GetConnectionOfTheConcept(relatedConcept.id, concept.id, concept.userId, this.inpage, this.page);\n                    this.connections = connectionsString;\n                    var prefetch = [];\n                    for (var i = 0; i < this.connections.length; i++) {\n                        prefetch.push(this.connections[i].toTheConceptId);\n                        this.listenToEvent(this.connections[i].toTheConceptId);\n                    }\n                    // await GetAllConnectionsOfCompositionBulk(prefetch);\n                    yield GetAllConnectionsOfCompositionBulk(prefetch);\n                }\n                this.isDataLoaded = true;\n                this.listenToEvent(this.mainConcept);\n            }\n            return yield this.build();\n        });\n    }\n    build() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.connections = yield GetConnectionBulk(this.linkers);\n            for (var i = 0; i < this.connections.length; i++) {\n                let toConceptId = this.connections[i].toTheConceptId;\n                let toConcept = yield GetTheConcept(toConceptId);\n                console.log(\"this is the format\", this.format);\n                if (this.format == NORMAL) {\n                    let newComposition = yield GetCompositionWithIdFromMemory(toConcept.id);\n                    this.data.push(newComposition);\n                }\n                else if (this.format == JUSTDATA) {\n                    let newComposition = yield GetCompositionFromMemory(toConcept.id);\n                    this.data.push(newComposition);\n                }\n                else if (this.format == DATAIDDATE) {\n                    let newComposition = yield GetCompositionWithIdAndDateFromMemory(toConcept.id);\n                    this.data.push(newComposition);\n                }\n                else {\n                    let newComposition = yield GetCompositionWithIdAndDateFromMemory(toConcept.id);\n                    this.data.push(newComposition);\n                }\n            }\n            return this.data;\n        });\n    }\n}\n/**\n *\n * @param id this is the id whose links need to be found\n * @param linker this is the type connection that is connected to the mainConcept(id)\n * @param inpage number of outputs that has to be displayed\n * @param page the page which needs to be displayed as per the inpage parameter\n * @param format the format in which the output should be displayed (NORMAL, DATAID,JUSTDATA,DATAIDDATE)\n */\nexport function GetLinkListener(id, linker, inpage, page, format = NORMAL) {\n    return new GetLinkObservable(id, linker, inpage, page, format);\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { DependencyObserver, GetCompositionFromConnectionsWithDataId, GetConnectionBulk, RecursiveSearchApiRaw, } from \"../app\";\nimport { RAW } from \"../Constants/FormatConstants\";\nclass RecursiveSearchObservable extends DependencyObserver {\n    /**\n     *\n     * @param id this is the id whose links need to be found\n     * @param linker this is the type connection that is connected to the mainConcept(id)\n     * @param inpage number of outputs that has to be displayed\n     * @param page the page which needs to be displayed as per the inpage parameter\n     * @param format the format in which the output should be displayed (RAW, undefined)\n     */\n    constructor(id, linkers, textSearch = \"\", format) {\n        super();\n        this.searchText = \"\";\n        this.connections = [];\n        this.externalConnectionIds = [];\n        this.data = [];\n        this.mainConcept = id;\n        this.searchLinkers = linkers;\n        this.textSearch = textSearch;\n        if (format)\n            this.format = format;\n    }\n    bind() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.isDataLoaded) {\n                this.isDataLoaded = true;\n                const result = yield RecursiveSearchApiRaw(this.mainConcept, this.searchLinkers, this.textSearch);\n                this.compositionIds = result.compositionIds || [];\n                this.internalConnections = result.internalConnections || [];\n                this.externalConnectionIds = result.externalConnections || [];\n                // const internalConnections = await GetConnectionBulk(\n                //   this.internalConnections\n                // );\n                this.connections = yield GetConnectionBulk(this.externalConnectionIds);\n                var prefetch = [];\n                // listen external connection\n                // for (var i = 0; i < this.connections.length; i++) {\n                //   prefetch.push(this.connections[i].toTheConceptId);\n                //    this.listenToEvent(this.connections[i].toTheConceptId);\n                // }\n                // listen internal connection\n                // for (var i = 0; i < this.internalConnections.length; i++) {\n                //   //prefetch.push(internalConnections[i].toTheConceptId);\n                //    this.listenToEvent(this.internalConnections[i]);\n                // }\n                for (let i = 0; i < this.compositionIds.length; i++) {\n                    this.listenToEvent(this.compositionIds[i]);\n                }\n                //await GetAllConnectionsOfCompositionBulk(prefetch);\n                //this.listenToEvent(this.mainConcept);\n            }\n            return yield this.build();\n        });\n    }\n    build() {\n        return __awaiter(this, void 0, void 0, function* () {\n            //return  GetCompositionFromConnectionsWithDataId(this.compositionIds, this.externalConnectionIds)\n            if (this.format && this.format == RAW) {\n                this.data = {\n                    compositionIds: this.compositionIds,\n                    internalConnections: this.internalConnections,\n                    externalConnections: this.externalConnectionIds\n                };\n            }\n            else {\n                this.data = yield GetCompositionFromConnectionsWithDataId(this.compositionIds, this.internalConnections);\n            }\n            return this.data;\n            // }\n        });\n    }\n}\n/**\n * Method to listen the changes in recursive search data\n * @param id this is the id whose links need to be found\n * @param linker this is the type connection that is connected to the mainConcept(id)\n * @param inpage number of outputs that has to be displayed\n * @param page the page which needs to be displayed as per the inpage parameter\n * @param format the format in which the output should be displayed (RAW, undefined)\n */\nexport function RecursiveSearchListener(id, linkers, searchText = \"\", format) {\n    return new RecursiveSearchObservable(id, linkers, searchText, format);\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConnectionData, DATAID, GetConceptBulk, GetConceptByCharacter, SearchWithTypeAndLinkerApi } from \"../app\";\nimport { TokenStorage } from \"../DataStructures/Security/TokenStorage\";\nimport { formatDataArrayDataId, formatDataArrayNormal } from \"../Services/Search/SearchWithTypeAndLinker\";\nimport { DependencyObserver } from \"./DepenedencyObserver\";\nexport class GetLinkListObservable extends DependencyObserver {\n    constructor(searchStructure, searchQuery, token, format = DATAID) {\n        super();\n        this.searchQuery = [];\n        this.format = DATAID;\n        this.mainCompositionIds = [];\n        this.searchCharacter = \"\";\n        this.token = \"\";\n        this.searchStructure = searchStructure;\n        this.searchQuery = searchQuery;\n        this.searchQuery[0].type = searchStructure.composition;\n        this.searchCharacter = searchStructure.composition;\n        this.format = format;\n        this.token = TokenStorage.BearerAccessToken;\n    }\n    /**\n * This function will be called when there is a need to listen to a certain type of concept that will update\n *  the ui.\n * @param id this is the type id which needs to be tracked\n */\n    listenToEventType(id) {\n        window.addEventListener(`${id}`, (event) => {\n            if (!this.isUpdating) {\n                this.isUpdating = true;\n                let that = this;\n                console.log(\"listening to event type\", event);\n                setTimeout(function () {\n                    return __awaiter(this, void 0, void 0, function* () {\n                        let myEvent = event;\n                        if (!that.mainCompositionIds.includes(myEvent === null || myEvent === void 0 ? void 0 : myEvent.detail)) {\n                            that.mainCompositionIds.unshift(myEvent === null || myEvent === void 0 ? void 0 : myEvent.detail);\n                            that.conceptIds.push(myEvent === null || myEvent === void 0 ? void 0 : myEvent.detail);\n                            that.listenToEvent(myEvent === null || myEvent === void 0 ? void 0 : myEvent.detail);\n                            ConnectionData.GetConnectionsOfConcept(myEvent === null || myEvent === void 0 ? void 0 : myEvent.detail).then((connectionList) => {\n                                console.log(\"this is the update\", connectionList);\n                                for (let i = 0; i < connectionList.length; i++) {\n                                    that.linkers.push(connectionList[i].id);\n                                }\n                            });\n                        }\n                        that.isUpdating = false;\n                        yield that.bind();\n                        that.notify();\n                    });\n                }, 200);\n            }\n            else {\n                console.log(\"rejected this\");\n            }\n        });\n    }\n    bind() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.isDataLoaded) {\n                this.isDataLoaded = true;\n                var concept = yield GetConceptByCharacter(this.searchCharacter);\n                let result = yield SearchWithTypeAndLinkerApi(this.searchStructure, this.searchQuery, this.token);\n                this.conceptIds = result.compositionIds;\n                this.internalConnections = result.internalConnections;\n                this.linkers = result.linkers;\n                this.reverse = result.reverse;\n                this.mainCompositionIds = result.mainCompositionIds;\n                this.listenToEventType(concept.id);\n                for (let i = 0; i < this.mainCompositionIds.length; i++) {\n                    this.listenToEvent(this.mainCompositionIds[i]);\n                }\n            }\n            return yield this.build();\n        });\n    }\n    build() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield GetConceptBulk(this.conceptIds);\n            if (this.format == DATAID) {\n                this.data = yield formatDataArrayDataId(this.linkers, this.conceptIds, this.internalConnections, this.mainCompositionIds, this.reverse);\n            }\n            else {\n                this.data = yield formatDataArrayNormal(this.linkers, this.conceptIds, this.internalConnections, this.mainCompositionIds, this.reverse);\n            }\n            return this.data;\n        });\n    }\n}\n/**\n *\n * @param id this is the id whose links need to be found\n * @param linker this is the type connection that is connected to the mainConcept(id)\n * @param inpage number of outputs that has to be displayed\n * @param page the page which needs to be displayed as per the inpage parameter\n * @param format the format in which the output should be displayed (NORMAL, DATAID,JUSTDATA,DATAIDDATE)\n */\nexport function GetLinkListListener(searchStructure, searchQuery, token, format = DATAID) {\n    return new GetLinkListObservable(searchStructure, searchQuery, token, format);\n}\n","import { BaseUrl } from \"../BaseUrl\";\nexport class LConcept {\n    constructor(id, userId, typeId, categoryId, accessId, characterValue, typeCharacter, isNew = false, entryTimeStamp, updatedTimeStamp, referentId) {\n        this.structureType = \"lconcept\";\n        this.isComposition = false;\n        this.isTemp = false;\n        this.isSynced = false;\n        this.applicationId = BaseUrl.BASE_RANDOMIZER;\n        this.id = id;\n        this.userId = userId;\n        this.typeId = typeId;\n        this.ghostId = id;\n        this.categoryId = categoryId;\n        this.characterValue = characterValue;\n        this.accessId = accessId;\n        this.type = null;\n        this.isNew = isNew;\n        this.typeCharacter = typeCharacter;\n        this.entryTimeStamp = entryTimeStamp;\n        this.updatedTimeStamp = updatedTimeStamp;\n        this.isSynced = false;\n        this.referentId = referentId;\n        // ConceptsData.AddConcept(this);\n    }\n    getType() {\n        console.log(this.typeId);\n    }\n}\n","import { CreateDefaultConcept } from \"../../app\";\nimport { BaseUrl } from \"../BaseUrl\";\nexport class LConnection {\n    constructor(id, ofTheConceptId, toTheConceptId, typeId, orderId, accessId) {\n        this.isTemp = false;\n        this.applicationId = BaseUrl.BASE_RANDOMIZER;\n        this.type = CreateDefaultConcept();\n        this.id = id;\n        this.ofTheConceptId = ofTheConceptId;\n        this.toTheConceptId = toTheConceptId;\n        this.typeId = typeId;\n        this.ghostId = id;\n        this.orderId = orderId;\n        this.typeCharacter = \"\";\n        this.accessId = accessId;\n        this.typeCharacter = \"\";\n        this.entryTimeStamp = new Date();\n        this.terminationDateTime = new Date();\n        this.localSyncTime = new Date();\n    }\n}\n","export class PatcherStructure {\n    constructor() {\n        this.compositionId = 0;\n        this.userId = 999;\n        this.sessionId = 999;\n        this.accessId = 4;\n        this.ofTheCompositionId = 0;\n        this.patchObject = {};\n    }\n}\n","export class SessionData {\n    constructor() {\n        this.id = \"0\";\n        this.remote_address = \"\";\n        this.server_port = \"\";\n        this.server_address = \"\";\n        this.server_name = \"\";\n        this.server_software = \"\";\n        this.http_user_agent = \"\";\n        this.self = \"\";\n        this.port = \"\";\n        this.userId = \"\";\n        this.email = \"\";\n    }\n}\n","export class FilterSearch {\n    constructor() {\n        this.type = \"\";\n        this.search = \"\";\n        this.logicoperator = \"=\";\n        this.index = 0;\n        this.composition = true;\n        this.name = \"\";\n        this.operateon = \"\";\n    }\n}\n","export class SearchStructure {\n    constructor() {\n        this.type = \"\";\n        this.search = \"\";\n        this.composition = \"\";\n        this.internalComposition = \"\";\n        this.userId = 999;\n        this.inpage = 10;\n        this.page = 1;\n        this.auth = true;\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConnectionData } from \"../DataStructures/ConnectionData\";\nimport { LocalConnectionData } from \"../DataStructures/Local/LocalConnectionData\";\nimport { getObjectsFromLocalIndexDb } from \"../Database/indexdblocal\";\nimport { getObjectsFromIndexDb } from \"../Database/indexeddb\";\nexport function GetConnectionsFromIndexDb() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let connectionList = yield getObjectsFromIndexDb(\"connection\");\n            if (Array.isArray(connectionList)) {\n                for (let i = 0; i < connectionList.length; i++) {\n                    ConnectionData.AddConnectionToMemory(connectionList[i]);\n                }\n            }\n        }\n        catch (error) {\n            let errorObject = {\n                \"message\": \"Cannot create Connection Binary Tree Concept\",\n                \"ok\": false,\n                \"status\": 400,\n                \"data\": error\n            };\n            throw errorObject;\n        }\n    });\n}\nexport function GetConnectionsFromIndexDbLocal() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let connectionList = yield getObjectsFromLocalIndexDb(\"localconnection\");\n            if (Array.isArray(connectionList)) {\n                for (let i = 0; i < connectionList.length; i++) {\n                    LocalConnectionData.AddConnectionToMemory(connectionList[i]);\n                }\n            }\n        }\n        catch (error) {\n            let errorObject = {\n                \"message\": \"Cannot create Local Connection Binary Tree Concept\",\n                \"ok\": false,\n                \"status\": 400,\n                \"data\": error\n            };\n            throw errorObject;\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from '../DataStructures/BaseUrl';\nimport { ConceptsData } from '../DataStructures/ConceptData';\nimport { HandleHttpError, HandleInternalError } from '../Services/Common/ErrorPosting';\nimport { PurgatoryDatabaseUpdated } from '../Services/InitializeSystem';\nimport { GetRequestHeaderWithAuthorization } from '../Services/Security/GetRequestHeader';\nexport function GetAiData() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const start = new Date().getTime();\n            var header = GetRequestHeaderWithAuthorization('application/x-www-form-urlencoded');\n            const response = yield fetch(BaseUrl.GetAllAiData(), {\n                method: 'GET',\n                headers: header,\n            });\n            if (!response.ok) {\n                console.log('Ai Error Message: ', \"Cannot get response\");\n                HandleHttpError(response);\n            }\n            const result = yield response.json();\n            for (var i = 0; i < result.length; i++) {\n                ConceptsData.AddConcept(result[i]);\n            }\n            PurgatoryDatabaseUpdated();\n            let elapsed = new Date().getTime() - start;\n            console.log(\"The time taken is \", elapsed);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Ai Error Message: ', error.message);\n            }\n            else {\n                console.log('Ai Error Message: ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetAllAiData());\n        }\n    });\n}\n","export class Settings {\n}\nSettings.isUpdated = false;\nSettings.isOnlineSync = false;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetAiData } from \"../Api/GetAiData\";\nimport { SettingData } from \"../DataStructures/SettingData\";\nimport { Settings } from \"../DataStructures/Settings\";\nimport { AiUpdateFlag, GetLastSettingsFromDatabase, openDatabase } from \"../Database/indexeddb\";\nimport { openDatabase as localopenDb } from '../Database/indexdblocal';\nexport default function InitializeSystem() {\n    return __awaiter(this, arguments, void 0, function* (enableAi = true) {\n        try {\n            yield openDatabase(\"concepts\");\n            yield localopenDb(\"concepts\");\n            if (enableAi) {\n                var statsData = yield GetLastSettingsFromDatabase();\n                var settings = statsData;\n                if (settings.isOnlineSync) {\n                    return true;\n                }\n                yield GetAiData();\n            }\n            return true;\n        }\n        catch (error) {\n            let errorObject = {\n                \"message\": \"cannot initlize the AI system\",\n                \"ok\": false,\n                \"status\": 400,\n                \"data\": error\n            };\n            console.log(errorObject);\n            return true;\n        }\n    });\n}\nexport function PurgatoryDatabaseUpdated() {\n    return __awaiter(this, void 0, void 0, function* () {\n        Settings.isOnlineSync = true;\n        var settingData = new SettingData(Settings.isOnlineSync);\n        AiUpdateFlag(settingData);\n    });\n}\n","export class BaseObserver {\n    constructor() {\n        /**\n         * This is the subscribers of the data. If any thing on this widget changes then all the functions\n         * in the subscribers are called.\n         */\n        this.subscribers = [];\n    }\n    /**\n    * This is called by any data change. So that any data change will notify all the callback functions to execute.\n    */\n    notify() {\n        this.subscribers.map((subscriber) => {\n            subscriber(this.data);\n        });\n    }\n    /**\n     * This function is used to register the callback into the function in case of any dataChange.\n     * @param callback sets this callback to the subscribers list in the widget. So that in any change we can call this callback\n     * @returns execution of the callback passed.\n     */\n    dataChange(callback) {\n        this.subscribers.push(callback);\n        return callback(this.data);\n    }\n}\n","import { BaseObserver } from \"./BaseObserver\";\nexport class BaseWidget extends BaseObserver {\n    constructor() {\n        super(...arguments);\n        /**\n         * This is a random identifier to the widget that is used to identify the widget and other elements\n         * inside of it.\n         */\n        this.elementIdentifier = 0;\n        /**\n         * This flag is set to denote that that widget has been mounted\n         */\n        this.widgetMounted = false;\n    }\n    getComponent() {\n        let component = document.getElementById(this.elementIdentifier.toString());\n        return component;\n    }\n    getElementById(identifier) {\n        let element = this.getComponent();\n        let selectedElement = document.body;\n        if (element) {\n            let myelement = element.querySelector('#' + identifier);\n            if (myelement) {\n                selectedElement = myelement;\n                return selectedElement;\n            }\n        }\n        return null;\n    }\n    /**\n     *\n     * @returns random number that will be used to put into the main widget div so that we can uniqely identify\n     * the widget and its children from others.\n     */\n    createWidgetWrapperIdentifier() {\n        this.elementIdentifier = Math.random() * 10000;\n        return this.elementIdentifier.toString();\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseWidget } from \"./BaseWidget\";\n/**\n * Implementation of a widget system. If you need to create a widget that is compatible with the concept connection\n * system them extend this class and populate the functions such as getHtml() and widgetDidMount()\n */\nexport class StatefulWidget extends BaseWidget {\n    constructor() {\n        super(...arguments);\n        /**\n         * These are the child widgets that need to be added to  this widget\n         */\n        this.childWidgets = [];\n        /**\n         * This is the id of the parentElement of this widget.\n         */\n        this.parentElement = \"\";\n        /**\n         * This is the element that is a copy of the element that is mounted.\n         */\n        this.element = null;\n    }\n    setTitle(title) {\n        document.title = title;\n    }\n    /**\n     *\n     * @returns the html string that needs to be mounted to the DOM.\n     */\n    getHtml() {\n        return '';\n    }\n    /**\n     * This will help us update the data of the child widget. This will also call another function inside of the child widget\n     * called udpateWidget which the user can call after some data is udpated.\n     * @param value\n     * @param widget\n     */\n    UpdateChildData(value, widget) {\n        let passedWidget = widget;\n        passedWidget.data = value;\n        passedWidget.render();\n        passedWidget.updateWidget();\n    }\n    /**\n     * This is called after the data has been udpated by some other component.\n     */\n    updateWidget() { }\n    /**\n     *\n     * @param newState\n     */\n    setState(newState) {\n        this.data = newState;\n        this.notify();\n        this.render();\n    }\n    /**\n     * If any child widgets are registered in the widget. Then without any other changes to the contents and state\n     * this loadChildWidgets will be called which will help the child widgets be rendered to their respective positions.\n     */\n    loadChildWidgets() {\n        this.childWidgets.map((child) => {\n            let widget = this.getElementById(child.parentElement);\n            if (widget) {\n                widget.innerHTML = \"\";\n            }\n            child.mount(widget);\n        });\n    }\n    /**\n     * This is the main function that adds the html of the component to the element.\n     * The element is the mounted widget\n     */\n    render() {\n        if (this.element) {\n            this.element.innerHTML = this.getHtml();\n        }\n        // addEvents is called after the element has been mounted.\n        this.addEvents();\n        // then after the child widgets are again loaded.\n        if (this.widgetMounted) {\n            this.loadChildWidgets();\n        }\n    }\n    /**\n     * This is the function that needs to be called.\n     */\n    mountChildWidgets() {\n    }\n    /**\n     *\n     * @param parent This is the function that creates a new div and then mounts the html element to the parent.\n     */\n    mount(parent) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (parent) {\n                // create a div to wrap everything inside of it.\n                this.element = document.createElement(\"div\");\n                // assign an identifier to the element so that it does not conflict with others.\n                this.element.id = this.createWidgetWrapperIdentifier();\n                // then assign the html to the element.\n                this.element.innerHTML = yield this.getHtml();\n                // mount the div with unique identifier to the parent element.\n                parent.appendChild(this.element);\n                // also save in the widget its parent identifier.\n                this.parentElement = parent.id;\n                // if the widget has not been mounted.\n                if (this.widgetMounted == false) {\n                    // then after the widget has been mounted for the first time call this function\n                    // user can update this function as per their requirement \n                    //this will mostly be used to bind data / call data \n                    this.widgetDidMount();\n                    // since this is the first time the widget is being created. then all the child widgets are being mounted \n                    // as well here.\n                    this.mountChildWidgets();\n                    // after the widget has been mounted for the first time then the widget has been updated.\n                    this.widgetMounted = true;\n                }\n                else {\n                    // if the widget has already been mounted before then only render the new widget\n                    this.render();\n                }\n            }\n        });\n    }\n    /**\n     * This function will be called after the component mounts.\n     */\n    widgetDidMount() {\n        this.render();\n    }\n    /**\n     * This is called after the render function has been called. So this is used for the user functions to be added\n     * for the widget and its html element. User can add any logic here.\n     */\n    addEvents() {\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetAllLinkerConnectionsFromTheConcept } from \"../Api/GetAllLinkerConnectionsFromTheConcept\";\nimport { ConnectionData, DeleteConnectionById, GetConceptByCharacter } from \"../app\";\nexport function DeleteConnectionByType(id, linker) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let externalConnections = yield GetAllLinkerConnectionsFromTheConcept(id);\n        for (let i = 0; i < externalConnections.length; i++) {\n            ConnectionData.AddConnection(externalConnections[i]);\n        }\n        let connections = yield ConnectionData.GetConnectionsOfConcept(id);\n        let concept = yield GetConceptByCharacter(linker);\n        let toDelete = [];\n        for (let i = 0; i < connections.length; i++) {\n            if (connections[i].typeId == concept.id) {\n                toDelete.push(connections[i]);\n            }\n        }\n        for (let i = 0; i < toDelete.length; i++) {\n            DeleteConnectionById(toDelete[i].id);\n        }\n    });\n}\n","import { NORMAL } from \"../../Constants/FormatConstants\";\nexport class FreeschemaQuery {\n    constructor() {\n        this.type = \"\";\n        this.inpage = 10;\n        this.page = 1;\n        this.concepts = [];\n        this.selectors = [];\n        this.freeschemaQueries = [];\n        this.filters = [];\n        this.filterLogic = \"\";\n        this.typeConnection = \"\";\n        this.outputFormat = NORMAL;\n        this.name = \"\";\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../../DataStructures/BaseUrl\";\nimport { HandleHttpError, HandleInternalError } from \"../../Services/Common/ErrorPosting\";\nimport { GetRequestHeaderWithAuthorization } from \"../../Services/Security/GetRequestHeader\";\nexport function FreeschemaQueryApi(query_1) {\n    return __awaiter(this, arguments, void 0, function* (query, token = \"\") {\n        var header = GetRequestHeaderWithAuthorization(\"application/json\", token);\n        const queryUrl = BaseUrl.FreeschemaQueryUrl();\n        const body = JSON.stringify(query);\n        try {\n            const response = yield fetch(queryUrl, {\n                method: 'POST',\n                headers: header,\n                body: body\n            });\n            if (response.ok) {\n                let result = yield response.json();\n                return result;\n            }\n            else {\n                HandleHttpError(response);\n                console.log(\"This is the freeschema query error\", response.status);\n                return [];\n            }\n        }\n        catch (ex) {\n            console.log(\"This is the freeschema query error others\", ex);\n            HandleInternalError(ex, queryUrl);\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { FreeschemaQuery, FreeschemaQueryApi } from \"../app\";\nimport { ALLID, DATAID } from \"../Constants/FormatConstants\";\nimport { formatConnections, formatConnectionsDataId } from \"../Services/Search/SearchWithTypeAndLinker\";\nimport { DependencyObserver } from \"./DepenedencyObserver\";\nexport class SearchLinkMultipleAllObservable extends DependencyObserver {\n    constructor(query, token) {\n        super();\n        this.mainCompositionIds = [];\n        this.query = new FreeschemaQuery();\n        this.query = query;\n        this.format = query.outputFormat;\n    }\n    bind() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.isDataLoaded) {\n                this.isDataLoaded = true;\n                this.query.outputFormat = ALLID;\n                let result = yield FreeschemaQueryApi(this.query, \"\");\n                this.conceptIds = result.conceptIds;\n                this.internalConnections = result.internalConnections;\n                this.linkers = result.linkers;\n                this.reverse = result.reverse;\n                this.mainCompositionIds = result.mainCompositionIds;\n                console.log(this);\n            }\n            return yield this.build();\n        });\n    }\n    build() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.format == DATAID) {\n                this.data = yield formatConnectionsDataId(this.linkers, this.conceptIds, this.mainCompositionIds, this.reverse);\n            }\n            else {\n                this.data = yield formatConnections(this.linkers, this.conceptIds, this.mainCompositionIds, this.reverse);\n                //this.data = await formatDataArrayNormal(this.linkers, this.conceptIds, this.internalConnections,  this.mainCompositionIds, this.reverse );\n            }\n            return this.data;\n        });\n    }\n}\n/**\n *\n * @param id this is the id whose links need to be found\n * @param linker this is the type connection that is connected to the mainConcept(id)\n * @param inpage number of outputs that has to be displayed\n * @param page the page which needs to be displayed as per the inpage parameter\n * @param format the format in which the output should be displayed (NORMAL, DATAID,JUSTDATA,DATAIDDATE)\n */\nexport function SchemaQueryListener(query, token) {\n    return new SearchLinkMultipleAllObservable(query, token);\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport { init, updateAccessToken };\nimport CreateConceptBinaryTreeFromIndexDb from './Services/CreateBinaryTreeFromData';\nimport { IdentifierFlags } from './DataStructures/IdentifierFlags';\nexport { SearchLinkMultipleApi } from './Api/Search/SearchLinkMultipleApi';\nexport { SplitStrings } from './Services/SplitStrings';\nexport { GetCompositionList, GetCompositionListWithId } from './Services/GetCompositionList';\nexport { GetCompositionListLocal, GetCompositionListLocalWithId } from './Services/Local/GetCompositionListLocal';\nexport { GetAllConnectionsOfComposition } from './Api/GetAllConnectionsOfComposition';\nexport { GetComposition, GetCompositionWithId, recursiveFetch, GetCompositionWithAllIds } from './Services/GetComposition';\nexport { GetCompositionLocal, GetCompositionLocalWithId } from './Services/Local/GetCompositionLocal';\nexport { default as CreateComposition } from './Services/CreateTheComposition';\nexport { CreateTheCompositionLocal } from './Services/Local/CreateTheCompositionLocal';\nexport { CreateConnectionBetweenTwoConcepts, CreateConnectionBetweenTwoConceptsGeneral } from './Services/CreateConnectionBetweenTwoConcepts';\nexport { default as GetTheConcept } from './Services/GetTheConcept';\nexport { default as MakeTheInstanceConcept } from './Services/MakeTheInstanceConcept';\nexport { MakeTheInstanceConceptLocal } from './Services/Local/MakeTheInstanceConceptLocal';\nexport { storeToDatabase, getFromDatabaseWithType, getObjectsFromIndexDb } from './Database/NoIndexDb';\nexport { createTheConnection as CreateTheConnection } from './Services/CreateTheConnection';\nexport { default as GetConceptByCharacter } from './Services/GetConceptByCharacter';\nexport { GetLink, GetLinkRaw } from './Services/GetLink';\nexport { CreateDefaultConcept } from './Services/CreateDefaultConcept';\nexport { MakeTheTypeConceptLocal } from './Services/Local/MakeTheTypeLocal';\nexport { MakeTheTypeConcept } from './Services/MakeTheTypeConcept';\nexport { MakeTheTypeConceptApi } from './Api/MakeTheTypeConceptApi';\nexport { GetLinkerConnectionFromConcepts, GetLinkerConnectionToConcepts } from './Services/GetLinkerConnectionFromConcept';\nexport { DeleteConceptById } from './Services/DeleteConcept';\nexport { DeleteConnectionById } from './Services/DeleteConnection';\nexport { TrashTheConcept } from './Api/Delete/DeleteConceptInBackend';\nexport { GetConnectionById } from './Services/GetConnections';\nexport { MakeTheTimestamp } from './Services/MakeTheTimestamp';\nexport { RecursiveSearchApi, RecursiveSearchApiRaw, RecursiveSearchApiRawFullLinker, RecursiveSearchApiNewRawFullLinker } from './Api/RecursiveSearch';\nexport { GetCompositionBulkWithDataId, GetCompositionBulk, GetCompositionFromConnectionsWithDataId } from './Services/GetCompositionBulk';\nexport { GetConceptBulk } from './Api/GetConceptBulk';\nexport { GetConnectionBulk } from './Api/GetConnectionBulk';\nexport { GetAllConnectionsOfCompositionBulk } from './Api/GetAllConnectionsOfCompositionBulk';\nexport { LoginToBackend } from './Api/Login';\nexport { GetConnectionOfTheConcept } from './Api/GetConnectionOfTheConcept';\nexport { default as Signup } from './Api/Signup';\nexport { default as Signin } from './Api/Signin';\nexport { default as UpdateComposition } from './Services/UpdateComposition';\nexport { SearchAllConcepts } from './Api/Search/Search';\nexport { SearchWithLinker } from './Api/Search/SearchWithLinker';\nexport { GetCompositionWithCache, GetCompositionWithDataIdWithCache, GetCompositionWithDataIdBulk } from './Services/Composition/CompositionCache';\nexport { CreateSession } from './Api/Session/CreateSession';\nexport { CreateSessionVisit } from './Api/Session/CreateSessionVisit';\nexport { GetRelation, GetRelationRaw } from './Services/GetRelation';\nexport { recursiveFetchNew } from './Services/Composition/BuildComposition';\nexport { CreateTheCompositionWithCache } from './Services/Composition/CreateCompositionCache';\nexport { CreateDefaultLConcept } from './Services/Local/CreateDefaultLConcept';\nexport { CreateTheConnectionGeneral } from './Services/CreateTheConnectionGeneral';\nexport { CreateTheConnectionLocal } from './Services/Local/CreateTheConnectionLocal';\nexport { GetCompositionListAll, GetCompositionListAllWithId, GetCompositionListWithIdUpdated } from './Services/GetCompositionList';\nexport { GetUserGhostId, AddGhostConcept } from './Services/User/UserTranslation';\nexport { SearchLinkMultipleAll, FormatFromConnections } from './Services/Search/SearchLinkMultiple';\nexport { GetTheConceptLocal } from './Services/Local/GetTheConceptLocal';\nexport { UpdateCompositionLocal } from './Services/Local/UpdateCompositionLocal';\nexport { GetCompositionFromConnectionsWithDataIdInObject, GetCompositionFromConnectionsWithIndex, GetCompositionFromConnectionsWithDataIdIndex } from './Services/GetCompositionBulk';\nexport { GetRelationLocal } from './Services/Local/GetRelationLocal';\nexport { GetConceptByCharacterAndCategoryLocal } from './Services/Local/GetConceptByCharacterLocal';\nexport { ViewInternalData } from './Services/View/ViewInternalData';\nexport { ViewInternalDataApi } from './Api/View/ViewInternalDataApi';\nexport { convertFromLConceptToConcept, convertFromConceptToLConcept } from './Services/Conversion/ConvertConcepts';\nexport { SearchLinkInternal, SearchLinkInternalAll } from './Services/Search/SearchLinkInternal';\nexport { CreateConnectionBetweenTwoConceptsLocal } from './Services/Local/CreateConnectionBetweenTwoConceptsLocal';\nexport { DeleteConceptLocal } from './Services/Local/DeleteConceptLocal';\nexport { GetConnectionBetweenTwoConceptsLinker } from './Services/GetConnectionBetweenTwoConceptsLinker';\nexport { DelayFunctionExecution } from './Services/Common/DelayFunction';\nexport { GetCompositionWithIdAndDateFromMemory } from './Services/GetComposition';\nexport { GetConceptByCharacterAndType } from './Api/GetConceptByCharacterAndType';\nexport { GetConnectionDataPrefetch } from './Services/GetCompositionBulk';\nexport { FormatFromConnectionsAltered } from './Services/Search/SearchLinkMultiple';\nexport { NORMAL, JUSTDATA, DATAID, DATAIDDATE, RAW, ALLID, LISTNORMAL } from './Constants/FormatConstants';\nexport { PRIVATE, PUBLIC, ADMIN } from './Constants/AccessConstants';\nexport { SearchWithTypeAndLinkerApi } from './Api/Search/SearchWithTypeAndLinker';\nexport { DependencyObserver } from './WrapperFunctions/DepenedencyObserver';\nexport { SearchLinkMultipleAllObservable, searchLinkMultipleListener } from './WrapperFunctions/SearchLinkMultipleAllObservable';\nexport { GetCompositionListener } from './WrapperFunctions/GetCompositionObservable';\nexport { GetCompositionListListener } from './WrapperFunctions/GetCompositionListObservable';\nexport { SearchWithTypeAndLinker } from './Services/Search/SearchWithTypeAndLinker';\nexport { GetLinkListener } from './WrapperFunctions/GetLinkObservable';\nexport { RecursiveSearchListener } from './WrapperFunctions/RecursiveSearchObservable';\nexport { GetLinkListListener } from './WrapperFunctions/GetLinkListObservable';\nexport { SyncData } from './DataStructures/SyncData';\nexport { Concept } from './DataStructures/Concept';\nexport { LConcept } from './DataStructures/Local/LConcept';\nexport { LConnection } from './DataStructures/Local/LConnection';\nexport { Connection } from './DataStructures/Connection';\nexport { ConceptsData } from './DataStructures/ConceptData';\nexport { ConnectionData } from './DataStructures/ConnectionData';\nexport { BinaryTree } from './DataStructures/BinaryTree';\nexport { SearchQuery } from './DataStructures/SearchQuery';\nexport { PatcherStructure } from './DataStructures/PatcherStructure';\nexport { SessionData } from './DataStructures/Session/SessionData';\nexport { Composition } from './DataStructures/Composition/Composition';\nexport { CompositionBinaryTree } from './DataStructures/Composition/CompositionBinaryTree';\nexport { CompositionNode } from './DataStructures/Composition/CompositionNode';\nexport { LocalSyncData } from './DataStructures/Local/LocalSyncData';\nexport { UserBinaryTree } from './DataStructures/User/UserBinaryTree';\nexport { FilterSearch } from './DataStructures/FilterSearch';\nexport { SearchStructure } from './DataStructures/Search/SearchStructure';\nexport { LocalConceptsData } from './DataStructures/Local/LocalConceptData';\nimport { GetConnectionsFromIndexDb, GetConnectionsFromIndexDbLocal } from './Services/GetDataFromIndexDb';\nimport CreateLocalBinaryTreeFromIndexDb, { PopulateTheLocalConceptsToMemory } from './Services/Local/CreateLocalBinaryTreeFromData';\nimport InitializeSystem from './Services/InitializeSystem';\nimport { BaseUrl } from './DataStructures/BaseUrl';\nimport { TokenStorage } from './DataStructures/Security/TokenStorage';\nexport { BaseUrl } from './DataStructures/BaseUrl';\nexport { StatefulWidget } from './Widgets/StatefulWidget';\nexport { DeleteConnectionByType } from './Services/DeleteConnectionByType';\nexport { FreeschemaQuery } from './DataStructures/Search/FreeschemaQuery';\nexport { FreeschemaQueryApi } from './Api/Search/FreeschemaQueryApi';\nexport { SchemaQueryListener } from './WrapperFunctions/SchemaQueryObservable';\n/**\n * This function lets you update the access token that the package uses. If this is not passed you cannot create, update, view or delete\n * Your concepts using this package.\n * @param accessToken access token got from the sign in process\n */\nfunction updateAccessToken(accessToken = \"\") {\n    TokenStorage.BearerAccessToken = accessToken;\n}\n/**\n *\n * @param url This is the url for the backend c# system or our main data fabric server\n * @param aiurl This is the AI url that pulls in the data using our AI system . If you do not enter this then also disable the enableAi flag.\n * @param accessToken This is the JWT token that needs to be passed (But since you have just initilized the system). There is no way we can get access token\n * So this access token can be empty string. You can set it afterwards with another function UpdateAccessToken();\n * @param nodeUrl This is the url for the node server. This is another server in the data fabric that is used as server for business logic and security features.\n * @param enableAi This flag is used to enable or disable the AI feature that preloads data in the indexdb.\n * @param applicationName This is an unique name that is given to a program. Use this to discern one indexdb from another.\n */\nfunction init() {\n    return __awaiter(this, arguments, void 0, function* (url = \"\", aiurl = \"\", accessToken = \"\", nodeUrl = \"\", enableAi = true, applicationName = \"\", isTest = false) {\n        /**\n         * This process sets the initlizers in the static class BaseUrl that is used all over the system to access the urls\n         * Here we set the following variables.\n         * randomizer is created so that we can uniquely identify this initlization process but in the case that the BASE_RANDOMIZER has been alreay\n         * set in the indexdb this is replaced by the indexdb value.\n         */\n        try {\n            BaseUrl.BASE_URL = url;\n            BaseUrl.AI_URL = aiurl;\n            BaseUrl.NODE_URL = nodeUrl;\n            BaseUrl.BASE_APPLICATION = applicationName;\n            TokenStorage.BearerAccessToken = accessToken;\n            let randomizer = Math.floor(Math.random() * 100000000);\n            BaseUrl.BASE_RANDOMIZER = randomizer;\n            if (isTest) {\n                IdentifierFlags.isDataLoaded = true;\n                IdentifierFlags.isCharacterLoaded = true;\n                IdentifierFlags.isTypeLoaded = true;\n                IdentifierFlags.isLocalDataLoaded = true;\n                IdentifierFlags.isLocalTypeLoaded = true;\n                IdentifierFlags.isLocalCharacterLoaded = true;\n                IdentifierFlags.isConnectionLoaded = true;\n                IdentifierFlags.isConnectionTypeLoaded = true;\n                IdentifierFlags.isLocalConnectionLoaded = true;\n                return true;\n            }\n            console.log(\"This ist he base url\", BaseUrl.BASE_URL, randomizer);\n            /**\n                * We initialize the system so that we get all the concepts from the backend system that are most likely to be used\n                * We use some sort of AI algorithm to initilize these concepts with the most used concept.\n                * @param enableAi enableAi is a flag that the user can choose to set if they want to use this enable AI feature\n                * If the developer does not want to use this feature then they can just set enableAi to false.\n                */\n            yield InitializeSystem(enableAi);\n            const start = new Date().getTime();\n            /**\n             * This  will create a binary tree in the memory from the indexdb.\n             * This process will set Flags to denote that the binary tree is loaded, the character binary tree is  loaded\n             * and that the type binary tree has been loaded.\n             * These trees are helpful in caching concepts and connections for the data fabric.\n             */\n            yield CreateConceptBinaryTreeFromIndexDb().then(() => {\n                // IdentifierFlags.isDataLoaded= true;\n                // IdentifierFlags.isCharacterLoaded= true;\n                // IdentifierFlags.isTypeLoaded= true;\n                let elapsed = new Date().getTime() - start;\n                console.log(\"The time taken to prepare concept  data is  \", elapsed);\n            }).catch((event) => {\n                // console.log(\"This is the error in creating binary tree\", IdentifierFlags.isDataLoaded, IdentifierFlags.isCharacterLoaded, IdentifierFlags.isTypeLoaded);\n                throw event;\n            });\n            /**\n             * This will create a binary tree of local concepts that is saved from the indexdb.\n             * This process after finishing creating a binary tree of local concepts then set flag to denote that\n             * LocalBinaryTree has been created from the concepts in indexdb\n             * Local Binary Type tree has been loaded to the index db (flag is set to denote that)\n             * Character Binary Tree has been loaded from indexdb to memory (flag is set to denote that)\n             */\n            yield CreateLocalBinaryTreeFromIndexDb().then(() => {\n                // IdentifierFlags.isLocalDataLoaded = true;\n                // IdentifierFlags.isLocalTypeLoaded = true;\n                // IdentifierFlags.isLocalCharacterLoaded = true;\n                let elapsed = new Date().getTime() - start;\n                console.log(\"The time taken to prepare local concept  \", elapsed);\n            }).catch((event) => {\n                throw event;\n            });\n            /**\n             * This process gets the local connections from indexdb and loads it to the local connections array which is inside of\n             * a static class called LocalConnectionData.\n             * This function will also set and IdentifierFlag that tells the whole program that this process has finished.\n             */\n            yield GetConnectionsFromIndexDbLocal().then(() => {\n                IdentifierFlags.isLocalConnectionLoaded = true;\n            }).catch((event) => {\n                //console.log(\"This is the error in creating local connections binary tree\");\n                throw event;\n            });\n            /**\n             * We have designed our system to use local concepts and connections with its own local ids(negative ids) that\n             * is only valid for the browser that creates this. We have a translator in our node server.\n             * This function does this process in initlization.\n             */\n            PopulateTheLocalConceptsToMemory().then(() => {\n            }).catch((event) => {\n                console.log(\"This is the error in populating binary tree\");\n                throw event;\n            });\n            // PopulateTheLocalConnectionToMemory().then(()=>{\n            // }).catch((event) => {\n            //    console.log(\"This is the error in populating binary tree\");\n            //   throw event;\n            // });\n            /**\n             * This process gets the connections from indexdb and loads it to the connections array which is inside of\n             * a static class called ConnectionData.\n             * This function will also set and IdentifierFlag that tells the whole program that this process has finished.\n             */\n            yield GetConnectionsFromIndexDb().then(() => {\n                IdentifierFlags.isConnectionLoaded = true;\n                IdentifierFlags.isConnectionTypeLoaded = true;\n                let elapsed = new Date().getTime() - start;\n                console.log(\"The time taken to prepare connections  \", elapsed);\n            }).catch((event) => {\n                //console.log(\"This is the error in creating connections tree\");\n                throw event;\n            });\n            return true;\n        }\n        catch (error) {\n            console.log(\"cannot initialize the system\", error);\n        }\n    });\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","constructor","isOnlineSync","this","id","GetConceptUrl","BASE_URL","GetConnectionUrl","GetConceptBulkUrl","GetConnectionBulkUrl","GetAllConceptsOfUserUrl","GetAllConnectionsOfUserUrl","GetAllConnectionsOfCompositionUrl","GetAllConnectionsOfCompositionBulkUrl","GetConceptByCharacterValueUrl","GetConceptByCharacterAndTypeUrl","GetConceptByCharacterAndCategoryUrl","GetConceptByCharacterAndCategoryDirectUrl","GetCharacterByCharacterUrl","GetAllConceptsByTypeUrl","GetAllConnectionsOfConceptUrl","GetAllAiData","GetAllPrefetchConnectionsUrl","GetAllLinkerConnectionOfConceptUrl","GetAllLinkerConnectionToConceptUrl","DeleteConceptUrl","RecursiveSearchUrl","SearchLinkMultipleAllApiUrl","MakeTheNameInBackendUrl","SearchAllTypeWithLinker","auth","LoginUrl","SignupUrl","GetCompositionConnectionBetweenTwoConceptsUrl","SearchCompositionsUrl","SearchLinkMultipleAll","CreateSessionId","CreateSessionVisitUrl","ViewInternalDataUrl","SearchInternalWithAuthenticatedCcsUrl","SearchInternalWithCcsUrl","CreateGhostConceptApiUrl","NODE_URL","CreateGhostConnectionApiUrl","GetRealConceptById","GetReservedIdUrl","GetReservedConnectionIdUrl","CreateTheTextDataUrl","CreateTheCharacterDataUrl","CreateTheConceptUrl","CreateTheConnectionUrl","CreateTheConnectionNewUrl","MakeTheTypeConceptUrl","DeleteTheConnectionUrl","FreeschemaQueryUrl","AI_URL","MQTT_URL","BASE_APPLICATION","BASE_RANDOMIZER","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","version","openDatabase","databaseName","db","dbName","request","indexedDB","open","onerror","event","console","error","deleteDatabase","onsuccess","target","onupgradeneeded","conceptDb","connectionDb","settings","log","objectStoreNames","contains","deleteObjectStore","createObjectStore","keyPath","transaction","oncomplete","storeToDatabase","object","objectStore","add","catch","UpdateToDatabase","put","getObjectsFromIndexDb","ConceptList","allobjects","getAll","students","i","length","push","removeFromDatabase","delete","Number","IdentifierFlags","isTypeLoaded","isCharacterLoaded","isDataLoaded","isLocalDataLoaded","isLocalCharacterLoaded","isLocalTypeLoaded","isConnectionLoaded","isConnectionTypeLoaded","isLocalConnectionLoaded","Node","leftNode","rightNode","variants","height","currentNode","addCurrentNode","passedNode","node","typeId","addCurrentNodeType","addNode","LeftNode","RightNode","Math","max","getHeight","balancingFactor","getBalanceFactor","rightRotate","leftRotate","checkIfIdsInNode","ids","connectionArray","remainingIds","includes","index","indexOf","splice","addCharacterNode","characterValue","addTypeNode","y","x","T2","N","getFromNode","getCharacterFromNode","getCharacterFromNodeUpdated","_a","getFromNodeWithCharacterAndType","getFromNodeWithCharacterAndCategory","categoryId","removeNode","temp","immediateSuccessor","inOrderSuccessor","removeNodeWithVariants","typeIdentifier","conceptId","newNode","countNodeBelow","root","BinaryCharacterTree","waitForDataToLoad","checkFlag","setTimeout","addNodeToTree","characterRoot","removeNodeByCharacter","character","countNumberOfNodes","addConceptToTree","concept","getNodeFromTree","getNodeFromTreeUpdated","getCharacterAndTypeFromTree","getCharacterAndCategoryFromTree","removeConceptCharacter","BinaryTree","characterNode","removeNodeFromTree","Event","dispatchEvent","getConceptListFromIds","userId","referentId","accessId","isNew","entryTimeStamp","updatedTimeStamp","typeCharacter","count","isComposition","isTemp","isSynced","applicationId","ghostId","type","getType","created_on","Date","updated_on","TypeNode","addType","_b","_c","_d","balance","BinaryTypeTree","CustomEvent","detail","typeNode","removeTypeConcept","getNodeFromTreeNew","getTypeVariantsFromTreeNew","conceptIds","concepts","alreadyExist","j","GetTheConcept","getTypeVariantsFromTreeWithUserIdNew","allConcepts","getTypeVariantsWithCharacterValueNew","typeRoot","name","CheckContains","conceptsArray","AddNpc","NPC","GetNpc","AddConceptToStorage","GetConceptBulkData","AddConcept","AddConceptToMemory","AddConceptTemporary","conceptDictionary","RemoveConcept","GetConcept","myConcept","returnedConcept","GetConceptByCharacter","GetConceptByCharacterUpdated","GetConceptByCharacterAndTypeLocal","character_value","GetConceptByCharacterAndCategoryLocal","GetConceptsByTypeId","GetConceptsByTypeIdAndUser","GetBinaryCharacterTree","getName","CreateConceptBinaryTreeFromIndexDb","conceptList","Array","isArray","DelayFunctionExecution","FreeSchemaResponse","message","ok","status","data","url","getMessage","setMessage","getStatus","setStatus","getData","setData","getOk","setOk","getUrl","setUrl","response","errorResponse","statusText","HandleInternalError","stack","TokenStorage","contentType","Accept","BearerAccessToken","GetRequestHeaderWithAuthorization","token","GetOnlyTokenHeader","myHeaders","Headers","append","SearchLinkMultipleApi","searchQuery_1","arguments","searchQuery","header","queryUrl","body","JSON","stringify","fetch","method","headers","json","ex","SplitStrings","typeString","pos","lastIndexOf","SplittedStrings","substring","GetAllConceptsByType","urlencoded","URLSearchParams","toString","Error","ofTheConceptId","toTheConceptId","orderId","toUpdate","ofConcept","toConcept","terminationDateTime","localSyncTime","ConnectionNode","traverse","ConnectionBinaryTree","connectionroot","addConnectionToTree","connection","getConnectionListFromIds","NodePrimitive","ConnectionOfNode","super","ConnectionOfTheTree","CreateCompositionKey","GetConnectionByOfTheConceptAndTypeId","existingNode","addConnection","connectionList","list","connectionNode","connectionOfNode","ConnectionTypeNode","ConnectionTypeTree","connectionTypeRoot","ConnectionData","AddConnectionToStorage","AddConnection","AddConnectionToMemory","AddToDictionary","connectionDictionary","RemoveConnection","GetConnectionTypeOfTree","GetConnectionByOfTheConceptAndType","GetConnectionByOfType","GetConnectionTree","GetConnectionTypeTree","GetConnectionBulkData","GetConnection","myConnection","GetConnectionsOfCompositionLocal","connections","connectionIds","conn","GetConnectionsOfConcept","GetConceptBulk","passedConcepts","getTime","from","Set","bulkConceptFetch","FindConceptsFromConnections","FindConnectionsOfCompositionsBulkInMemory","composition_ids","FinalConnectionList","GetAllConnectionsOfCompositionBulk","connectionListString","GetAllConnectionsOfCompositionOnline","LocalIndexDb","localDbName","idDb","getObjectsFromLocalIndexDb","getRequest","LNode","updateNodeSyncStatus","lconcept","LocalBinaryTree","exception","updateSyncStatus","LocalBinaryCharacterTree","LocalCharacterRoot","removeConceptType","LocalBinaryTypeTree","LocalTypeRoot","getTypeVariantsFromTree","getTypeVariantsFromTreeWithUserId","LocalGhostIdTree","LocalSyncData","conceptsSyncArray","SyncDataDelete","connectionSyncArray","CheckContainsConnection","CheckIfTheConceptIdExists","SyncDataOnline","slice","connectionsArray","toSyncConcepts","UpdateConceptSyncStatus","UpdateConceptListToIncludeRelatedConcepts","conceptData","connectionData","myBody","set","resultString","CreateTheGhostConceptApi","AddPermanentConcept","LocalConnectionData","AddPermanentConnection","ConvertGhostIdsInConnections","newOfTheConceptId","ghostIdMap","newToTheConceptId","newTypeId","ofTheConcept","GetConceptByGhostId","AddConceptIfDoesNotExist","toTheConcept","exists","returnConcept","RemoveConnectionById","connectionId","syncDataLocalDb","Map","lconnection","ConvertFromLConnectionToConnection","GetConnectionOfCompositionAndTypeLocal","localconceptsArray","RemoveConceptById","ClearData","conceptUse","isNpc","formdata","FormData","GetAllConnectionsOfComposition","composition_id","RecursiveFetchBuildLayer","compositionList","returnOutput","undefined","output","recursiveFetch","GetComposition","GetCompositionWithAllIds","recursiveFetchWithSubCompositions","GetCompositionFromMemory","recursiveFetchConcept","GetCompositionFromMemoryNormal","recursiveFetchConceptNormal","GetCompositionWithIdFromMemory","FinalReturn","GetCompositionWithIdFromMemoryNew","startTime","concept_1","connectionList_1","compositionList_1","visitedConcepts","_e","_f","_g","_h","mainString","myString","newData","ofKey","regex","localToKey","replace","finalOutput","ofConceptKey","internalOutput","recursiveFetchConceptSingleLoop","GetCompositionWithIdAndDateFromMemory","GetCompositionWithId","arroutput","toConceptId","toConceptTypeId","toConceptType","localKey","isNaN","id_1","GetConceptByCharacterValue","literalCharacter","GetConceptByCharacterLocal","splittedStringArray","category","prefix","GetConceptByCategoryAndCharacterLocalMemory","GetCompositionList","compositionName_1","userId_1","compositionName","inpage","page","CompositionList","startPage","prefetchComposition","compositionJson","GetCompositionListAll","LocalCompositionList","GetCompositionListLocal","AllList","race","GetCompositionListAllWithId","conceptLocal","conceptOnline","conceptListLocal","finalLocal","conceptListOnline","isDuplicate","conceptList_1","localConceptList_1","localConceptList","localConceptLength","GetCompositionLocalWithId","FormatTheConcepts","GetCompositionListWithId","GetCompositionListWithIdUpdated","GetCompositionLocal","realConcept","TranslateLocalToReal","recursiveFetchLocal","GetCompositionListLocalWithId","CreateTheConceptApi","SyncData","jsonData","CreateTheConnectionApi","createTheConnection","floor","random","GetConceptByCharacterAndType","toSendJson","TheTexts","securityId","securityUserId","accessUserId","sessionId","sessionUserId","entryTimestamp","getId","AddId","GetReservedIds","shift","ReservedConnectionIds","GetReservedConnectionIds","CreateTheConcept","referent","CreateTheConceptImmediate","MakeTheInstanceConcept","type_1","referent_1","composition","passedAccessId","passedSessionId","sessionInformationId","sessionInformationUserId","stringToCheck","stringLength","typeConcept","startsWith","MakeTheTypeConceptApi","textData","CreateTextData","now","conceptTypeCharacter","newConceptId","typeUserId","requestObject","MakeTheNameInBackend","CreateTheComposition","json_1","ofTheConceptUserId","mainKey","localUserId","localAccessId","localSessionId","MainKeyLocal","MainConcept","localMainKey","ofThe","ofTheUser","CreateLocalBinaryTreeFromIndexDb","PopulateTheLocalConceptsToMemory","navigator","locks","lock","idList","localConceptIdValue","LocalId","AddConceptId","newObject","PopulateTheLocalConnectionToMemory","localConnectionId","AddConnectionId","localId","getConceptId","ReservedLocalId","finalLocalId","getConnectionId","ReservedConnectionId","localConId","CreateTheConnectionLocal","ofTheConceptId_1","toTheConceptId_1","typeId_1","randomid","realOfTheConceptId","realToTheConceptId","realTypeId","CreateTheConceptLocal","typecharacter_1","categoryId_1","accessId_1","typecharacter","MakeTheTypeConceptLocal","existingConcept","conceptString","MakeTheConceptLocal","categoryConcept","MakeTheInstanceConceptLocal","CreateTheCompositionLocal","automaticSync","GetConnectionOfTheConcept","CreateTheConnectionGeneral","ofTheConceptUserId_1","GetConnectionById","connectionString","DeleteConnectionById","redirect","DeleteTheConnection","convertFromLConceptToConcept","GetUserGhostId","err","CreateConnectionBetweenTwoConcepts","ofTheConcept_1","toTheConcept_1","linker_1","linker","both","linkerAdd1","backwardLinker","prefix1","CountRelationship","connectionConceptReverse","newConnection","linkerAdd","forwardLinker","connectionConcept","passedUserId","concept1","forwardLinkerCount","forwardLinkerCountString","forwardLinkerCountConcept","countConceptList","countConcept","oldcountConcept","CreateConnectionBetweenTwoConceptsGeneral","getFromDatabaseWithType","GetLink","linkString","relatedConcept","prefetch","newComposition","GetLinkRaw","TheCharacter","CharacterRepository","AddCharacter","characterData","GetCharacter","theCharacter","Returner","MakeTheCharacterData","the_character_data","savingCharacter","CreateTheCharacter","MakeTheConcept","MakeTheTypeConcept","charCodeAt","typeIdForCharacter","MakeTheCharacter","GetConceptByCharacterAndCategory","category_id","GetConceptByCharacterAndCategoryDirectApi","GetConceptByCharacterAndCategoryFromMemory","GetAllLinkerConnectionsFromTheConcept","GetLinkerConnectionFromConcepts","localConnection","connectionIdentifier","GetLinkerConnectionToConcepts","GetAllLinkerConnectionsToTheConcept","DeleteConceptById","DeleteTheConcept","TrashTheConcept","MakeTheTimestamp","startsWithThe","SearchQuery","listLinkers","fullLinkers","textSearch","logic","reverse","doFilter","filterSearches","selectors","ofCompositions","GetConnectionBulk","bulkConnectionFetch","GetCompositionBulk","compositions","comp","GetCompositionBulkWithDataId","GetCompositionFromConnectionsWithDataId","GetCompositionFromConnectionsWithDataIdIndex","GetCompositionFromConnectionsWithIndex","remainingConnections","connectionsAll","prefetchConcepts","connectionsAllLocal","GetCompositionFromConnectionsInObject","RecursiveSearchApi","raw","compositionIds","internalConnections","externalConnections","RecursiveSearchApiRaw","RecursiveSearchApiRawFullLinker","RecursiveSearchApiNewRawFullLinker","LoginToBackend","email","password","Signup","signupModel","signupResponse","freeschemaRes","statusCode","mode","cache","credentials","referrerPolicy","postData","Signin","signinInfo","InsertUniqueNumber","toInsert","CheckIfTypeConceptsExistsInArray","foundConcepts","newConceptType","CheckIfTypeLConceptsExistsInArray","CheckAllConnectionsConnectedInConnectionArray","foundConnections","check","find","c","toCheck","CheckAllConnectionsConnectedInLConnectionArray","RemoveConceptFromList","findIndex","RemoveConnectionFromList","CompositionNode","expiryTime","isValid","currentTime","CompositionBinaryTree","saveToCache","cached","addCompositionToTree","recursiveFetchNew","getConceptFromList","Composition","mainConcept","subcompositions","updateCache","UpdateAcrossDistributedSystem","MQTT_CONNECTION","publish","isUpdating","GetDataCache","CreateTheCompositionWithCache","UpdateComposition","patcherStructure","parentConcept","toDeleteConcepts","compositionId","ofTheCompositionId","toDeleteConnections","localConcept","conceptIdList","compositionCache","patchObject","insertingConcept","ExistingConcepts","deletingConnections","concat","k","SearchAllConcepts","search_1","composition_1","token_1","search","SearchWithLinker","GetCompositionWithCache","connectionListPassed","getMyConnections","SaveToCompositionCache","GetCompositionWithDataIdWithCache","GetCompositionWithDataIdBulk","numbers","BulkConceptGetterApi","BulkConceptGetter","CreateSession","sessionData","CreateSessionVisit","GetRelation","relation_1","relation","GetRelationRaw","UserNode","UserBinaryTree","compositeKey","toUpperCase","ghostId_1","userNode","testConcept","AddGhostConcept","NORMAL","DATAID","JUSTDATA","DATAIDDATE","RAW","ALLID","LISTNORMAL","SearchWithTypeAndLinker","searchStructure_1","searchStructure","linkers","mainCompositionIds","prefetchConnections","formatDataArrayNormal","caller","format","mainCompositionId","conceptsConnections","out","linkers_1","conceptIds_1","connections_1","reverse_1","mainCompositionId_1","FormatFromConnections","GetCompositionFromConnectionsWithDataIdInObjectNew","FormatFromConnectionsAltered","DataIdBuildLayer","compositionData_1","mainComposition_1","compositionData","mainComposition","mainData","myConcepts","sort","reverseFlag","mydata","linkerConcept","keys","reverseCharater","mymainData","convertFromConceptToLConcept","LConcept","convertFromConnectionToLConnection","Lconnection","GetTheConceptLocal","localNode","UpdateCompositionLocal","connectionListOriginal","GetRelationLocal","localConnections","GetConnectionOfTheConceptLocal","ViewInternalDataApi","ViewInternalData","formattedOutput","noconn","SearchLinkInternal","internalComposition","SearchInternalApi","SearchLinkInternalAll","SearchInternalAllApi","CreateConnectionBetweenTwoConceptsLocal","DeleteConceptLocal","GetConnectionBetweenTwoConceptsLinker","fullLinker_1","fullLinker","forward","typeLinker","ofConceptId","GetCompositionConnectionsBetweenTwoConcepts","ms","callback","ADMIN","PRIVATE","PUBLIC","DependencyObserver","subscribers","dependency","fetched","listenToEventType","window","addEventListener","that","myEvent","unshift","listenToEvent","bind","notify","subscribe","unsubscribe","filter","fn","map","subscriber","SearchLinkMultipleAllObservable","searchLinkMultipleListener","searchQueries","GetCompositionObservable","conceptConnections","GetCompositionById","build","latestConnectionList","latestConnectionIds","RecursiveFetchBuildLayerDataId","RecursiveFetchBuildLayerNormal","GetCompositionListener","GetCompositionListObservable","GetCompositionListListener","GetLinkObservable","connectionsString","GetLinkListener","RecursiveSearchObservable","searchText","externalConnectionIds","searchLinkers","RecursiveSearchListener","GetLinkListObservable","searchCharacter","formatDataArrayDataId","GetLinkListListener","structureType","LConnection","PatcherStructure","SessionData","remote_address","server_port","server_address","server_name","server_software","http_user_agent","self","port","FilterSearch","logicoperator","operateon","SearchStructure","Settings","isUpdated","InitializeSystem","enableAi","statsData","settingsData","settingsArray","start","settingData","PurgatoryDatabaseUpdated","elapsed","GetAiData","errorObject","BaseObserver","dataChange","BaseWidget","elementIdentifier","widgetMounted","getComponent","document","getElementById","identifier","element","selectedElement","myelement","querySelector","createWidgetWrapperIdentifier","StatefulWidget","childWidgets","parentElement","setTitle","title","getHtml","UpdateChildData","widget","passedWidget","render","updateWidget","setState","newState","loadChildWidgets","child","innerHTML","mount","addEvents","mountChildWidgets","parent","createElement","appendChild","widgetDidMount","DeleteConnectionByType","toDelete","FreeschemaQuery","freeschemaQueries","filters","filterLogic","typeConnection","outputFormat","FreeschemaQueryApi","query_1","query","FormatFromConnectionsAlteredArrayExternal","formatConnectionsDataId","FormatConceptsAndConnectionsNormalList","formatConnections","SchemaQueryListener","updateAccessToken","accessToken","init","aiurl","nodeUrl","applicationName","isTest","randomizer","GetConnectionsFromIndexDbLocal","GetConnectionsFromIndexDb"],"sourceRoot":""}